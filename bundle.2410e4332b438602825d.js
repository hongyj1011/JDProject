/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(9);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJ0LXRlbXBsYXRlL2xpYi9ydW50aW1lLmpzP2Y4ZTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbXBpbGUvcnVudGltZScpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2FydC10ZW1wbGF0ZS9saWIvcnVudGltZS5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/NWY3MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXHJcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function () {\n\t//\tvar pathManager = require(\"srcRootDir/Tools/pathManager.js\");\n\tvar Mock = __webpack_require__(4);\n\tvar Swiper = __webpack_require__(6);\n\t__webpack_require__(7);\n\t$(\".headBanner i\").on(\"click\", function () {\n\t\t$(this).parent().hide();\n\t});\n\n\tvar citysArr = [\"北京\", \"上海\", \"天津\", \"重庆\", \"河北\", \"山西\", \"河南\", \"辽宁\", \"吉林\", \"黑龙江\", \"内蒙古\", \"江苏\", \"山东\", \"安徽\", \"浙江\", \"福建\", \"湖北\", \"湖南\", \"广东\", \"广西\", \"江西\", \"四川\", \"海南\", \"贵州\", \"云南\", \"西藏\", \"陕西\", \"甘肃\", \"青海\", \"宁夏\", \"新疆\", \"港澳\", \"台湾\", \"钓鱼岛\", \"海外\"];\n\tfor (var i = 0; i < citysArr.length; i++) {\n\t\t$(\".location ul\").append($(\"<li><a href='javascript:void(0)'>\" + citysArr[i] + \"</a></li>\"));\n\t}\n\t$(\".location a\").eq(0).addClass(\"currentCity\");\n\t$(\".location a\").on(\"click\", function () {\n\t\t$(this).addClass(\"currentCity\").parent().siblings().children(\"a\").removeClass(\"currentCity\");\n\t\t$(\".location-Place span\").text($(this).text());\n\t});\n\n\tvar line = $(\".pubNotice-line\");\n\tvar pubBody = $(\".pubBody\");\n\t$(\".pubNotice-01\").mouseover(function () {\n\t\tline.css(\"left\", \"15px\");\n\t\tpubBody.children().eq(0).show().siblings().hide();\n\t});\n\t$(\".pubNotice-02\").mouseover(function () {\n\t\tline.css(\"left\", \"75px\");\n\t\tpubBody.children().eq(1).show().siblings().hide();\n\t});\n\n\t$(\".bConten1\").on(\"mouseenter\", \"li\", function () {\n\t\t$(this).addClass('hover').siblings().removeClass('hover');\n\t\t$(\".popDiv\").show().children().eq($(this).index()).show().siblings().hide();\n\t}).on(\"mouseleave\", function () {\n\t\t$(this).find(\".hover\").removeClass(\"hover\");\n\t\t$(\".popDiv\").hide();\n\t});\n\n\tvar initObj = {\n\t\tinitSiteNav: function initSiteNav() {\n\t\t\t$.ajax({\n\t\t\t\turl: \"PHP/siteNav.php\",\n\t\t\t\ttype: \"POST\",\n\t\t\t\tdataType: \"json\",\n\t\t\t\tsuccess: function success(data) {\n\n\t\t\t\t\tvar jsonArr = {\n\t\t\t\t\t\tjsondata: data\n\t\t\t\t\t};\n\t\t\t\t\tvar render = __webpack_require__(8);\n\t\t\t\t\tvar html = render(jsonArr);\n\t\t\t\t\t$(\".siteNav div\").append(html);\n\t\t\t\t},\n\t\t\t\terror: function error(_error) {\n\t\t\t\t\t$(\".siteNav div\").append(_error.status + _error.statusText);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tinitlunBo: function initlunBo() {\n\t\t\tvar mySwiper = new Swiper('#banner-swiper', {\n\t\t\t\tloop: true,\n\t\t\t\tautoplay: {\n\t\t\t\t\tdelay: 1000\n\t\t\t\t},\n\t\t\t\t// 如果需要分页器\n\t\t\t\tpagination: {\n\t\t\t\t\tel: '.banner-page',\n\t\t\t\t\tclickable: true,\n\t\t\t\t\trenderBullet: function renderBullet(index, className) {\n\t\t\t\t\t\treturn '<span class=\"' + className + '\">' + (index + 1) + '</span>';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t// 如果需要前进后退按钮\n\t\t\t\tnavigation: {\n\t\t\t\t\tnextEl: '.banner-next',\n\t\t\t\t\tprevEl: '.banner-prev'\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tinitBanner: function initBanner() {\n\t\t\tMock.mock(/bannerChannel.php/, {\n\t\t\t\t'jsondata|16': [{\n\t\t\t\t\t'specialChannel|2-8': ['@cword(2,4)'],\n\t\t\t\t\t'content|7-15': [{\n\t\t\t\t\t\t'title': '@cword(2,4)',\n\t\t\t\t\t\t'message|5-15': ['@cword(2,6)']\n\t\t\t\t\t}],\n\t\t\t\t\t'sImgs|8': ['@dataImage(\"83x35\",\"small\")'],\n\t\t\t\t\t'bImgs|2': ['@dataImage(\"168x134\",\"large\")']\n\t\t\t\t}]\n\t\t\t});\n\t\t\t$.ajax({\n\t\t\t\turl: \"PHP/bannerChannel.php\",\n\t\t\t\ttype: \"POST\",\n\t\t\t\tdataType: \"json\",\n\t\t\t\tsuccess: function success(data) {\n\t\t\t\t\t//\t\t\t\t\t\t\t\t\t\tvar jsonArr = {\n\t\t\t\t\t//\t\t\t\t\t\t\t\t\t\t\tjsondata: data\n\t\t\t\t\t//\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t//\t\t\t\t\tvar html = template('bannerChannel', jsonArr);\n\t\t\t\t\t//\t\t\t\t\tvar html = template('bannerChannel', data);\n\t\t\t\t\tvar render = __webpack_require__(11);\n\t\t\t\t\tvar html = render(data);\n\t\t\t\t\t$(\".popDiv\").append(html);\n\t\t\t\t},\n\t\t\t\terror: function error(errormsg) {\n\t\t\t\t\tconsole.log(errormsg);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tsetSKillTimer: function setSKillTimer() {\n\t\t\tvar allSecond = 3 * 60 * 60;\n\t\t\tvar hourLabel = $(\".cd-hour\");\n\t\t\tvar minuteLabel = $(\".cd-minute\");\n\t\t\tvar secondLabel = $(\".cd-second\");\n\t\t\tvar timer = setInterval(function () {\n\t\t\t\tif (allSecond <= 0) {\n\t\t\t\t\tclearInterval(timer);\n\t\t\t\t\talert(\"秒杀结束\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tallSecond--;\n\t\t\t\tvar hour = Math.floor(allSecond / 3600);\n\t\t\t\tvar minute = Math.floor(allSecond % 3600 / 60);\n\t\t\t\tvar sec = allSecond % 60;\n\t\t\t\tif (hour < 10) {\n\t\t\t\t\thourLabel.text(\"0\" + hour);\n\t\t\t\t} else {\n\t\t\t\t\thourLabel.text(hour);\n\t\t\t\t}\n\t\t\t\tif (minute < 10) {\n\t\t\t\t\tminuteLabel.text(\"0\" + minute);\n\t\t\t\t} else {\n\t\t\t\t\tminuteLabel.text(minute);\n\t\t\t\t}\n\t\t\t\tif (sec < 10) {\n\t\t\t\t\tsecondLabel.text(\"0\" + sec);\n\t\t\t\t} else {\n\t\t\t\t\tsecondLabel.text(sec);\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t},\n\t\tinitSecKillList: function initSecKillList() {\n\t\t\tvar data = Mock.mock({\n\t\t\t\t'jsondata|4-20': [{\n\t\t\t\t\t\"id|+1\": 1,\n\t\t\t\t\t'img': '@dataImage(\"140x140\",\"hello\")',\n\t\t\t\t\t'title': '@cword(10,20)',\n\t\t\t\t\t'newPrice|10-5000.2': 100,\n\t\t\t\t\t'originPrice|10-5000.2': 100\n\t\t\t\t}]\n\t\t\t});\n\t\t\t//\t\t\tvar html = template('secKillModel', data);\n\t\t\tvar render = __webpack_require__(12);\n\t\t\tvar html = render(data);\n\t\t\t$(\"#secKill-area .swiper-wrapper\").append(html);\n\t\t\tvar mySwiper = new Swiper('#secKill-area', {\n\t\t\t\tloop: true,\n\t\t\t\tslidesPerView: 4,\n\t\t\t\tslidesPerGroup: 4,\n\t\t\t\tautoplay: {\n\t\t\t\t\tdelay: 5000\n\t\t\t\t},\n\t\t\t\t// 如果需要前进后退按钮\n\t\t\t\tnavigation: {\n\t\t\t\t\tnextEl: '.sk-next',\n\t\t\t\t\tprevEl: '.sk-prev'\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar rightData = Mock.mock({\n\t\t\t\t'lists|2-8': [{\n\t\t\t\t\t'img': '@dataImage(\"180x260\",\"test\")'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tfor (var i = 0; i < rightData.lists.length; i++) {\n\t\t\t\tvar jsonData = rightData.lists[i];\n\t\t\t\tvar eleHtml = '<div class=\"swiper-slide\"><a class=\"sk-right-slide\"><img src=\"' + jsonData.img + '\"/></a></div>';\n\t\t\t\t$(\"#secKill-right .swiper-wrapper\").append(eleHtml);\n\t\t\t}\n\t\t\tvar secKillRight = new Swiper('#secKill-right', {\n\t\t\t\tloop: true,\n\t\t\t\tautoplay: {\n\t\t\t\t\tdelay: 3000\n\t\t\t\t},\n\t\t\t\tpagination: {\n\t\t\t\t\tel: '.sk-right-pagination',\n\t\t\t\t\tclickable: true\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tinitObj.initlunBo();\n\tinitObj.initSiteNav();\n\tinitObj.initBanner();\n\tinitObj.setSKillTimer();\n\tinitObj.initSecKillList();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n!function (t, e) {\n\t\"object\" == ( false ? \"undefined\" : _typeof(exports)) && \"object\" == ( false ? \"undefined\" : _typeof(module)) ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? exports.Mock = e() : t.Mock = e();\n}(undefined, function () {\n\treturn function (t) {\n\t\tfunction e(r) {\n\t\t\tif (n[r]) return n[r].exports;var a = n[r] = { exports: {}, id: r, loaded: !1 };return t[r].call(a.exports, a, a.exports, e), a.loaded = !0, a.exports;\n\t\t}var n = {};return e.m = t, e.c = n, e.p = \"\", e(0);\n\t}([function (t, e, n) {\n\t\tvar r,\n\t\t    a = n(1),\n\t\t    o = n(3),\n\t\t    u = n(5),\n\t\t    i = n(20),\n\t\t    l = n(23),\n\t\t    s = n(25);\"undefined\" != typeof window && (r = n(27)); /*!\n                                                             Mock - 模拟请求 & 模拟数据\n                                                             https://github.com/nuysoft/Mock\n                                                             墨智 mozhi.gyy@taobao.com nuysoft@gmail.com\n                                                             */\n\t\tvar c = { Handler: a, Random: u, Util: o, XHR: r, RE: i, toJSONSchema: l, valid: s, heredoc: o.heredoc, setup: function setup(t) {\n\t\t\t\treturn r.setup(t);\n\t\t\t}, _mocked: {} };c.version = \"1.0.1-beta3\", r && (r.Mock = c), c.mock = function (t, e, n) {\n\t\t\treturn 1 === arguments.length ? a.gen(t) : (2 === arguments.length && (n = e, e = void 0), r && (window.XMLHttpRequest = r), c._mocked[t + (e || \"\")] = { rurl: t, rtype: e, template: n }, c);\n\t\t}, t.exports = c;\n\t}, function (module, exports, __webpack_require__) {\n\t\tvar Constant = __webpack_require__(2),\n\t\t    Util = __webpack_require__(3),\n\t\t    Parser = __webpack_require__(4),\n\t\t    Random = __webpack_require__(5),\n\t\t    RE = __webpack_require__(20),\n\t\t    Handler = { extend: Util.extend };Handler.gen = function (t, e, n) {\n\t\t\te = void 0 == e ? \"\" : e + \"\", n = n || {}, n = { path: n.path || [Constant.GUID], templatePath: n.templatePath || [Constant.GUID++], currentContext: n.currentContext, templateCurrentContext: n.templateCurrentContext || t, root: n.root || n.currentContext, templateRoot: n.templateRoot || n.templateCurrentContext || t };var r,\n\t\t\t    a = Parser.parse(e),\n\t\t\t    o = Util.type(t);return Handler[o] ? (r = Handler[o]({ type: o, template: t, name: e, parsedName: e ? e.replace(Constant.RE_KEY, \"$1\") : e, rule: a, context: n }), n.root || (n.root = r), r) : t;\n\t\t}, Handler.extend({ array: function array(t) {\n\t\t\t\tvar e,\n\t\t\t\t    n,\n\t\t\t\t    r = [];if (0 === t.template.length) return r;if (t.rule.parameters) {\n\t\t\t\t\tif (1 === t.rule.min && void 0 === t.rule.max) t.context.path.push(t.name), t.context.templatePath.push(t.name), r = Random.pick(Handler.gen(t.template, void 0, { path: t.context.path, templatePath: t.context.templatePath, currentContext: r, templateCurrentContext: t.template, root: t.context.root || r, templateRoot: t.context.templateRoot || t.template })), t.context.path.pop(), t.context.templatePath.pop();else if (t.rule.parameters[2]) t.template.__order_index = t.template.__order_index || 0, t.context.path.push(t.name), t.context.templatePath.push(t.name), r = Handler.gen(t.template, void 0, { path: t.context.path, templatePath: t.context.templatePath, currentContext: r, templateCurrentContext: t.template, root: t.context.root || r, templateRoot: t.context.templateRoot || t.template })[t.template.__order_index % t.template.length], t.template.__order_index += +t.rule.parameters[2], t.context.path.pop(), t.context.templatePath.pop();else for (e = 0; e < t.rule.count; e++) {\n\t\t\t\t\t\tfor (n = 0; n < t.template.length; n++) {\n\t\t\t\t\t\t\tt.context.path.push(r.length), t.context.templatePath.push(n), r.push(Handler.gen(t.template[n], r.length, { path: t.context.path, templatePath: t.context.templatePath, currentContext: r, templateCurrentContext: t.template, root: t.context.root || r, templateRoot: t.context.templateRoot || t.template })), t.context.path.pop(), t.context.templatePath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else for (e = 0; e < t.template.length; e++) {\n\t\t\t\t\tt.context.path.push(e), t.context.templatePath.push(e), r.push(Handler.gen(t.template[e], e, { path: t.context.path, templatePath: t.context.templatePath, currentContext: r, templateCurrentContext: t.template, root: t.context.root || r, templateRoot: t.context.templateRoot || t.template })), t.context.path.pop(), t.context.templatePath.pop();\n\t\t\t\t}return r;\n\t\t\t}, object: function object(t) {\n\t\t\t\tvar e,\n\t\t\t\t    n,\n\t\t\t\t    r,\n\t\t\t\t    a,\n\t\t\t\t    o,\n\t\t\t\t    u,\n\t\t\t\t    i = {};if (void 0 != t.rule.min) for (e = Util.keys(t.template), e = Random.shuffle(e), e = e.slice(0, t.rule.count), u = 0; u < e.length; u++) {\n\t\t\t\t\tr = e[u], a = r.replace(Constant.RE_KEY, \"$1\"), t.context.path.push(a), t.context.templatePath.push(r), i[a] = Handler.gen(t.template[r], r, { path: t.context.path, templatePath: t.context.templatePath, currentContext: i, templateCurrentContext: t.template, root: t.context.root || i, templateRoot: t.context.templateRoot || t.template }), t.context.path.pop(), t.context.templatePath.pop();\n\t\t\t\t} else {\n\t\t\t\t\te = [], n = [];for (r in t.template) {\n\t\t\t\t\t\t(\"function\" == typeof t.template[r] ? n : e).push(r);\n\t\t\t\t\t}for (e = e.concat(n), u = 0; u < e.length; u++) {\n\t\t\t\t\t\tr = e[u], a = r.replace(Constant.RE_KEY, \"$1\"), t.context.path.push(a), t.context.templatePath.push(r), i[a] = Handler.gen(t.template[r], r, { path: t.context.path, templatePath: t.context.templatePath, currentContext: i, templateCurrentContext: t.template, root: t.context.root || i, templateRoot: t.context.templateRoot || t.template }), t.context.path.pop(), t.context.templatePath.pop(), o = r.match(Constant.RE_KEY), o && o[2] && \"number\" === Util.type(t.template[r]) && (t.template[r] += parseInt(o[2], 10));\n\t\t\t\t\t}\n\t\t\t\t}return i;\n\t\t\t}, number: function number(t) {\n\t\t\t\tvar e, n;if (t.rule.decimal) {\n\t\t\t\t\tfor (t.template += \"\", n = t.template.split(\".\"), n[0] = t.rule.range ? t.rule.count : n[0], n[1] = (n[1] || \"\").slice(0, t.rule.dcount); n[1].length < t.rule.dcount;) {\n\t\t\t\t\t\tn[1] += n[1].length < t.rule.dcount - 1 ? Random.character(\"number\") : Random.character(\"123456789\");\n\t\t\t\t\t}e = parseFloat(n.join(\".\"), 10);\n\t\t\t\t} else e = t.rule.range && !t.rule.parameters[2] ? t.rule.count : t.template;return e;\n\t\t\t}, \"boolean\": function boolean(t) {\n\t\t\t\tvar e;return e = t.rule.parameters ? Random.bool(t.rule.min, t.rule.max, t.template) : t.template;\n\t\t\t}, string: function string(t) {\n\t\t\t\tvar e,\n\t\t\t\t    n,\n\t\t\t\t    r,\n\t\t\t\t    a,\n\t\t\t\t    o = \"\";if (t.template.length) {\n\t\t\t\t\tfor (void 0 == t.rule.count && (o += t.template), e = 0; e < t.rule.count; e++) {\n\t\t\t\t\t\to += t.template;\n\t\t\t\t\t}for (n = o.match(Constant.RE_PLACEHOLDER) || [], e = 0; e < n.length; e++) {\n\t\t\t\t\t\tif (r = n[e], /^\\\\/.test(r)) n.splice(e--, 1);else {\n\t\t\t\t\t\t\tif (a = Handler.placeholder(r, t.context.currentContext, t.context.templateCurrentContext, t), 1 === n.length && r === o && (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) != (typeof o === \"undefined\" ? \"undefined\" : _typeof(o))) {\n\t\t\t\t\t\t\t\to = a;break;\n\t\t\t\t\t\t\t}o = o.replace(r, a);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else o = t.rule.range ? Random.string(t.rule.count) : t.template;return o;\n\t\t\t}, \"function\": function _function(t) {\n\t\t\t\treturn t.template.call(t.context.currentContext, t);\n\t\t\t}, regexp: function regexp(t) {\n\t\t\t\tvar e = \"\";void 0 == t.rule.count && (e += t.template.source);for (var n = 0; n < t.rule.count; n++) {\n\t\t\t\t\te += t.template.source;\n\t\t\t\t}return RE.Handler.gen(RE.Parser.parse(e));\n\t\t\t} }), Handler.extend({ _all: function _all() {\n\t\t\t\tvar t = {};for (var e in Random) {\n\t\t\t\t\tt[e.toLowerCase()] = e;\n\t\t\t\t}return t;\n\t\t\t}, placeholder: function placeholder(_placeholder, obj, templateContext, options) {\n\t\t\t\tConstant.RE_PLACEHOLDER.exec(\"\");var parts = Constant.RE_PLACEHOLDER.exec(_placeholder),\n\t\t\t\t    key = parts && parts[1],\n\t\t\t\t    lkey = key && key.toLowerCase(),\n\t\t\t\t    okey = this._all()[lkey],\n\t\t\t\t    params = parts && parts[2] || \"\",\n\t\t\t\t    pathParts = this.splitPathToArray(key);try {\n\t\t\t\t\tparams = eval(\"(function(){ return [].splice.call(arguments, 0 ) })(\" + params + \")\");\n\t\t\t\t} catch (error) {\n\t\t\t\t\tparams = parts[2].split(/,\\s*/);\n\t\t\t\t}if (obj && key in obj) return obj[key];if (\"/\" === key.charAt(0) || pathParts.length > 1) return this.getValueByKeyPath(key, options);if (templateContext && \"object\" == (typeof templateContext === \"undefined\" ? \"undefined\" : _typeof(templateContext)) && key in templateContext && _placeholder !== templateContext[key]) return templateContext[key] = Handler.gen(templateContext[key], key, { currentContext: obj, templateCurrentContext: templateContext }), templateContext[key];if (!(key in Random || lkey in Random || okey in Random)) return _placeholder;for (var i = 0; i < params.length; i++) {\n\t\t\t\t\tConstant.RE_PLACEHOLDER.exec(\"\"), Constant.RE_PLACEHOLDER.test(params[i]) && (params[i] = Handler.placeholder(params[i], obj, templateContext, options));\n\t\t\t\t}var handle = Random[key] || Random[lkey] || Random[okey];switch (Util.type(handle)) {case \"array\":\n\t\t\t\t\t\treturn Random.pick(handle);case \"function\":\n\t\t\t\t\t\thandle.options = options;var re = handle.apply(Random, params);return void 0 === re && (re = \"\"), delete handle.options, re;}\n\t\t\t}, getValueByKeyPath: function getValueByKeyPath(t, e) {\n\t\t\t\tvar n = t,\n\t\t\t\t    r = this.splitPathToArray(t),\n\t\t\t\t    a = [];\"/\" === t.charAt(0) ? a = [e.context.path[0]].concat(this.normalizePath(r)) : r.length > 1 && (a = e.context.path.slice(0), a.pop(), a = this.normalizePath(a.concat(r))), t = r[r.length - 1];for (var o = e.context.root, u = e.context.templateRoot, i = 1; i < a.length - 1; i++) {\n\t\t\t\t\to = o[a[i]], u = u[a[i]];\n\t\t\t\t}return o && t in o ? o[t] : u && \"object\" == (typeof u === \"undefined\" ? \"undefined\" : _typeof(u)) && t in u && n !== u[t] ? (u[t] = Handler.gen(u[t], t, { currentContext: o, templateCurrentContext: u }), u[t]) : void 0;\n\t\t\t}, normalizePath: function normalizePath(t) {\n\t\t\t\tfor (var e = [], n = 0; n < t.length; n++) {\n\t\t\t\t\tswitch (t[n]) {case \"..\":\n\t\t\t\t\t\t\te.pop();break;case \".\":\n\t\t\t\t\t\t\tbreak;default:\n\t\t\t\t\t\t\te.push(t[n]);}\n\t\t\t\t}return e;\n\t\t\t}, splitPathToArray: function splitPathToArray(t) {\n\t\t\t\tvar e = t.split(/\\/+/);return e[e.length - 1] || (e = e.slice(0, -1)), e[0] || (e = e.slice(1)), e;\n\t\t\t} }), module.exports = Handler;\n\t}, function (t, e) {\n\t\tt.exports = { GUID: 1, RE_KEY: /(.+)\\|(?:\\+(\\d+)|([\\+\\-]?\\d+-?[\\+\\-]?\\d*)?(?:\\.(\\d+-?\\d*))?)/, RE_RANGE: /([\\+\\-]?\\d+)-?([\\+\\-]?\\d+)?/, RE_PLACEHOLDER: /\\\\*@([^@#%&()\\?\\s]+)(?:\\((.*?)\\))?/g };\n\t}, function (t, e) {\n\t\tvar n = {};n.extend = function () {\n\t\t\tvar t,\n\t\t\t    e,\n\t\t\t    r,\n\t\t\t    a,\n\t\t\t    o,\n\t\t\t    u = arguments[0] || {},\n\t\t\t    i = 1,\n\t\t\t    l = arguments.length;for (1 === l && (u = this, i = 0); l > i; i++) {\n\t\t\t\tif (t = arguments[i]) for (e in t) {\n\t\t\t\t\tr = u[e], a = t[e], u !== a && void 0 !== a && (n.isArray(a) || n.isObject(a) ? (n.isArray(a) && (o = r && n.isArray(r) ? r : []), n.isObject(a) && (o = r && n.isObject(r) ? r : {}), u[e] = n.extend(o, a)) : u[e] = a);\n\t\t\t\t}\n\t\t\t}return u;\n\t\t}, n.each = function (t, e, n) {\n\t\t\tvar r, a;if (\"number\" === this.type(t)) for (r = 0; t > r; r++) {\n\t\t\t\te(r, r);\n\t\t\t} else if (t.length === +t.length) for (r = 0; r < t.length && e.call(n, t[r], r, t) !== !1; r++) {} else for (a in t) {\n\t\t\t\tif (e.call(n, t[a], a, t) === !1) break;\n\t\t\t}\n\t\t}, n.type = function (t) {\n\t\t\treturn null === t || void 0 === t ? String(t) : Object.prototype.toString.call(t).match(/\\[object (\\w+)\\]/)[1].toLowerCase();\n\t\t}, n.each(\"String Object Array RegExp Function\".split(\" \"), function (t) {\n\t\t\tn[\"is\" + t] = function (e) {\n\t\t\t\treturn n.type(e) === t.toLowerCase();\n\t\t\t};\n\t\t}), n.isObjectOrArray = function (t) {\n\t\t\treturn n.isObject(t) || n.isArray(t);\n\t\t}, n.isNumeric = function (t) {\n\t\t\treturn !isNaN(parseFloat(t)) && isFinite(t);\n\t\t}, n.keys = function (t) {\n\t\t\tvar e = [];for (var n in t) {\n\t\t\t\tt.hasOwnProperty(n) && e.push(n);\n\t\t\t}return e;\n\t\t}, n.values = function (t) {\n\t\t\tvar e = [];for (var n in t) {\n\t\t\t\tt.hasOwnProperty(n) && e.push(t[n]);\n\t\t\t}return e;\n\t\t}, n.heredoc = function (t) {\n\t\t\treturn t.toString().replace(/^[^\\/]+\\/\\*!?/, \"\").replace(/\\*\\/[^\\/]+$/, \"\").replace(/^[\\s\\xA0]+/, \"\").replace(/[\\s\\xA0]+$/, \"\");\n\t\t}, n.noop = function () {}, t.exports = n;\n\t}, function (t, e, n) {\n\t\tvar r = n(2),\n\t\t    a = n(5);t.exports = { parse: function parse(t) {\n\t\t\t\tt = void 0 == t ? \"\" : t + \"\";var e = (t || \"\").match(r.RE_KEY),\n\t\t\t\t    n = e && e[3] && e[3].match(r.RE_RANGE),\n\t\t\t\t    o = n && n[1] && parseInt(n[1], 10),\n\t\t\t\t    u = n && n[2] && parseInt(n[2], 10),\n\t\t\t\t    i = n ? n[2] ? a.integer(o, u) : parseInt(n[1], 10) : void 0,\n\t\t\t\t    l = e && e[4] && e[4].match(r.RE_RANGE),\n\t\t\t\t    s = l && l[1] && parseInt(l[1], 10),\n\t\t\t\t    c = l && l[2] && parseInt(l[2], 10),\n\t\t\t\t    h = l ? !l[2] && parseInt(l[1], 10) || a.integer(s, c) : void 0,\n\t\t\t\t    p = { parameters: e, range: n, min: o, max: u, count: i, decimal: l, dmin: s, dmax: c, dcount: h };for (var f in p) {\n\t\t\t\t\tif (void 0 != p[f]) return p;\n\t\t\t\t}return {};\n\t\t\t} };\n\t}, function (t, e, n) {\n\t\tvar r = n(3),\n\t\t    a = { extend: r.extend };a.extend(n(6)), a.extend(n(7)), a.extend(n(8)), a.extend(n(10)), a.extend(n(13)), a.extend(n(15)), a.extend(n(16)), a.extend(n(17)), a.extend(n(14)), a.extend(n(19)), t.exports = a;\n\t}, function (t, e) {\n\t\tt.exports = { \"boolean\": function boolean(t, e, n) {\n\t\t\t\treturn void 0 !== n ? (t = \"undefined\" == typeof t || isNaN(t) ? 1 : parseInt(t, 10), e = \"undefined\" == typeof e || isNaN(e) ? 1 : parseInt(e, 10), Math.random() > 1 / (t + e) * t ? !n : n) : Math.random() >= .5;\n\t\t\t}, bool: function bool(t, e, n) {\n\t\t\t\treturn this[\"boolean\"](t, e, n);\n\t\t\t}, natural: function natural(t, e) {\n\t\t\t\treturn t = \"undefined\" != typeof t ? parseInt(t, 10) : 0, e = \"undefined\" != typeof e ? parseInt(e, 10) : 9007199254740992, Math.round(Math.random() * (e - t)) + t;\n\t\t\t}, integer: function integer(t, e) {\n\t\t\t\treturn t = \"undefined\" != typeof t ? parseInt(t, 10) : -9007199254740992, e = \"undefined\" != typeof e ? parseInt(e, 10) : 9007199254740992, Math.round(Math.random() * (e - t)) + t;\n\t\t\t}, \"int\": function int(t, e) {\n\t\t\t\treturn this.integer(t, e);\n\t\t\t}, \"float\": function float(t, e, n, r) {\n\t\t\t\tn = void 0 === n ? 0 : n, n = Math.max(Math.min(n, 17), 0), r = void 0 === r ? 17 : r, r = Math.max(Math.min(r, 17), 0);for (var a = this.integer(t, e) + \".\", o = 0, u = this.natural(n, r); u > o; o++) {\n\t\t\t\t\ta += u - 1 > o ? this.character(\"number\") : this.character(\"123456789\");\n\t\t\t\t}return parseFloat(a, 10);\n\t\t\t}, character: function character(t) {\n\t\t\t\tvar e = { lower: \"abcdefghijklmnopqrstuvwxyz\", upper: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", number: \"0123456789\", symbol: \"!@#$%^&*()[]\" };return e.alpha = e.lower + e.upper, e.undefined = e.lower + e.upper + e.number + e.symbol, t = e[(\"\" + t).toLowerCase()] || t, t.charAt(this.natural(0, t.length - 1));\n\t\t\t}, \"char\": function char(t) {\n\t\t\t\treturn this.character(t);\n\t\t\t}, string: function string(t, e, n) {\n\t\t\t\tvar r;switch (arguments.length) {case 0:\n\t\t\t\t\t\tr = this.natural(3, 7);break;case 1:\n\t\t\t\t\t\tr = t, t = void 0;break;case 2:\n\t\t\t\t\t\t\"string\" == typeof arguments[0] ? r = e : (r = this.natural(t, e), t = void 0);break;case 3:\n\t\t\t\t\t\tr = this.natural(e, n);}for (var a = \"\", o = 0; r > o; o++) {\n\t\t\t\t\ta += this.character(t);\n\t\t\t\t}return a;\n\t\t\t}, str: function str() {\n\t\t\t\treturn this.string.apply(this, arguments);\n\t\t\t}, range: function range(t, e, n) {\n\t\t\t\targuments.length <= 1 && (e = t || 0, t = 0), n = arguments[2] || 1, t = +t, e = +e, n = +n;for (var r = Math.max(Math.ceil((e - t) / n), 0), a = 0, o = new Array(r); r > a;) {\n\t\t\t\t\to[a++] = t, t += n;\n\t\t\t\t}return o;\n\t\t\t} };\n\t}, function (t, e) {\n\t\tvar n = { yyyy: \"getFullYear\", yy: function yy(t) {\n\t\t\t\treturn (\"\" + t.getFullYear()).slice(2);\n\t\t\t}, y: \"yy\", MM: function MM(t) {\n\t\t\t\tvar e = t.getMonth() + 1;return 10 > e ? \"0\" + e : e;\n\t\t\t}, M: function M(t) {\n\t\t\t\treturn t.getMonth() + 1;\n\t\t\t}, dd: function dd(t) {\n\t\t\t\tvar e = t.getDate();return 10 > e ? \"0\" + e : e;\n\t\t\t}, d: \"getDate\", HH: function HH(t) {\n\t\t\t\tvar e = t.getHours();return 10 > e ? \"0\" + e : e;\n\t\t\t}, H: \"getHours\", hh: function hh(t) {\n\t\t\t\tvar e = t.getHours() % 12;return 10 > e ? \"0\" + e : e;\n\t\t\t}, h: function h(t) {\n\t\t\t\treturn t.getHours() % 12;\n\t\t\t}, mm: function mm(t) {\n\t\t\t\tvar e = t.getMinutes();return 10 > e ? \"0\" + e : e;\n\t\t\t}, m: \"getMinutes\", ss: function ss(t) {\n\t\t\t\tvar e = t.getSeconds();return 10 > e ? \"0\" + e : e;\n\t\t\t}, s: \"getSeconds\", SS: function SS(t) {\n\t\t\t\tvar e = t.getMilliseconds();return 10 > e && \"00\" + e || 100 > e && \"0\" + e || e;\n\t\t\t}, S: \"getMilliseconds\", A: function A(t) {\n\t\t\t\treturn t.getHours() < 12 ? \"AM\" : \"PM\";\n\t\t\t}, a: function a(t) {\n\t\t\t\treturn t.getHours() < 12 ? \"am\" : \"pm\";\n\t\t\t}, T: \"getTime\" };t.exports = { _patternLetters: n, _rformat: new RegExp(function () {\n\t\t\t\tvar t = [];for (var e in n) {\n\t\t\t\t\tt.push(e);\n\t\t\t\t}return \"(\" + t.join(\"|\") + \")\";\n\t\t\t}(), \"g\"), _formatDate: function _formatDate(t, e) {\n\t\t\t\treturn e.replace(this._rformat, function r(e, a) {\n\t\t\t\t\treturn \"function\" == typeof n[a] ? n[a](t) : n[a] in n ? r(e, n[a]) : t[n[a]]();\n\t\t\t\t});\n\t\t\t}, _randomDate: function _randomDate(t, e) {\n\t\t\t\treturn t = void 0 === t ? new Date(0) : t, e = void 0 === e ? new Date() : e, new Date(Math.random() * (e.getTime() - t.getTime()));\n\t\t\t}, date: function date(t) {\n\t\t\t\treturn t = t || \"yyyy-MM-dd\", this._formatDate(this._randomDate(), t);\n\t\t\t}, time: function time(t) {\n\t\t\t\treturn t = t || \"HH:mm:ss\", this._formatDate(this._randomDate(), t);\n\t\t\t}, datetime: function datetime(t) {\n\t\t\t\treturn t = t || \"yyyy-MM-dd HH:mm:ss\", this._formatDate(this._randomDate(), t);\n\t\t\t}, now: function now(t, e) {\n\t\t\t\t1 === arguments.length && (/year|month|day|hour|minute|second|week/.test(t) || (e = t, t = \"\")), t = (t || \"\").toLowerCase(), e = e || \"yyyy-MM-dd HH:mm:ss\";var n = new Date();switch (t) {case \"year\":\n\t\t\t\t\t\tn.setMonth(0);case \"month\":\n\t\t\t\t\t\tn.setDate(1);case \"week\":case \"day\":\n\t\t\t\t\t\tn.setHours(0);case \"hour\":\n\t\t\t\t\t\tn.setMinutes(0);case \"minute\":\n\t\t\t\t\t\tn.setSeconds(0);case \"second\":\n\t\t\t\t\t\tn.setMilliseconds(0);}switch (t) {case \"week\":\n\t\t\t\t\t\tn.setDate(n.getDate() - n.getDay());}return this._formatDate(n, e);\n\t\t\t} };\n\t}, function (t, e, n) {\n\t\t(function (t) {\n\t\t\tt.exports = { _adSize: [\"300x250\", \"250x250\", \"240x400\", \"336x280\", \"180x150\", \"720x300\", \"468x60\", \"234x60\", \"88x31\", \"120x90\", \"120x60\", \"120x240\", \"125x125\", \"728x90\", \"160x600\", \"120x600\", \"300x600\"], _screenSize: [\"320x200\", \"320x240\", \"640x480\", \"800x480\", \"800x480\", \"1024x600\", \"1024x768\", \"1280x800\", \"1440x900\", \"1920x1200\", \"2560x1600\"], _videoSize: [\"720x480\", \"768x576\", \"1280x720\", \"1920x1080\"], image: function image(t, e, n, r, a) {\n\t\t\t\t\treturn 4 === arguments.length && (a = r, r = void 0), 3 === arguments.length && (a = n, n = void 0), t || (t = this.pick(this._adSize)), e && ~e.indexOf(\"#\") && (e = e.slice(1)), n && ~n.indexOf(\"#\") && (n = n.slice(1)), \"http://dummyimage.com/\" + t + (e ? \"/\" + e : \"\") + (n ? \"/\" + n : \"\") + (r ? \".\" + r : \"\") + (a ? \"&text=\" + a : \"\");\n\t\t\t\t}, img: function img() {\n\t\t\t\t\treturn this.image.apply(this, arguments);\n\t\t\t\t}, _brandColors: { \"4ormat\": \"#fb0a2a\", \"500px\": \"#02adea\", \"About.me (blue)\": \"#00405d\", \"About.me (yellow)\": \"#ffcc33\", Addvocate: \"#ff6138\", Adobe: \"#ff0000\", Aim: \"#fcd20b\", Amazon: \"#e47911\", Android: \"#a4c639\", \"Angie's List\": \"#7fbb00\", AOL: \"#0060a3\", Atlassian: \"#003366\", Behance: \"#053eff\", \"Big Cartel\": \"#97b538\", bitly: \"#ee6123\", Blogger: \"#fc4f08\", Boeing: \"#0039a6\", \"Booking.com\": \"#003580\", Carbonmade: \"#613854\", Cheddar: \"#ff7243\", \"Code School\": \"#3d4944\", Delicious: \"#205cc0\", Dell: \"#3287c1\", Designmoo: \"#e54a4f\", Deviantart: \"#4e6252\", \"Designer News\": \"#2d72da\", Devour: \"#fd0001\", DEWALT: \"#febd17\", \"Disqus (blue)\": \"#59a3fc\", \"Disqus (orange)\": \"#db7132\", Dribbble: \"#ea4c89\", Dropbox: \"#3d9ae8\", Drupal: \"#0c76ab\", Dunked: \"#2a323a\", eBay: \"#89c507\", Ember: \"#f05e1b\", Engadget: \"#00bdf6\", Envato: \"#528036\", Etsy: \"#eb6d20\", Evernote: \"#5ba525\", \"Fab.com\": \"#dd0017\", Facebook: \"#3b5998\", Firefox: \"#e66000\", \"Flickr (blue)\": \"#0063dc\", \"Flickr (pink)\": \"#ff0084\", Forrst: \"#5b9a68\", Foursquare: \"#25a0ca\", Garmin: \"#007cc3\", GetGlue: \"#2d75a2\", Gimmebar: \"#f70078\", GitHub: \"#171515\", \"Google Blue\": \"#0140ca\", \"Google Green\": \"#16a61e\", \"Google Red\": \"#dd1812\", \"Google Yellow\": \"#fcca03\", \"Google+\": \"#dd4b39\", Grooveshark: \"#f77f00\", Groupon: \"#82b548\", \"Hacker News\": \"#ff6600\", HelloWallet: \"#0085ca\", \"Heroku (light)\": \"#c7c5e6\", \"Heroku (dark)\": \"#6567a5\", HootSuite: \"#003366\", Houzz: \"#73ba37\", HTML5: \"#ec6231\", IKEA: \"#ffcc33\", IMDb: \"#f3ce13\", Instagram: \"#3f729b\", Intel: \"#0071c5\", Intuit: \"#365ebf\", Kickstarter: \"#76cc1e\", kippt: \"#e03500\", Kodery: \"#00af81\", LastFM: \"#c3000d\", LinkedIn: \"#0e76a8\", Livestream: \"#cf0005\", Lumo: \"#576396\", Mixpanel: \"#a086d3\", Meetup: \"#e51937\", Nokia: \"#183693\", NVIDIA: \"#76b900\", Opera: \"#cc0f16\", Path: \"#e41f11\", \"PayPal (dark)\": \"#1e477a\", \"PayPal (light)\": \"#3b7bbf\", Pinboard: \"#0000e6\", Pinterest: \"#c8232c\", PlayStation: \"#665cbe\", Pocket: \"#ee4056\", Prezi: \"#318bff\", Pusha: \"#0f71b4\", Quora: \"#a82400\", \"QUOTE.fm\": \"#66ceff\", Rdio: \"#008fd5\", Readability: \"#9c0000\", \"Red Hat\": \"#cc0000\", Resource: \"#7eb400\", Rockpack: \"#0ba6ab\", Roon: \"#62b0d9\", RSS: \"#ee802f\", Salesforce: \"#1798c1\", Samsung: \"#0c4da2\", Shopify: \"#96bf48\", Skype: \"#00aff0\", Snagajob: \"#f47a20\", Softonic: \"#008ace\", SoundCloud: \"#ff7700\", \"Space Box\": \"#f86960\", Spotify: \"#81b71a\", Sprint: \"#fee100\", Squarespace: \"#121212\", StackOverflow: \"#ef8236\", Staples: \"#cc0000\", \"Status Chart\": \"#d7584f\", Stripe: \"#008cdd\", StudyBlue: \"#00afe1\", StumbleUpon: \"#f74425\", \"T-Mobile\": \"#ea0a8e\", Technorati: \"#40a800\", \"The Next Web\": \"#ef4423\", Treehouse: \"#5cb868\", Trulia: \"#5eab1f\", Tumblr: \"#34526f\", \"Twitch.tv\": \"#6441a5\", Twitter: \"#00acee\", TYPO3: \"#ff8700\", Ubuntu: \"#dd4814\", Ustream: \"#3388ff\", Verizon: \"#ef1d1d\", Vimeo: \"#86c9ef\", Vine: \"#00a478\", Virb: \"#06afd8\", \"Virgin Media\": \"#cc0000\", Wooga: \"#5b009c\", \"WordPress (blue)\": \"#21759b\", \"WordPress (orange)\": \"#d54e21\", \"WordPress (grey)\": \"#464646\", Wunderlist: \"#2b88d9\", XBOX: \"#9bc848\", XING: \"#126567\", \"Yahoo!\": \"#720e9e\", Yandex: \"#ffcc00\", Yelp: \"#c41200\", YouTube: \"#c4302b\", Zalongo: \"#5498dc\", Zendesk: \"#78a300\", Zerply: \"#9dcc7a\", Zootool: \"#5e8b1d\" }, _brandNames: function _brandNames() {\n\t\t\t\t\tvar t = [];for (var e in this._brandColors) {\n\t\t\t\t\t\tt.push(e);\n\t\t\t\t\t}return t;\n\t\t\t\t}, dataImage: function dataImage(e, n) {\n\t\t\t\t\tvar r;if (\"undefined\" != typeof document) r = document.createElement(\"canvas\");else {\n\t\t\t\t\t\tvar a = t.require(\"canvas\");r = new a();\n\t\t\t\t\t}var o = r && r.getContext && r.getContext(\"2d\");if (!r || !o) return \"\";e || (e = this.pick(this._adSize)), n = void 0 !== n ? n : e, e = e.split(\"x\");var u = parseInt(e[0], 10),\n\t\t\t\t\t    i = parseInt(e[1], 10),\n\t\t\t\t\t    l = this._brandColors[this.pick(this._brandNames())],\n\t\t\t\t\t    s = \"#FFF\",\n\t\t\t\t\t    c = 14,\n\t\t\t\t\t    h = \"sans-serif\";return r.width = u, r.height = i, o.textAlign = \"center\", o.textBaseline = \"middle\", o.fillStyle = l, o.fillRect(0, 0, u, i), o.fillStyle = s, o.font = \"bold \" + c + \"px \" + h, o.fillText(n, u / 2, i / 2, u), r.toDataURL(\"image/png\");\n\t\t\t\t} };\n\t\t}).call(e, n(9)(t));\n\t}, function (t, e) {\n\t\tt.exports = function (t) {\n\t\t\treturn t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children = [], t.webpackPolyfill = 1), t;\n\t\t};\n\t}, function (t, e, n) {\n\t\tvar r = n(11),\n\t\t    a = n(12);t.exports = { color: function color(t) {\n\t\t\t\treturn t || a[t] ? a[t].nicer : this.hex();\n\t\t\t}, hex: function hex() {\n\t\t\t\tvar t = this._goldenRatioColor(),\n\t\t\t\t    e = r.hsv2rgb(t),\n\t\t\t\t    n = r.rgb2hex(e[0], e[1], e[2]);return n;\n\t\t\t}, rgb: function rgb() {\n\t\t\t\tvar t = this._goldenRatioColor(),\n\t\t\t\t    e = r.hsv2rgb(t);return \"rgb(\" + parseInt(e[0], 10) + \", \" + parseInt(e[1], 10) + \", \" + parseInt(e[2], 10) + \")\";\n\t\t\t}, rgba: function rgba() {\n\t\t\t\tvar t = this._goldenRatioColor(),\n\t\t\t\t    e = r.hsv2rgb(t);return \"rgba(\" + parseInt(e[0], 10) + \", \" + parseInt(e[1], 10) + \", \" + parseInt(e[2], 10) + \", \" + Math.random().toFixed(2) + \")\";\n\t\t\t}, hsl: function hsl() {\n\t\t\t\tvar t = this._goldenRatioColor(),\n\t\t\t\t    e = r.hsv2hsl(t);return \"hsl(\" + parseInt(e[0], 10) + \", \" + parseInt(e[1], 10) + \", \" + parseInt(e[2], 10) + \")\";\n\t\t\t}, _goldenRatioColor: function _goldenRatioColor(t, e) {\n\t\t\t\treturn this._goldenRatio = .618033988749895, this._hue = this._hue || Math.random(), this._hue += this._goldenRatio, this._hue %= 1, \"number\" != typeof t && (t = .5), \"number\" != typeof e && (e = .95), [360 * this._hue, 100 * t, 100 * e];\n\t\t\t} };\n\t}, function (t, e) {\n\t\tt.exports = { rgb2hsl: function rgb2hsl(t) {\n\t\t\t\tvar e,\n\t\t\t\t    n,\n\t\t\t\t    r,\n\t\t\t\t    a = t[0] / 255,\n\t\t\t\t    o = t[1] / 255,\n\t\t\t\t    u = t[2] / 255,\n\t\t\t\t    i = Math.min(a, o, u),\n\t\t\t\t    l = Math.max(a, o, u),\n\t\t\t\t    s = l - i;return l == i ? e = 0 : a == l ? e = (o - u) / s : o == l ? e = 2 + (u - a) / s : u == l && (e = 4 + (a - o) / s), e = Math.min(60 * e, 360), 0 > e && (e += 360), r = (i + l) / 2, n = l == i ? 0 : .5 >= r ? s / (l + i) : s / (2 - l - i), [e, 100 * n, 100 * r];\n\t\t\t}, rgb2hsv: function rgb2hsv(t) {\n\t\t\t\tvar e,\n\t\t\t\t    n,\n\t\t\t\t    r,\n\t\t\t\t    a = t[0],\n\t\t\t\t    o = t[1],\n\t\t\t\t    u = t[2],\n\t\t\t\t    i = Math.min(a, o, u),\n\t\t\t\t    l = Math.max(a, o, u),\n\t\t\t\t    s = l - i;return n = 0 === l ? 0 : s / l * 1e3 / 10, l == i ? e = 0 : a == l ? e = (o - u) / s : o == l ? e = 2 + (u - a) / s : u == l && (e = 4 + (a - o) / s), e = Math.min(60 * e, 360), 0 > e && (e += 360), r = l / 255 * 1e3 / 10, [e, n, r];\n\t\t\t}, hsl2rgb: function hsl2rgb(t) {\n\t\t\t\tvar e,\n\t\t\t\t    n,\n\t\t\t\t    r,\n\t\t\t\t    a,\n\t\t\t\t    o,\n\t\t\t\t    u = t[0] / 360,\n\t\t\t\t    i = t[1] / 100,\n\t\t\t\t    l = t[2] / 100;if (0 === i) return o = 255 * l, [o, o, o];n = .5 > l ? l * (1 + i) : l + i - l * i, e = 2 * l - n, a = [0, 0, 0];for (var s = 0; 3 > s; s++) {\n\t\t\t\t\tr = u + 1 / 3 * -(s - 1), 0 > r && r++, r > 1 && r--, o = 1 > 6 * r ? e + 6 * (n - e) * r : 1 > 2 * r ? n : 2 > 3 * r ? e + (n - e) * (2 / 3 - r) * 6 : e, a[s] = 255 * o;\n\t\t\t\t}return a;\n\t\t\t}, hsl2hsv: function hsl2hsv(t) {\n\t\t\t\tvar e,\n\t\t\t\t    n,\n\t\t\t\t    r = t[0],\n\t\t\t\t    a = t[1] / 100,\n\t\t\t\t    o = t[2] / 100;return o *= 2, a *= 1 >= o ? o : 2 - o, n = (o + a) / 2, e = 2 * a / (o + a), [r, 100 * e, 100 * n];\n\t\t\t}, hsv2rgb: function hsv2rgb(t) {\n\t\t\t\tvar e = t[0] / 60,\n\t\t\t\t    n = t[1] / 100,\n\t\t\t\t    r = t[2] / 100,\n\t\t\t\t    a = Math.floor(e) % 6,\n\t\t\t\t    o = e - Math.floor(e),\n\t\t\t\t    u = 255 * r * (1 - n),\n\t\t\t\t    i = 255 * r * (1 - n * o),\n\t\t\t\t    l = 255 * r * (1 - n * (1 - o));switch (r = 255 * r, a) {case 0:\n\t\t\t\t\t\treturn [r, l, u];case 1:\n\t\t\t\t\t\treturn [i, r, u];case 2:\n\t\t\t\t\t\treturn [u, r, l];case 3:\n\t\t\t\t\t\treturn [u, i, r];case 4:\n\t\t\t\t\t\treturn [l, u, r];case 5:\n\t\t\t\t\t\treturn [r, u, i];}\n\t\t\t}, hsv2hsl: function hsv2hsl(t) {\n\t\t\t\tvar e,\n\t\t\t\t    n,\n\t\t\t\t    r = t[0],\n\t\t\t\t    a = t[1] / 100,\n\t\t\t\t    o = t[2] / 100;return n = (2 - a) * o, e = a * o, e /= 1 >= n ? n : 2 - n, n /= 2, [r, 100 * e, 100 * n];\n\t\t\t}, rgb2hex: function rgb2hex(t, e, n) {\n\t\t\t\treturn \"#\" + ((256 + t << 8 | e) << 8 | n).toString(16).slice(1);\n\t\t\t}, hex2rgb: function hex2rgb(t) {\n\t\t\t\treturn t = \"0x\" + t.slice(1).replace(t.length > 4 ? t : /./g, \"$&$&\") | 0, [t >> 16, t >> 8 & 255, 255 & t];\n\t\t\t} };\n\t}, function (t, e) {\n\t\tt.exports = { navy: { value: \"#000080\", nicer: \"#001F3F\" }, blue: { value: \"#0000ff\", nicer: \"#0074D9\" }, aqua: { value: \"#00ffff\", nicer: \"#7FDBFF\" }, teal: { value: \"#008080\", nicer: \"#39CCCC\" }, olive: { value: \"#008000\", nicer: \"#3D9970\" }, green: { value: \"#008000\", nicer: \"#2ECC40\" }, lime: { value: \"#00ff00\", nicer: \"#01FF70\" }, yellow: { value: \"#ffff00\", nicer: \"#FFDC00\" }, orange: { value: \"#ffa500\", nicer: \"#FF851B\" }, red: { value: \"#ff0000\", nicer: \"#FF4136\" }, maroon: { value: \"#800000\", nicer: \"#85144B\" }, fuchsia: { value: \"#ff00ff\", nicer: \"#F012BE\" }, purple: { value: \"#800080\", nicer: \"#B10DC9\" }, silver: { value: \"#c0c0c0\", nicer: \"#DDDDDD\" }, gray: { value: \"#808080\", nicer: \"#AAAAAA\" }, black: { value: \"#000000\", nicer: \"#111111\" }, white: { value: \"#FFFFFF\", nicer: \"#FFFFFF\" } };\n\t}, function (t, e, n) {\n\t\tfunction r(t, e, n, r) {\n\t\t\treturn void 0 === n ? a.natural(t, e) : void 0 === r ? n : a.natural(parseInt(n, 10), parseInt(r, 10));\n\t\t}var a = n(6),\n\t\t    o = n(14);t.exports = { paragraph: function paragraph(t, e) {\n\t\t\t\tfor (var n = r(3, 7, t, e), a = [], o = 0; n > o; o++) {\n\t\t\t\t\ta.push(this.sentence());\n\t\t\t\t}return a.join(\" \");\n\t\t\t}, cparagraph: function cparagraph(t, e) {\n\t\t\t\tfor (var n = r(3, 7, t, e), a = [], o = 0; n > o; o++) {\n\t\t\t\t\ta.push(this.csentence());\n\t\t\t\t}return a.join(\"\");\n\t\t\t}, sentence: function sentence(t, e) {\n\t\t\t\tfor (var n = r(12, 18, t, e), a = [], u = 0; n > u; u++) {\n\t\t\t\t\ta.push(this.word());\n\t\t\t\t}return o.capitalize(a.join(\" \")) + \".\";\n\t\t\t}, csentence: function csentence(t, e) {\n\t\t\t\tfor (var n = r(12, 18, t, e), a = [], o = 0; n > o; o++) {\n\t\t\t\t\ta.push(this.cword());\n\t\t\t\t}return a.join(\"\") + \"。\";\n\t\t\t}, word: function word(t, e) {\n\t\t\t\tfor (var n = r(3, 10, t, e), o = \"\", u = 0; n > u; u++) {\n\t\t\t\t\to += a.character(\"lower\");\n\t\t\t\t}return o;\n\t\t\t}, cword: function cword(t, e, n) {\n\t\t\t\tvar r,\n\t\t\t\t    a = \"的一是在不了有和人这中大为上个国我以要他时来用们生到作地于出就分对成会可主发年动同工也能下过子说产种面而方后多定行学法所民得经十三之进着等部度家电力里如水化高自二理起小物现实加量都两体制机当使点从业本去把性好应开它合还因由其些然前外天政四日那社义事平形相全表间样与关各重新线内数正心反你明看原又么利比或但质气第向道命此变条只没结解问意建月公无系军很情者最立代想已通并提直题党程展五果料象员革位入常文总次品式活设及管特件长求老头基资边流路级少图山统接知较将组见计别她手角期根论运农指几九区强放决西被干做必战先回则任取据处队南给色光门即保治北造百规热领七海口东导器压志世金增争济阶油思术极交受联什认六共权收证改清己美再采转更单风切打白教速花带安场身车例真务具万每目至达走积示议声报斗完类八离华名确才科张信马节话米整空元况今集温传土许步群广石记需段研界拉林律叫且究观越织装影算低持音众书布复容儿须际商非验连断深难近矿千周委素技备半办青省列习响约支般史感劳便团往酸历市克何除消构府称太准精值号率族维划选标写存候毛亲快效斯院查江型眼王按格养易置派层片始却专状育厂京识适属圆包火住调满县局照参红细引听该铁价严龙飞\";switch (arguments.length) {case 0:\n\t\t\t\t\t\tt = a, r = 1;break;case 1:\n\t\t\t\t\t\t\"string\" == typeof arguments[0] ? r = 1 : (r = t, t = a);break;case 2:\n\t\t\t\t\t\t\"string\" == typeof arguments[0] ? r = e : (r = this.natural(t, e), t = a);break;case 3:\n\t\t\t\t\t\tr = this.natural(e, n);}for (var o = \"\", u = 0; r > u; u++) {\n\t\t\t\t\to += t.charAt(this.natural(0, t.length - 1));\n\t\t\t\t}return o;\n\t\t\t}, title: function title(t, e) {\n\t\t\t\tfor (var n = r(3, 7, t, e), a = [], o = 0; n > o; o++) {\n\t\t\t\t\ta.push(this.capitalize(this.word()));\n\t\t\t\t}return a.join(\" \");\n\t\t\t}, ctitle: function ctitle(t, e) {\n\t\t\t\tfor (var n = r(3, 7, t, e), a = [], o = 0; n > o; o++) {\n\t\t\t\t\ta.push(this.cword());\n\t\t\t\t}return a.join(\"\");\n\t\t\t} };\n\t}, function (t, e, n) {\n\t\tvar r = n(3);t.exports = { capitalize: function capitalize(t) {\n\t\t\t\treturn (t + \"\").charAt(0).toUpperCase() + (t + \"\").substr(1);\n\t\t\t}, upper: function upper(t) {\n\t\t\t\treturn (t + \"\").toUpperCase();\n\t\t\t}, lower: function lower(t) {\n\t\t\t\treturn (t + \"\").toLowerCase();\n\t\t\t}, pick: function pick(t, e, n) {\n\t\t\t\treturn r.isArray(t) ? (void 0 === e && (e = 1), void 0 === n && (n = e)) : (t = [].slice.call(arguments), e = 1, n = 1), 1 === e && 1 === n ? t[this.natural(0, t.length - 1)] : this.shuffle(t, e, n);\n\t\t\t}, shuffle: function shuffle(t, e, n) {\n\t\t\t\tt = t || [];for (var r = t.slice(0), a = [], o = 0, u = r.length, i = 0; u > i; i++) {\n\t\t\t\t\to = this.natural(0, r.length - 1), a.push(r[o]), r.splice(o, 1);\n\t\t\t\t}switch (arguments.length) {case 0:case 1:\n\t\t\t\t\t\treturn a;case 2:\n\t\t\t\t\t\tn = e;case 3:\n\t\t\t\t\t\treturn e = parseInt(e, 10), n = parseInt(n, 10), a.slice(0, this.natural(e, n));}\n\t\t\t}, order: function a(t) {\n\t\t\t\ta.cache = a.cache || {}, arguments.length > 1 && (t = [].slice.call(arguments, 0));var e = a.options,\n\t\t\t\t    n = e.context.templatePath.join(\".\"),\n\t\t\t\t    r = a.cache[n] = a.cache[n] || { index: 0, array: t };return r.array[r.index++ % r.array.length];\n\t\t\t} };\n\t}, function (t, e) {\n\t\tt.exports = { first: function first() {\n\t\t\t\tvar t = [\"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Charles\", \"Joseph\", \"Thomas\", \"Christopher\", \"Daniel\", \"Paul\", \"Mark\", \"Donald\", \"George\", \"Kenneth\", \"Steven\", \"Edward\", \"Brian\", \"Ronald\", \"Anthony\", \"Kevin\", \"Jason\", \"Matthew\", \"Gary\", \"Timothy\", \"Jose\", \"Larry\", \"Jeffrey\", \"Frank\", \"Scott\", \"Eric\"].concat([\"Mary\", \"Patricia\", \"Linda\", \"Barbara\", \"Elizabeth\", \"Jennifer\", \"Maria\", \"Susan\", \"Margaret\", \"Dorothy\", \"Lisa\", \"Nancy\", \"Karen\", \"Betty\", \"Helen\", \"Sandra\", \"Donna\", \"Carol\", \"Ruth\", \"Sharon\", \"Michelle\", \"Laura\", \"Sarah\", \"Kimberly\", \"Deborah\", \"Jessica\", \"Shirley\", \"Cynthia\", \"Angela\", \"Melissa\", \"Brenda\", \"Amy\", \"Anna\"]);return this.pick(t);\n\t\t\t}, last: function last() {\n\t\t\t\tvar t = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Miller\", \"Davis\", \"Garcia\", \"Rodriguez\", \"Wilson\", \"Martinez\", \"Anderson\", \"Taylor\", \"Thomas\", \"Hernandez\", \"Moore\", \"Martin\", \"Jackson\", \"Thompson\", \"White\", \"Lopez\", \"Lee\", \"Gonzalez\", \"Harris\", \"Clark\", \"Lewis\", \"Robinson\", \"Walker\", \"Perez\", \"Hall\", \"Young\", \"Allen\"];return this.pick(t);\n\t\t\t}, name: function name(t) {\n\t\t\t\treturn this.first() + \" \" + (t ? this.first() + \" \" : \"\") + this.last();\n\t\t\t}, cfirst: function cfirst() {\n\t\t\t\tvar t = \"王 李 张 刘 陈 杨 赵 黄 周 吴 徐 孙 胡 朱 高 林 何 郭 马 罗 梁 宋 郑 谢 韩 唐 冯 于 董 萧 程 曹 袁 邓 许 傅 沈 曾 彭 吕 苏 卢 蒋 蔡 贾 丁 魏 薛 叶 阎 余 潘 杜 戴 夏 锺 汪 田 任 姜 范 方 石 姚 谭 廖 邹 熊 金 陆 郝 孔 白 崔 康 毛 邱 秦 江 史 顾 侯 邵 孟 龙 万 段 雷 钱 汤 尹 黎 易 常 武 乔 贺 赖 龚 文\".split(\" \");return this.pick(t);\n\t\t\t}, clast: function clast() {\n\t\t\t\tvar t = \"伟 芳 娜 秀英 敏 静 丽 强 磊 军 洋 勇 艳 杰 娟 涛 明 超 秀兰 霞 平 刚 桂英\".split(\" \");return this.pick(t);\n\t\t\t}, cname: function cname() {\n\t\t\t\treturn this.cfirst() + this.clast();\n\t\t\t} };\n\t}, function (t, e) {\n\t\tt.exports = { url: function url(t, e) {\n\t\t\t\treturn (t || this.protocol()) + \"://\" + (e || this.domain()) + \"/\" + this.word();\n\t\t\t}, protocol: function protocol() {\n\t\t\t\treturn this.pick(\"http ftp gopher mailto mid cid news nntp prospero telnet rlogin tn3270 wais\".split(\" \"));\n\t\t\t}, domain: function domain(t) {\n\t\t\t\treturn this.word() + \".\" + (t || this.tld());\n\t\t\t}, tld: function tld() {\n\t\t\t\treturn this.pick(\"com net org edu gov int mil cn com.cn net.cn gov.cn org.cn 中国 中国互联.公司 中国互联.网络 tel biz cc tv info name hk mobi asia cd travel pro museum coop aero ad ae af ag ai al am an ao aq ar as at au aw az ba bb bd be bf bg bh bi bj bm bn bo br bs bt bv bw by bz ca cc cf cg ch ci ck cl cm cn co cq cr cu cv cx cy cz de dj dk dm do dz ec ee eg eh es et ev fi fj fk fm fo fr ga gb gd ge gf gh gi gl gm gn gp gr gt gu gw gy hk hm hn hr ht hu id ie il in io iq ir is it jm jo jp ke kg kh ki km kn kp kr kw ky kz la lb lc li lk lr ls lt lu lv ly ma mc md mg mh ml mm mn mo mp mq mr ms mt mv mw mx my mz na nc ne nf ng ni nl no np nr nt nu nz om qa pa pe pf pg ph pk pl pm pn pr pt pw py re ro ru rw sa sb sc sd se sg sh si sj sk sl sm sn so sr st su sy sz tc td tf tg th tj tk tm tn to tp tr tt tv tw tz ua ug uk us uy va vc ve vg vn vu wf ws ye yu za zm zr zw\".split(\" \"));\n\t\t\t}, email: function email(t) {\n\t\t\t\treturn this.character(\"lower\") + \".\" + this.word() + \"@\" + (t || this.word() + \".\" + this.tld());\n\t\t\t}, ip: function ip() {\n\t\t\t\treturn this.natural(0, 255) + \".\" + this.natural(0, 255) + \".\" + this.natural(0, 255) + \".\" + this.natural(0, 255);\n\t\t\t} };\n\t}, function (t, e, n) {\n\t\tvar r = n(18),\n\t\t    a = [\"东北\", \"华北\", \"华东\", \"华中\", \"华南\", \"西南\", \"西北\"];t.exports = { region: function region() {\n\t\t\t\treturn this.pick(a);\n\t\t\t}, province: function province() {\n\t\t\t\treturn this.pick(r).name;\n\t\t\t}, city: function city(t) {\n\t\t\t\tvar e = this.pick(r),\n\t\t\t\t    n = this.pick(e.children);return t ? [e.name, n.name].join(\" \") : n.name;\n\t\t\t}, county: function county(t) {\n\t\t\t\tvar e = this.pick(r),\n\t\t\t\t    n = this.pick(e.children),\n\t\t\t\t    a = this.pick(n.children) || { name: \"-\" };return t ? [e.name, n.name, a.name].join(\" \") : a.name;\n\t\t\t}, zip: function zip(t) {\n\t\t\t\tfor (var e = \"\", n = 0; (t || 6) > n; n++) {\n\t\t\t\t\te += this.natural(0, 9);\n\t\t\t\t}return e;\n\t\t\t} };\n\t}, function (t, e) {\n\t\tfunction n(t) {\n\t\t\tfor (var e, n = {}, r = 0; r < t.length; r++) {\n\t\t\t\te = t[r], e && e.id && (n[e.id] = e);\n\t\t\t}for (var a = [], o = 0; o < t.length; o++) {\n\t\t\t\tif (e = t[o]) if (void 0 != e.pid || void 0 != e.parentId) {\n\t\t\t\t\tvar u = n[e.pid] || n[e.parentId];u && (u.children || (u.children = []), u.children.push(e));\n\t\t\t\t} else a.push(e);\n\t\t\t}return a;\n\t\t}var r = { 110000: \"北京\", 110100: \"北京市\", 110101: \"东城区\", 110102: \"西城区\", 110105: \"朝阳区\", 110106: \"丰台区\", 110107: \"石景山区\", 110108: \"海淀区\", 110109: \"门头沟区\", 110111: \"房山区\", 110112: \"通州区\", 110113: \"顺义区\", 110114: \"昌平区\", 110115: \"大兴区\", 110116: \"怀柔区\", 110117: \"平谷区\", 110228: \"密云县\", 110229: \"延庆县\", 110230: \"其它区\", 120000: \"天津\", 120100: \"天津市\", 120101: \"和平区\", 120102: \"河东区\", 120103: \"河西区\", 120104: \"南开区\", 120105: \"河北区\", 120106: \"红桥区\", 120110: \"东丽区\", 120111: \"西青区\", 120112: \"津南区\", 120113: \"北辰区\", 120114: \"武清区\", 120115: \"宝坻区\", 120116: \"滨海新区\", 120221: \"宁河县\", 120223: \"静海县\", 120225: \"蓟县\", 120226: \"其它区\", 130000: \"河北省\", 130100: \"石家庄市\", 130102: \"长安区\", 130103: \"桥东区\", 130104: \"桥西区\", 130105: \"新华区\", 130107: \"井陉矿区\", 130108: \"裕华区\", 130121: \"井陉县\", 130123: \"正定县\", 130124: \"栾城县\", 130125: \"行唐县\", 130126: \"灵寿县\", 130127: \"高邑县\", 130128: \"深泽县\", 130129: \"赞皇县\", 130130: \"无极县\", 130131: \"平山县\", 130132: \"元氏县\", 130133: \"赵县\", 130181: \"辛集市\", 130182: \"藁城市\", 130183: \"晋州市\", 130184: \"新乐市\", 130185: \"鹿泉市\", 130186: \"其它区\", 130200: \"唐山市\", 130202: \"路南区\", 130203: \"路北区\", 130204: \"古冶区\", 130205: \"开平区\", 130207: \"丰南区\", 130208: \"丰润区\", 130223: \"滦县\", 130224: \"滦南县\", 130225: \"乐亭县\", 130227: \"迁西县\", 130229: \"玉田县\", 130230: \"曹妃甸区\", 130281: \"遵化市\", 130283: \"迁安市\", 130284: \"其它区\", 130300: \"秦皇岛市\", 130302: \"海港区\", 130303: \"山海关区\", 130304: \"北戴河区\", 130321: \"青龙满族自治县\", 130322: \"昌黎县\", 130323: \"抚宁县\", 130324: \"卢龙县\", 130398: \"其它区\", 130400: \"邯郸市\", 130402: \"邯山区\", 130403: \"丛台区\", 130404: \"复兴区\", 130406: \"峰峰矿区\", 130421: \"邯郸县\", 130423: \"临漳县\", 130424: \"成安县\", 130425: \"大名县\", 130426: \"涉县\", 130427: \"磁县\", 130428: \"肥乡县\", 130429: \"永年县\", 130430: \"邱县\", 130431: \"鸡泽县\", 130432: \"广平县\", 130433: \"馆陶县\", 130434: \"魏县\", 130435: \"曲周县\", 130481: \"武安市\", 130482: \"其它区\", 130500: \"邢台市\", 130502: \"桥东区\", 130503: \"桥西区\", 130521: \"邢台县\", 130522: \"临城县\", 130523: \"内丘县\", 130524: \"柏乡县\", 130525: \"隆尧县\", 130526: \"任县\", 130527: \"南和县\", 130528: \"宁晋县\", 130529: \"巨鹿县\", 130530: \"新河县\", 130531: \"广宗县\", 130532: \"平乡县\", 130533: \"威县\", 130534: \"清河县\", 130535: \"临西县\", 130581: \"南宫市\", 130582: \"沙河市\", 130583: \"其它区\", 130600: \"保定市\", 130602: \"新市区\", 130603: \"北市区\", 130604: \"南市区\", 130621: \"满城县\", 130622: \"清苑县\", 130623: \"涞水县\", 130624: \"阜平县\", 130625: \"徐水县\", 130626: \"定兴县\", 130627: \"唐县\", 130628: \"高阳县\", 130629: \"容城县\", 130630: \"涞源县\", 130631: \"望都县\", 130632: \"安新县\", 130633: \"易县\", 130634: \"曲阳县\", 130635: \"蠡县\", 130636: \"顺平县\", 130637: \"博野县\", 130638: \"雄县\", 130681: \"涿州市\", 130682: \"定州市\", 130683: \"安国市\", 130684: \"高碑店市\", 130699: \"其它区\", 130700: \"张家口市\", 130702: \"桥东区\", 130703: \"桥西区\", 130705: \"宣化区\", 130706: \"下花园区\", 130721: \"宣化县\", 130722: \"张北县\", 130723: \"康保县\", 130724: \"沽源县\", 130725: \"尚义县\", 130726: \"蔚县\", 130727: \"阳原县\", 130728: \"怀安县\", 130729: \"万全县\", 130730: \"怀来县\", 130731: \"涿鹿县\", 130732: \"赤城县\", 130733: \"崇礼县\", 130734: \"其它区\", 130800: \"承德市\", 130802: \"双桥区\", 130803: \"双滦区\", 130804: \"鹰手营子矿区\", 130821: \"承德县\", 130822: \"兴隆县\", 130823: \"平泉县\", 130824: \"滦平县\", 130825: \"隆化县\", 130826: \"丰宁满族自治县\", 130827: \"宽城满族自治县\", 130828: \"围场满族蒙古族自治县\", 130829: \"其它区\", 130900: \"沧州市\", 130902: \"新华区\", 130903: \"运河区\", 130921: \"沧县\", 130922: \"青县\", 130923: \"东光县\", 130924: \"海兴县\", 130925: \"盐山县\", 130926: \"肃宁县\", 130927: \"南皮县\", 130928: \"吴桥县\", 130929: \"献县\", 130930: \"孟村回族自治县\", 130981: \"泊头市\", 130982: \"任丘市\", 130983: \"黄骅市\", 130984: \"河间市\", 130985: \"其它区\", 131000: \"廊坊市\", 131002: \"安次区\", 131003: \"广阳区\", 131022: \"固安县\", 131023: \"永清县\", 131024: \"香河县\", 131025: \"大城县\", 131026: \"文安县\", 131028: \"大厂回族自治县\", 131081: \"霸州市\", 131082: \"三河市\", 131083: \"其它区\", 131100: \"衡水市\", 131102: \"桃城区\", 131121: \"枣强县\", 131122: \"武邑县\", 131123: \"武强县\", 131124: \"饶阳县\", 131125: \"安平县\", 131126: \"故城县\", 131127: \"景县\", 131128: \"阜城县\", 131181: \"冀州市\", 131182: \"深州市\", 131183: \"其它区\", 140000: \"山西省\", 140100: \"太原市\", 140105: \"小店区\", 140106: \"迎泽区\", 140107: \"杏花岭区\", 140108: \"尖草坪区\", 140109: \"万柏林区\", 140110: \"晋源区\", 140121: \"清徐县\", 140122: \"阳曲县\", 140123: \"娄烦县\", 140181: \"古交市\", 140182: \"其它区\", 140200: \"大同市\", 140202: \"城区\", 140203: \"矿区\", 140211: \"南郊区\", 140212: \"新荣区\", 140221: \"阳高县\", 140222: \"天镇县\", 140223: \"广灵县\", 140224: \"灵丘县\", 140225: \"浑源县\", 140226: \"左云县\", 140227: \"大同县\", 140228: \"其它区\", 140300: \"阳泉市\", 140302: \"城区\", 140303: \"矿区\", 140311: \"郊区\", 140321: \"平定县\", 140322: \"盂县\", 140323: \"其它区\", 140400: \"长治市\", 140421: \"长治县\", 140423: \"襄垣县\", 140424: \"屯留县\", 140425: \"平顺县\", 140426: \"黎城县\", 140427: \"壶关县\", 140428: \"长子县\", 140429: \"武乡县\", 140430: \"沁县\", 140431: \"沁源县\", 140481: \"潞城市\", 140482: \"城区\", 140483: \"郊区\", 140485: \"其它区\", 140500: \"晋城市\", 140502: \"城区\", 140521: \"沁水县\", 140522: \"阳城县\", 140524: \"陵川县\", 140525: \"泽州县\", 140581: \"高平市\", 140582: \"其它区\", 140600: \"朔州市\", 140602: \"朔城区\", 140603: \"平鲁区\", 140621: \"山阴县\", 140622: \"应县\", 140623: \"右玉县\", 140624: \"怀仁县\", 140625: \"其它区\", 140700: \"晋中市\", 140702: \"榆次区\", 140721: \"榆社县\", 140722: \"左权县\", 140723: \"和顺县\", 140724: \"昔阳县\", 140725: \"寿阳县\", 140726: \"太谷县\", 140727: \"祁县\", 140728: \"平遥县\", 140729: \"灵石县\", 140781: \"介休市\", 140782: \"其它区\", 140800: \"运城市\", 140802: \"盐湖区\", 140821: \"临猗县\", 140822: \"万荣县\", 140823: \"闻喜县\", 140824: \"稷山县\", 140825: \"新绛县\", 140826: \"绛县\", 140827: \"垣曲县\", 140828: \"夏县\", 140829: \"平陆县\", 140830: \"芮城县\", 140881: \"永济市\", 140882: \"河津市\", 140883: \"其它区\", 140900: \"忻州市\", 140902: \"忻府区\", 140921: \"定襄县\", 140922: \"五台县\", 140923: \"代县\", 140924: \"繁峙县\", 140925: \"宁武县\", 140926: \"静乐县\", 140927: \"神池县\", 140928: \"五寨县\", 140929: \"岢岚县\", 140930: \"河曲县\", 140931: \"保德县\", 140932: \"偏关县\", 140981: \"原平市\", 140982: \"其它区\", 141000: \"临汾市\", 141002: \"尧都区\", 141021: \"曲沃县\", 141022: \"翼城县\", 141023: \"襄汾县\", 141024: \"洪洞县\", 141025: \"古县\", 141026: \"安泽县\", 141027: \"浮山县\", 141028: \"吉县\", 141029: \"乡宁县\", 141030: \"大宁县\", 141031: \"隰县\", 141032: \"永和县\", 141033: \"蒲县\", 141034: \"汾西县\", 141081: \"侯马市\", 141082: \"霍州市\", 141083: \"其它区\", 141100: \"吕梁市\", 141102: \"离石区\", 141121: \"文水县\", 141122: \"交城县\", 141123: \"兴县\", 141124: \"临县\", 141125: \"柳林县\", 141126: \"石楼县\", 141127: \"岚县\", 141128: \"方山县\", 141129: \"中阳县\", 141130: \"交口县\", 141181: \"孝义市\", 141182: \"汾阳市\", 141183: \"其它区\", 150000: \"内蒙古自治区\", 150100: \"呼和浩特市\", 150102: \"新城区\", 150103: \"回民区\", 150104: \"玉泉区\", 150105: \"赛罕区\",\n\t\t\t150121: \"土默特左旗\", 150122: \"托克托县\", 150123: \"和林格尔县\", 150124: \"清水河县\", 150125: \"武川县\", 150126: \"其它区\", 150200: \"包头市\", 150202: \"东河区\", 150203: \"昆都仑区\", 150204: \"青山区\", 150205: \"石拐区\", 150206: \"白云鄂博矿区\", 150207: \"九原区\", 150221: \"土默特右旗\", 150222: \"固阳县\", 150223: \"达尔罕茂明安联合旗\", 150224: \"其它区\", 150300: \"乌海市\", 150302: \"海勃湾区\", 150303: \"海南区\", 150304: \"乌达区\", 150305: \"其它区\", 150400: \"赤峰市\", 150402: \"红山区\", 150403: \"元宝山区\", 150404: \"松山区\", 150421: \"阿鲁科尔沁旗\", 150422: \"巴林左旗\", 150423: \"巴林右旗\", 150424: \"林西县\", 150425: \"克什克腾旗\", 150426: \"翁牛特旗\", 150428: \"喀喇沁旗\", 150429: \"宁城县\", 150430: \"敖汉旗\", 150431: \"其它区\", 150500: \"通辽市\", 150502: \"科尔沁区\", 150521: \"科尔沁左翼中旗\", 150522: \"科尔沁左翼后旗\", 150523: \"开鲁县\", 150524: \"库伦旗\", 150525: \"奈曼旗\", 150526: \"扎鲁特旗\", 150581: \"霍林郭勒市\", 150582: \"其它区\", 150600: \"鄂尔多斯市\", 150602: \"东胜区\", 150621: \"达拉特旗\", 150622: \"准格尔旗\", 150623: \"鄂托克前旗\", 150624: \"鄂托克旗\", 150625: \"杭锦旗\", 150626: \"乌审旗\", 150627: \"伊金霍洛旗\", 150628: \"其它区\", 150700: \"呼伦贝尔市\", 150702: \"海拉尔区\", 150703: \"扎赉诺尔区\", 150721: \"阿荣旗\", 150722: \"莫力达瓦达斡尔族自治旗\", 150723: \"鄂伦春自治旗\", 150724: \"鄂温克族自治旗\", 150725: \"陈巴尔虎旗\", 150726: \"新巴尔虎左旗\", 150727: \"新巴尔虎右旗\", 150781: \"满洲里市\", 150782: \"牙克石市\", 150783: \"扎兰屯市\", 150784: \"额尔古纳市\", 150785: \"根河市\", 150786: \"其它区\", 150800: \"巴彦淖尔市\", 150802: \"临河区\", 150821: \"五原县\", 150822: \"磴口县\", 150823: \"乌拉特前旗\", 150824: \"乌拉特中旗\", 150825: \"乌拉特后旗\", 150826: \"杭锦后旗\", 150827: \"其它区\", 150900: \"乌兰察布市\", 150902: \"集宁区\", 150921: \"卓资县\", 150922: \"化德县\", 150923: \"商都县\", 150924: \"兴和县\", 150925: \"凉城县\", 150926: \"察哈尔右翼前旗\", 150927: \"察哈尔右翼中旗\", 150928: \"察哈尔右翼后旗\", 150929: \"四子王旗\", 150981: \"丰镇市\", 150982: \"其它区\", 152200: \"兴安盟\", 152201: \"乌兰浩特市\", 152202: \"阿尔山市\", 152221: \"科尔沁右翼前旗\", 152222: \"科尔沁右翼中旗\", 152223: \"扎赉特旗\", 152224: \"突泉县\", 152225: \"其它区\", 152500: \"锡林郭勒盟\", 152501: \"二连浩特市\", 152502: \"锡林浩特市\", 152522: \"阿巴嘎旗\", 152523: \"苏尼特左旗\", 152524: \"苏尼特右旗\", 152525: \"东乌珠穆沁旗\", 152526: \"西乌珠穆沁旗\", 152527: \"太仆寺旗\", 152528: \"镶黄旗\", 152529: \"正镶白旗\", 152530: \"正蓝旗\", 152531: \"多伦县\", 152532: \"其它区\", 152900: \"阿拉善盟\", 152921: \"阿拉善左旗\", 152922: \"阿拉善右旗\", 152923: \"额济纳旗\", 152924: \"其它区\", 210000: \"辽宁省\", 210100: \"沈阳市\", 210102: \"和平区\", 210103: \"沈河区\", 210104: \"大东区\", 210105: \"皇姑区\", 210106: \"铁西区\", 210111: \"苏家屯区\", 210112: \"东陵区\", 210113: \"新城子区\", 210114: \"于洪区\", 210122: \"辽中县\", 210123: \"康平县\", 210124: \"法库县\", 210181: \"新民市\", 210184: \"沈北新区\", 210185: \"其它区\", 210200: \"大连市\", 210202: \"中山区\", 210203: \"西岗区\", 210204: \"沙河口区\", 210211: \"甘井子区\", 210212: \"旅顺口区\", 210213: \"金州区\", 210224: \"长海县\", 210281: \"瓦房店市\", 210282: \"普兰店市\", 210283: \"庄河市\", 210298: \"其它区\", 210300: \"鞍山市\", 210302: \"铁东区\", 210303: \"铁西区\", 210304: \"立山区\", 210311: \"千山区\", 210321: \"台安县\", 210323: \"岫岩满族自治县\", 210381: \"海城市\", 210382: \"其它区\", 210400: \"抚顺市\", 210402: \"新抚区\", 210403: \"东洲区\", 210404: \"望花区\", 210411: \"顺城区\", 210421: \"抚顺县\", 210422: \"新宾满族自治县\", 210423: \"清原满族自治县\", 210424: \"其它区\", 210500: \"本溪市\", 210502: \"平山区\", 210503: \"溪湖区\", 210504: \"明山区\", 210505: \"南芬区\", 210521: \"本溪满族自治县\", 210522: \"桓仁满族自治县\", 210523: \"其它区\", 210600: \"丹东市\", 210602: \"元宝区\", 210603: \"振兴区\", 210604: \"振安区\", 210624: \"宽甸满族自治县\", 210681: \"东港市\", 210682: \"凤城市\", 210683: \"其它区\", 210700: \"锦州市\", 210702: \"古塔区\", 210703: \"凌河区\", 210711: \"太和区\", 210726: \"黑山县\", 210727: \"义县\", 210781: \"凌海市\", 210782: \"北镇市\", 210783: \"其它区\", 210800: \"营口市\", 210802: \"站前区\", 210803: \"西市区\", 210804: \"鲅鱼圈区\", 210811: \"老边区\", 210881: \"盖州市\", 210882: \"大石桥市\", 210883: \"其它区\", 210900: \"阜新市\", 210902: \"海州区\", 210903: \"新邱区\", 210904: \"太平区\", 210905: \"清河门区\", 210911: \"细河区\", 210921: \"阜新蒙古族自治县\", 210922: \"彰武县\", 210923: \"其它区\", 211000: \"辽阳市\", 211002: \"白塔区\", 211003: \"文圣区\", 211004: \"宏伟区\", 211005: \"弓长岭区\", 211011: \"太子河区\", 211021: \"辽阳县\", 211081: \"灯塔市\", 211082: \"其它区\", 211100: \"盘锦市\", 211102: \"双台子区\", 211103: \"兴隆台区\", 211121: \"大洼县\", 211122: \"盘山县\", 211123: \"其它区\", 211200: \"铁岭市\", 211202: \"银州区\", 211204: \"清河区\", 211221: \"铁岭县\", 211223: \"西丰县\", 211224: \"昌图县\", 211281: \"调兵山市\", 211282: \"开原市\", 211283: \"其它区\", 211300: \"朝阳市\", 211302: \"双塔区\", 211303: \"龙城区\", 211321: \"朝阳县\", 211322: \"建平县\", 211324: \"喀喇沁左翼蒙古族自治县\", 211381: \"北票市\", 211382: \"凌源市\", 211383: \"其它区\", 211400: \"葫芦岛市\", 211402: \"连山区\", 211403: \"龙港区\", 211404: \"南票区\", 211421: \"绥中县\", 211422: \"建昌县\", 211481: \"兴城市\", 211482: \"其它区\", 220000: \"吉林省\", 220100: \"长春市\", 220102: \"南关区\", 220103: \"宽城区\", 220104: \"朝阳区\", 220105: \"二道区\", 220106: \"绿园区\", 220112: \"双阳区\", 220122: \"农安县\", 220181: \"九台市\", 220182: \"榆树市\", 220183: \"德惠市\", 220188: \"其它区\", 220200: \"吉林市\", 220202: \"昌邑区\", 220203: \"龙潭区\", 220204: \"船营区\", 220211: \"丰满区\", 220221: \"永吉县\", 220281: \"蛟河市\", 220282: \"桦甸市\", 220283: \"舒兰市\", 220284: \"磐石市\", 220285: \"其它区\", 220300: \"四平市\", 220302: \"铁西区\", 220303: \"铁东区\", 220322: \"梨树县\", 220323: \"伊通满族自治县\", 220381: \"公主岭市\", 220382: \"双辽市\", 220383: \"其它区\", 220400: \"辽源市\", 220402: \"龙山区\", 220403: \"西安区\", 220421: \"东丰县\", 220422: \"东辽县\", 220423: \"其它区\", 220500: \"通化市\", 220502: \"东昌区\", 220503: \"二道江区\", 220521: \"通化县\", 220523: \"辉南县\", 220524: \"柳河县\", 220581: \"梅河口市\", 220582: \"集安市\", 220583: \"其它区\", 220600: \"白山市\", 220602: \"浑江区\", 220621: \"抚松县\", 220622: \"靖宇县\", 220623: \"长白朝鲜族自治县\", 220625: \"江源区\", 220681: \"临江市\", 220682: \"其它区\", 220700: \"松原市\", 220702: \"宁江区\", 220721: \"前郭尔罗斯蒙古族自治县\", 220722: \"长岭县\", 220723: \"乾安县\", 220724: \"扶余市\", 220725: \"其它区\", 220800: \"白城市\", 220802: \"洮北区\", 220821: \"镇赉县\", 220822: \"通榆县\", 220881: \"洮南市\", 220882: \"大安市\", 220883: \"其它区\", 222400: \"延边朝鲜族自治州\", 222401: \"延吉市\", 222402: \"图们市\", 222403: \"敦化市\", 222404: \"珲春市\", 222405: \"龙井市\", 222406: \"和龙市\", 222424: \"汪清县\", 222426: \"安图县\", 222427: \"其它区\", 230000: \"黑龙江省\", 230100: \"哈尔滨市\", 230102: \"道里区\", 230103: \"南岗区\", 230104: \"道外区\", 230106: \"香坊区\", 230108: \"平房区\", 230109: \"松北区\", 230111: \"呼兰区\", 230123: \"依兰县\", 230124: \"方正县\", 230125: \"宾县\", 230126: \"巴彦县\", 230127: \"木兰县\", 230128: \"通河县\", 230129: \"延寿县\", 230181: \"阿城区\", 230182: \"双城市\", 230183: \"尚志市\", 230184: \"五常市\", 230186: \"其它区\", 230200: \"齐齐哈尔市\", 230202: \"龙沙区\", 230203: \"建华区\", 230204: \"铁锋区\", 230205: \"昂昂溪区\", 230206: \"富拉尔基区\", 230207: \"碾子山区\", 230208: \"梅里斯达斡尔族区\", 230221: \"龙江县\", 230223: \"依安县\", 230224: \"泰来县\", 230225: \"甘南县\", 230227: \"富裕县\", 230229: \"克山县\", 230230: \"克东县\", 230231: \"拜泉县\", 230281: \"讷河市\", 230282: \"其它区\", 230300: \"鸡西市\", 230302: \"鸡冠区\", 230303: \"恒山区\", 230304: \"滴道区\", 230305: \"梨树区\", 230306: \"城子河区\", 230307: \"麻山区\", 230321: \"鸡东县\", 230381: \"虎林市\", 230382: \"密山市\", 230383: \"其它区\", 230400: \"鹤岗市\", 230402: \"向阳区\", 230403: \"工农区\", 230404: \"南山区\", 230405: \"兴安区\", 230406: \"东山区\", 230407: \"兴山区\", 230421: \"萝北县\", 230422: \"绥滨县\", 230423: \"其它区\", 230500: \"双鸭山市\", 230502: \"尖山区\", 230503: \"岭东区\", 230505: \"四方台区\", 230506: \"宝山区\", 230521: \"集贤县\", 230522: \"友谊县\", 230523: \"宝清县\", 230524: \"饶河县\", 230525: \"其它区\", 230600: \"大庆市\", 230602: \"萨尔图区\", 230603: \"龙凤区\", 230604: \"让胡路区\", 230605: \"红岗区\", 230606: \"大同区\", 230621: \"肇州县\", 230622: \"肇源县\", 230623: \"林甸县\", 230624: \"杜尔伯特蒙古族自治县\", 230625: \"其它区\", 230700: \"伊春市\", 230702: \"伊春区\", 230703: \"南岔区\", 230704: \"友好区\", 230705: \"西林区\", 230706: \"翠峦区\", 230707: \"新青区\", 230708: \"美溪区\", 230709: \"金山屯区\", 230710: \"五营区\", 230711: \"乌马河区\", 230712: \"汤旺河区\", 230713: \"带岭区\", 230714: \"乌伊岭区\", 230715: \"红星区\", 230716: \"上甘岭区\", 230722: \"嘉荫县\", 230781: \"铁力市\", 230782: \"其它区\", 230800: \"佳木斯市\", 230803: \"向阳区\", 230804: \"前进区\", 230805: \"东风区\", 230811: \"郊区\", 230822: \"桦南县\", 230826: \"桦川县\", 230828: \"汤原县\", 230833: \"抚远县\", 230881: \"同江市\", 230882: \"富锦市\", 230883: \"其它区\", 230900: \"七台河市\", 230902: \"新兴区\", 230903: \"桃山区\", 230904: \"茄子河区\", 230921: \"勃利县\", 230922: \"其它区\", 231000: \"牡丹江市\", 231002: \"东安区\", 231003: \"阳明区\", 231004: \"爱民区\", 231005: \"西安区\", 231024: \"东宁县\", 231025: \"林口县\", 231081: \"绥芬河市\", 231083: \"海林市\", 231084: \"宁安市\", 231085: \"穆棱市\", 231086: \"其它区\", 231100: \"黑河市\", 231102: \"爱辉区\", 231121: \"嫩江县\", 231123: \"逊克县\", 231124: \"孙吴县\", 231181: \"北安市\", 231182: \"五大连池市\", 231183: \"其它区\", 231200: \"绥化市\", 231202: \"北林区\", 231221: \"望奎县\", 231222: \"兰西县\", 231223: \"青冈县\", 231224: \"庆安县\", 231225: \"明水县\", 231226: \"绥棱县\", 231281: \"安达市\", 231282: \"肇东市\", 231283: \"海伦市\", 231284: \"其它区\", 232700: \"大兴安岭地区\", 232702: \"松岭区\", 232703: \"新林区\", 232704: \"呼中区\", 232721: \"呼玛县\", 232722: \"塔河县\", 232723: \"漠河县\", 232724: \"加格达奇区\", 232725: \"其它区\", 310000: \"上海\", 310100: \"上海市\", 310101: \"黄浦区\", 310104: \"徐汇区\", 310105: \"长宁区\", 310106: \"静安区\", 310107: \"普陀区\", 310108: \"闸北区\", 310109: \"虹口区\", 310110: \"杨浦区\", 310112: \"闵行区\", 310113: \"宝山区\", 310114: \"嘉定区\", 310115: \"浦东新区\", 310116: \"金山区\", 310117: \"松江区\", 310118: \"青浦区\", 310120: \"奉贤区\", 310230: \"崇明县\", 310231: \"其它区\", 320000: \"江苏省\", 320100: \"南京市\", 320102: \"玄武区\", 320104: \"秦淮区\", 320105: \"建邺区\", 320106: \"鼓楼区\", 320111: \"浦口区\", 320113: \"栖霞区\", 320114: \"雨花台区\", 320115: \"江宁区\", 320116: \"六合区\", 320124: \"溧水区\", 320125: \"高淳区\", 320126: \"其它区\", 320200: \"无锡市\", 320202: \"崇安区\", 320203: \"南长区\", 320204: \"北塘区\", 320205: \"锡山区\", 320206: \"惠山区\", 320211: \"滨湖区\", 320281: \"江阴市\", 320282: \"宜兴市\", 320297: \"其它区\", 320300: \"徐州市\", 320302: \"鼓楼区\", 320303: \"云龙区\", 320305: \"贾汪区\", 320311: \"泉山区\", 320321: \"丰县\", 320322: \"沛县\", 320323: \"铜山区\", 320324: \"睢宁县\", 320381: \"新沂市\", 320382: \"邳州市\", 320383: \"其它区\", 320400: \"常州市\", 320402: \"天宁区\", 320404: \"钟楼区\", 320405: \"戚墅堰区\", 320411: \"新北区\", 320412: \"武进区\", 320481: \"溧阳市\", 320482: \"金坛市\", 320483: \"其它区\", 320500: \"苏州市\", 320505: \"虎丘区\", 320506: \"吴中区\", 320507: \"相城区\", 320508: \"姑苏区\", 320581: \"常熟市\", 320582: \"张家港市\", 320583: \"昆山市\", 320584: \"吴江区\", 320585: \"太仓市\", 320596: \"其它区\", 320600: \"南通市\", 320602: \"崇川区\", 320611: \"港闸区\", 320612: \"通州区\", 320621: \"海安县\", 320623: \"如东县\", 320681: \"启东市\", 320682: \"如皋市\", 320684: \"海门市\", 320694: \"其它区\", 320700: \"连云港市\", 320703: \"连云区\", 320705: \"新浦区\", 320706: \"海州区\", 320721: \"赣榆县\", 320722: \"东海县\", 320723: \"灌云县\", 320724: \"灌南县\", 320725: \"其它区\", 320800: \"淮安市\", 320802: \"清河区\", 320803: \"淮安区\", 320804: \"淮阴区\", 320811: \"清浦区\", 320826: \"涟水县\", 320829: \"洪泽县\", 320830: \"盱眙县\", 320831: \"金湖县\", 320832: \"其它区\", 320900: \"盐城市\", 320902: \"亭湖区\", 320903: \"盐都区\", 320921: \"响水县\", 320922: \"滨海县\", 320923: \"阜宁县\", 320924: \"射阳县\", 320925: \"建湖县\", 320981: \"东台市\", 320982: \"大丰市\", 320983: \"其它区\", 321000: \"扬州市\", 321002: \"广陵区\", 321003: \"邗江区\", 321023: \"宝应县\", 321081: \"仪征市\", 321084: \"高邮市\", 321088: \"江都区\", 321093: \"其它区\", 321100: \"镇江市\", 321102: \"京口区\", 321111: \"润州区\", 321112: \"丹徒区\", 321181: \"丹阳市\", 321182: \"扬中市\", 321183: \"句容市\", 321184: \"其它区\", 321200: \"泰州市\", 321202: \"海陵区\", 321203: \"高港区\", 321281: \"兴化市\", 321282: \"靖江市\", 321283: \"泰兴市\", 321284: \"姜堰区\", 321285: \"其它区\", 321300: \"宿迁市\", 321302: \"宿城区\", 321311: \"宿豫区\", 321322: \"沭阳县\", 321323: \"泗阳县\", 321324: \"泗洪县\", 321325: \"其它区\", 330000: \"浙江省\", 330100: \"杭州市\", 330102: \"上城区\", 330103: \"下城区\", 330104: \"江干区\", 330105: \"拱墅区\", 330106: \"西湖区\", 330108: \"滨江区\", 330109: \"萧山区\", 330110: \"余杭区\", 330122: \"桐庐县\", 330127: \"淳安县\", 330182: \"建德市\", 330183: \"富阳市\", 330185: \"临安市\", 330186: \"其它区\", 330200: \"宁波市\", 330203: \"海曙区\", 330204: \"江东区\", 330205: \"江北区\", 330206: \"北仑区\", 330211: \"镇海区\", 330212: \"鄞州区\", 330225: \"象山县\", 330226: \"宁海县\", 330281: \"余姚市\", 330282: \"慈溪市\", 330283: \"奉化市\", 330284: \"其它区\", 330300: \"温州市\", 330302: \"鹿城区\", 330303: \"龙湾区\", 330304: \"瓯海区\", 330322: \"洞头县\", 330324: \"永嘉县\", 330326: \"平阳县\", 330327: \"苍南县\", 330328: \"文成县\", 330329: \"泰顺县\", 330381: \"瑞安市\", 330382: \"乐清市\", 330383: \"其它区\", 330400: \"嘉兴市\", 330402: \"南湖区\", 330411: \"秀洲区\", 330421: \"嘉善县\", 330424: \"海盐县\", 330481: \"海宁市\", 330482: \"平湖市\", 330483: \"桐乡市\", 330484: \"其它区\", 330500: \"湖州市\", 330502: \"吴兴区\", 330503: \"南浔区\", 330521: \"德清县\", 330522: \"长兴县\", 330523: \"安吉县\", 330524: \"其它区\", 330600: \"绍兴市\", 330602: \"越城区\", 330621: \"绍兴县\", 330624: \"新昌县\", 330681: \"诸暨市\", 330682: \"上虞市\", 330683: \"嵊州市\", 330684: \"其它区\", 330700: \"金华市\", 330702: \"婺城区\", 330703: \"金东区\", 330723: \"武义县\", 330726: \"浦江县\", 330727: \"磐安县\", 330781: \"兰溪市\", 330782: \"义乌市\", 330783: \"东阳市\", 330784: \"永康市\", 330785: \"其它区\", 330800: \"衢州市\", 330802: \"柯城区\", 330803: \"衢江区\", 330822: \"常山县\", 330824: \"开化县\", 330825: \"龙游县\", 330881: \"江山市\", 330882: \"其它区\", 330900: \"舟山市\", 330902: \"定海区\", 330903: \"普陀区\", 330921: \"岱山县\", 330922: \"嵊泗县\", 330923: \"其它区\", 331000: \"台州市\", 331002: \"椒江区\", 331003: \"黄岩区\", 331004: \"路桥区\", 331021: \"玉环县\", 331022: \"三门县\", 331023: \"天台县\", 331024: \"仙居县\", 331081: \"温岭市\", 331082: \"临海市\", 331083: \"其它区\", 331100: \"丽水市\", 331102: \"莲都区\", 331121: \"青田县\", 331122: \"缙云县\", 331123: \"遂昌县\", 331124: \"松阳县\", 331125: \"云和县\", 331126: \"庆元县\", 331127: \"景宁畲族自治县\", 331181: \"龙泉市\", 331182: \"其它区\", 340000: \"安徽省\", 340100: \"合肥市\", 340102: \"瑶海区\", 340103: \"庐阳区\", 340104: \"蜀山区\", 340111: \"包河区\", 340121: \"长丰县\", 340122: \"肥东县\", 340123: \"肥西县\", 340192: \"其它区\", 340200: \"芜湖市\", 340202: \"镜湖区\", 340203: \"弋江区\", 340207: \"鸠江区\", 340208: \"三山区\", 340221: \"芜湖县\", 340222: \"繁昌县\", 340223: \"南陵县\", 340224: \"其它区\", 340300: \"蚌埠市\", 340302: \"龙子湖区\", 340303: \"蚌山区\", 340304: \"禹会区\", 340311: \"淮上区\", 340321: \"怀远县\", 340322: \"五河县\", 340323: \"固镇县\", 340324: \"其它区\", 340400: \"淮南市\", 340402: \"大通区\", 340403: \"田家庵区\", 340404: \"谢家集区\", 340405: \"八公山区\", 340406: \"潘集区\", 340421: \"凤台县\", 340422: \"其它区\", 340500: \"马鞍山市\", 340503: \"花山区\", 340504: \"雨山区\", 340506: \"博望区\", 340521: \"当涂县\", 340522: \"其它区\", 340600: \"淮北市\", 340602: \"杜集区\", 340603: \"相山区\", 340604: \"烈山区\", 340621: \"濉溪县\", 340622: \"其它区\", 340700: \"铜陵市\", 340702: \"铜官山区\", 340703: \"狮子山区\", 340711: \"郊区\", 340721: \"铜陵县\", 340722: \"其它区\", 340800: \"安庆市\", 340802: \"迎江区\", 340803: \"大观区\", 340811: \"宜秀区\", 340822: \"怀宁县\", 340823: \"枞阳县\", 340824: \"潜山县\", 340825: \"太湖县\", 340826: \"宿松县\", 340827: \"望江县\", 340828: \"岳西县\", 340881: \"桐城市\", 340882: \"其它区\", 341000: \"黄山市\", 341002: \"屯溪区\", 341003: \"黄山区\", 341004: \"徽州区\", 341021: \"歙县\", 341022: \"休宁县\", 341023: \"黟县\", 341024: \"祁门县\", 341025: \"其它区\", 341100: \"滁州市\", 341102: \"琅琊区\", 341103: \"南谯区\", 341122: \"来安县\", 341124: \"全椒县\", 341125: \"定远县\", 341126: \"凤阳县\", 341181: \"天长市\", 341182: \"明光市\", 341183: \"其它区\", 341200: \"阜阳市\", 341202: \"颍州区\", 341203: \"颍东区\", 341204: \"颍泉区\", 341221: \"临泉县\", 341222: \"太和县\", 341225: \"阜南县\", 341226: \"颍上县\", 341282: \"界首市\", 341283: \"其它区\", 341300: \"宿州市\", 341302: \"埇桥区\", 341321: \"砀山县\", 341322: \"萧县\", 341323: \"灵璧县\", 341324: \"泗县\", 341325: \"其它区\", 341400: \"巢湖市\", 341421: \"庐江县\", 341422: \"无为县\", 341423: \"含山县\", 341424: \"和县\", 341500: \"六安市\", 341502: \"金安区\", 341503: \"裕安区\", 341521: \"寿县\", 341522: \"霍邱县\", 341523: \"舒城县\", 341524: \"金寨县\", 341525: \"霍山县\", 341526: \"其它区\", 341600: \"亳州市\", 341602: \"谯城区\", 341621: \"涡阳县\", 341622: \"蒙城县\", 341623: \"利辛县\", 341624: \"其它区\", 341700: \"池州市\", 341702: \"贵池区\", 341721: \"东至县\", 341722: \"石台县\", 341723: \"青阳县\", 341724: \"其它区\", 341800: \"宣城市\", 341802: \"宣州区\", 341821: \"郎溪县\", 341822: \"广德县\", 341823: \"泾县\", 341824: \"绩溪县\", 341825: \"旌德县\", 341881: \"宁国市\", 341882: \"其它区\", 350000: \"福建省\", 350100: \"福州市\", 350102: \"鼓楼区\", 350103: \"台江区\", 350104: \"仓山区\", 350105: \"马尾区\", 350111: \"晋安区\", 350121: \"闽侯县\", 350122: \"连江县\", 350123: \"罗源县\", 350124: \"闽清县\", 350125: \"永泰县\", 350128: \"平潭县\", 350181: \"福清市\", 350182: \"长乐市\", 350183: \"其它区\", 350200: \"厦门市\", 350203: \"思明区\", 350205: \"海沧区\", 350206: \"湖里区\", 350211: \"集美区\", 350212: \"同安区\", 350213: \"翔安区\", 350214: \"其它区\", 350300: \"莆田市\", 350302: \"城厢区\", 350303: \"涵江区\", 350304: \"荔城区\", 350305: \"秀屿区\", 350322: \"仙游县\", 350323: \"其它区\", 350400: \"三明市\", 350402: \"梅列区\", 350403: \"三元区\", 350421: \"明溪县\", 350423: \"清流县\", 350424: \"宁化县\", 350425: \"大田县\", 350426: \"尤溪县\", 350427: \"沙县\", 350428: \"将乐县\", 350429: \"泰宁县\", 350430: \"建宁县\", 350481: \"永安市\", 350482: \"其它区\", 350500: \"泉州市\", 350502: \"鲤城区\", 350503: \"丰泽区\", 350504: \"洛江区\", 350505: \"泉港区\", 350521: \"惠安县\", 350524: \"安溪县\", 350525: \"永春县\", 350526: \"德化县\", 350527: \"金门县\", 350581: \"石狮市\", 350582: \"晋江市\", 350583: \"南安市\", 350584: \"其它区\", 350600: \"漳州市\", 350602: \"芗城区\", 350603: \"龙文区\", 350622: \"云霄县\", 350623: \"漳浦县\", 350624: \"诏安县\", 350625: \"长泰县\", 350626: \"东山县\", 350627: \"南靖县\", 350628: \"平和县\", 350629: \"华安县\", 350681: \"龙海市\", 350682: \"其它区\", 350700: \"南平市\", 350702: \"延平区\", 350721: \"顺昌县\", 350722: \"浦城县\", 350723: \"光泽县\", 350724: \"松溪县\", 350725: \"政和县\", 350781: \"邵武市\", 350782: \"武夷山市\", 350783: \"建瓯市\", 350784: \"建阳市\", 350785: \"其它区\", 350800: \"龙岩市\", 350802: \"新罗区\", 350821: \"长汀县\", 350822: \"永定县\", 350823: \"上杭县\", 350824: \"武平县\", 350825: \"连城县\", 350881: \"漳平市\", 350882: \"其它区\", 350900: \"宁德市\", 350902: \"蕉城区\", 350921: \"霞浦县\", 350922: \"古田县\", 350923: \"屏南县\", 350924: \"寿宁县\", 350925: \"周宁县\", 350926: \"柘荣县\", 350981: \"福安市\", 350982: \"福鼎市\", 350983: \"其它区\", 360000: \"江西省\", 360100: \"南昌市\", 360102: \"东湖区\", 360103: \"西湖区\", 360104: \"青云谱区\", 360105: \"湾里区\", 360111: \"青山湖区\", 360121: \"南昌县\", 360122: \"新建县\", 360123: \"安义县\", 360124: \"进贤县\", 360128: \"其它区\", 360200: \"景德镇市\", 360202: \"昌江区\", 360203: \"珠山区\", 360222: \"浮梁县\", 360281: \"乐平市\", 360282: \"其它区\", 360300: \"萍乡市\", 360302: \"安源区\", 360313: \"湘东区\", 360321: \"莲花县\", 360322: \"上栗县\", 360323: \"芦溪县\", 360324: \"其它区\", 360400: \"九江市\", 360402: \"庐山区\", 360403: \"浔阳区\", 360421: \"九江县\", 360423: \"武宁县\", 360424: \"修水县\", 360425: \"永修县\", 360426: \"德安县\", 360427: \"星子县\", 360428: \"都昌县\", 360429: \"湖口县\", 360430: \"彭泽县\", 360481: \"瑞昌市\", 360482: \"其它区\", 360483: \"共青城市\", 360500: \"新余市\", 360502: \"渝水区\", 360521: \"分宜县\", 360522: \"其它区\", 360600: \"鹰潭市\", 360602: \"月湖区\", 360622: \"余江县\", 360681: \"贵溪市\", 360682: \"其它区\", 360700: \"赣州市\", 360702: \"章贡区\", 360721: \"赣县\", 360722: \"信丰县\", 360723: \"大余县\", 360724: \"上犹县\", 360725: \"崇义县\", 360726: \"安远县\", 360727: \"龙南县\", 360728: \"定南县\", 360729: \"全南县\", 360730: \"宁都县\", 360731: \"于都县\", 360732: \"兴国县\", 360733: \"会昌县\", 360734: \"寻乌县\", 360735: \"石城县\", 360781: \"瑞金市\", 360782: \"南康市\", 360783: \"其它区\", 360800: \"吉安市\", 360802: \"吉州区\", 360803: \"青原区\", 360821: \"吉安县\", 360822: \"吉水县\", 360823: \"峡江县\", 360824: \"新干县\", 360825: \"永丰县\", 360826: \"泰和县\", 360827: \"遂川县\", 360828: \"万安县\", 360829: \"安福县\", 360830: \"永新县\", 360881: \"井冈山市\", 360882: \"其它区\", 360900: \"宜春市\", 360902: \"袁州区\", 360921: \"奉新县\", 360922: \"万载县\", 360923: \"上高县\", 360924: \"宜丰县\", 360925: \"靖安县\", 360926: \"铜鼓县\", 360981: \"丰城市\", 360982: \"樟树市\", 360983: \"高安市\", 360984: \"其它区\", 361000: \"抚州市\", 361002: \"临川区\", 361021: \"南城县\", 361022: \"黎川县\", 361023: \"南丰县\", 361024: \"崇仁县\", 361025: \"乐安县\", 361026: \"宜黄县\", 361027: \"金溪县\", 361028: \"资溪县\", 361029: \"东乡县\", 361030: \"广昌县\", 361031: \"其它区\", 361100: \"上饶市\", 361102: \"信州区\", 361121: \"上饶县\", 361122: \"广丰县\", 361123: \"玉山县\", 361124: \"铅山县\", 361125: \"横峰县\", 361126: \"弋阳县\", 361127: \"余干县\", 361128: \"鄱阳县\", 361129: \"万年县\", 361130: \"婺源县\", 361181: \"德兴市\", 361182: \"其它区\", 370000: \"山东省\", 370100: \"济南市\", 370102: \"历下区\", 370103: \"市中区\", 370104: \"槐荫区\", 370105: \"天桥区\", 370112: \"历城区\", 370113: \"长清区\", 370124: \"平阴县\", 370125: \"济阳县\", 370126: \"商河县\", 370181: \"章丘市\", 370182: \"其它区\", 370200: \"青岛市\", 370202: \"市南区\", 370203: \"市北区\", 370211: \"黄岛区\", 370212: \"崂山区\", 370213: \"李沧区\", 370214: \"城阳区\", 370281: \"胶州市\", 370282: \"即墨市\", 370283: \"平度市\", 370285: \"莱西市\", 370286: \"其它区\", 370300: \"淄博市\", 370302: \"淄川区\", 370303: \"张店区\", 370304: \"博山区\", 370305: \"临淄区\", 370306: \"周村区\", 370321: \"桓台县\", 370322: \"高青县\", 370323: \"沂源县\", 370324: \"其它区\", 370400: \"枣庄市\", 370402: \"市中区\", 370403: \"薛城区\", 370404: \"峄城区\", 370405: \"台儿庄区\", 370406: \"山亭区\", 370481: \"滕州市\", 370482: \"其它区\", 370500: \"东营市\", 370502: \"东营区\", 370503: \"河口区\", 370521: \"垦利县\", 370522: \"利津县\", 370523: \"广饶县\", 370591: \"其它区\", 370600: \"烟台市\", 370602: \"芝罘区\", 370611: \"福山区\", 370612: \"牟平区\", 370613: \"莱山区\", 370634: \"长岛县\", 370681: \"龙口市\", 370682: \"莱阳市\", 370683: \"莱州市\", 370684: \"蓬莱市\", 370685: \"招远市\", 370686: \"栖霞市\", 370687: \"海阳市\", 370688: \"其它区\", 370700: \"潍坊市\", 370702: \"潍城区\", 370703: \"寒亭区\", 370704: \"坊子区\", 370705: \"奎文区\", 370724: \"临朐县\", 370725: \"昌乐县\", 370781: \"青州市\", 370782: \"诸城市\", 370783: \"寿光市\", 370784: \"安丘市\", 370785: \"高密市\", 370786: \"昌邑市\", 370787: \"其它区\", 370800: \"济宁市\", 370802: \"市中区\", 370811: \"任城区\", 370826: \"微山县\", 370827: \"鱼台县\", 370828: \"金乡县\", 370829: \"嘉祥县\", 370830: \"汶上县\", 370831: \"泗水县\", 370832: \"梁山县\", 370881: \"曲阜市\", 370882: \"兖州市\", 370883: \"邹城市\", 370884: \"其它区\", 370900: \"泰安市\", 370902: \"泰山区\", 370903: \"岱岳区\", 370921: \"宁阳县\", 370923: \"东平县\", 370982: \"新泰市\", 370983: \"肥城市\", 370984: \"其它区\", 371000: \"威海市\", 371002: \"环翠区\", 371081: \"文登市\", 371082: \"荣成市\", 371083: \"乳山市\", 371084: \"其它区\", 371100: \"日照市\", 371102: \"东港区\", 371103: \"岚山区\", 371121: \"五莲县\", 371122: \"莒县\", 371123: \"其它区\", 371200: \"莱芜市\", 371202: \"莱城区\", 371203: \"钢城区\", 371204: \"其它区\", 371300: \"临沂市\", 371302: \"兰山区\", 371311: \"罗庄区\", 371312: \"河东区\", 371321: \"沂南县\", 371322: \"郯城县\", 371323: \"沂水县\", 371324: \"苍山县\", 371325: \"费县\", 371326: \"平邑县\", 371327: \"莒南县\", 371328: \"蒙阴县\", 371329: \"临沭县\", 371330: \"其它区\", 371400: \"德州市\", 371402: \"德城区\", 371421: \"陵县\", 371422: \"宁津县\", 371423: \"庆云县\", 371424: \"临邑县\", 371425: \"齐河县\", 371426: \"平原县\", 371427: \"夏津县\", 371428: \"武城县\", 371481: \"乐陵市\", 371482: \"禹城市\", 371483: \"其它区\", 371500: \"聊城市\", 371502: \"东昌府区\", 371521: \"阳谷县\", 371522: \"莘县\", 371523: \"茌平县\", 371524: \"东阿县\", 371525: \"冠县\", 371526: \"高唐县\", 371581: \"临清市\", 371582: \"其它区\", 371600: \"滨州市\", 371602: \"滨城区\", 371621: \"惠民县\", 371622: \"阳信县\", 371623: \"无棣县\", 371624: \"沾化县\", 371625: \"博兴县\", 371626: \"邹平县\", 371627: \"其它区\", 371700: \"菏泽市\", 371702: \"牡丹区\", 371721: \"曹县\", 371722: \"单县\", 371723: \"成武县\", 371724: \"巨野县\", 371725: \"郓城县\", 371726: \"鄄城县\", 371727: \"定陶县\", 371728: \"东明县\", 371729: \"其它区\", 410000: \"河南省\", 410100: \"郑州市\", 410102: \"中原区\", 410103: \"二七区\", 410104: \"管城回族区\", 410105: \"金水区\", 410106: \"上街区\", 410108: \"惠济区\", 410122: \"中牟县\", 410181: \"巩义市\", 410182: \"荥阳市\", 410183: \"新密市\", 410184: \"新郑市\", 410185: \"登封市\", 410188: \"其它区\", 410200: \"开封市\", 410202: \"龙亭区\", 410203: \"顺河回族区\", 410204: \"鼓楼区\", 410205: \"禹王台区\", 410211: \"金明区\", 410221: \"杞县\", 410222: \"通许县\", 410223: \"尉氏县\", 410224: \"开封县\", 410225: \"兰考县\", 410226: \"其它区\", 410300: \"洛阳市\", 410302: \"老城区\", 410303: \"西工区\", 410304: \"瀍河回族区\", 410305: \"涧西区\", 410306: \"吉利区\", 410307: \"洛龙区\", 410322: \"孟津县\", 410323: \"新安县\", 410324: \"栾川县\", 410325: \"嵩县\", 410326: \"汝阳县\", 410327: \"宜阳县\", 410328: \"洛宁县\", 410329: \"伊川县\", 410381: \"偃师市\", 410400: \"平顶山市\", 410402: \"新华区\", 410403: \"卫东区\", 410404: \"石龙区\", 410411: \"湛河区\", 410421: \"宝丰县\", 410422: \"叶县\", 410423: \"鲁山县\", 410425: \"郏县\", 410481: \"舞钢市\", 410482: \"汝州市\", 410483: \"其它区\", 410500: \"安阳市\", 410502: \"文峰区\", 410503: \"北关区\", 410505: \"殷都区\", 410506: \"龙安区\", 410522: \"安阳县\", 410523: \"汤阴县\", 410526: \"滑县\", 410527: \"内黄县\", 410581: \"林州市\", 410582: \"其它区\", 410600: \"鹤壁市\", 410602: \"鹤山区\", 410603: \"山城区\", 410611: \"淇滨区\", 410621: \"浚县\", 410622: \"淇县\", 410623: \"其它区\", 410700: \"新乡市\", 410702: \"红旗区\", 410703: \"卫滨区\", 410704: \"凤泉区\", 410711: \"牧野区\", 410721: \"新乡县\", 410724: \"获嘉县\", 410725: \"原阳县\", 410726: \"延津县\", 410727: \"封丘县\", 410728: \"长垣县\", 410781: \"卫辉市\", 410782: \"辉县市\", 410783: \"其它区\", 410800: \"焦作市\", 410802: \"解放区\", 410803: \"中站区\", 410804: \"马村区\", 410811: \"山阳区\", 410821: \"修武县\", 410822: \"博爱县\", 410823: \"武陟县\", 410825: \"温县\", 410881: \"济源市\", 410882: \"沁阳市\", 410883: \"孟州市\", 410884: \"其它区\", 410900: \"濮阳市\", 410902: \"华龙区\", 410922: \"清丰县\", 410923: \"南乐县\", 410926: \"范县\", 410927: \"台前县\", 410928: \"濮阳县\", 410929: \"其它区\", 411000: \"许昌市\", 411002: \"魏都区\", 411023: \"许昌县\", 411024: \"鄢陵县\", 411025: \"襄城县\", 411081: \"禹州市\", 411082: \"长葛市\", 411083: \"其它区\", 411100: \"漯河市\", 411102: \"源汇区\", 411103: \"郾城区\", 411104: \"召陵区\", 411121: \"舞阳县\", 411122: \"临颍县\", 411123: \"其它区\", 411200: \"三门峡市\", 411202: \"湖滨区\", 411221: \"渑池县\", 411222: \"陕县\", 411224: \"卢氏县\", 411281: \"义马市\", 411282: \"灵宝市\", 411283: \"其它区\", 411300: \"南阳市\", 411302: \"宛城区\", 411303: \"卧龙区\", 411321: \"南召县\", 411322: \"方城县\", 411323: \"西峡县\", 411324: \"镇平县\", 411325: \"内乡县\", 411326: \"淅川县\", 411327: \"社旗县\", 411328: \"唐河县\", 411329: \"新野县\", 411330: \"桐柏县\", 411381: \"邓州市\", 411382: \"其它区\", 411400: \"商丘市\", 411402: \"梁园区\", 411403: \"睢阳区\", 411421: \"民权县\", 411422: \"睢县\", 411423: \"宁陵县\", 411424: \"柘城县\", 411425: \"虞城县\", 411426: \"夏邑县\", 411481: \"永城市\", 411482: \"其它区\", 411500: \"信阳市\", 411502: \"浉河区\", 411503: \"平桥区\", 411521: \"罗山县\", 411522: \"光山县\", 411523: \"新县\", 411524: \"商城县\", 411525: \"固始县\", 411526: \"潢川县\", 411527: \"淮滨县\", 411528: \"息县\", 411529: \"其它区\", 411600: \"周口市\", 411602: \"川汇区\", 411621: \"扶沟县\", 411622: \"西华县\", 411623: \"商水县\", 411624: \"沈丘县\", 411625: \"郸城县\", 411626: \"淮阳县\", 411627: \"太康县\", 411628: \"鹿邑县\", 411681: \"项城市\", 411682: \"其它区\", 411700: \"驻马店市\", 411702: \"驿城区\", 411721: \"西平县\", 411722: \"上蔡县\", 411723: \"平舆县\", 411724: \"正阳县\", 411725: \"确山县\", 411726: \"泌阳县\", 411727: \"汝南县\", 411728: \"遂平县\", 411729: \"新蔡县\", 411730: \"其它区\", 420000: \"湖北省\", 420100: \"武汉市\", 420102: \"江岸区\", 420103: \"江汉区\", 420104: \"硚口区\", 420105: \"汉阳区\", 420106: \"武昌区\", 420107: \"青山区\", 420111: \"洪山区\", 420112: \"东西湖区\", 420113: \"汉南区\", 420114: \"蔡甸区\", 420115: \"江夏区\", 420116: \"黄陂区\", 420117: \"新洲区\", 420118: \"其它区\", 420200: \"黄石市\", 420202: \"黄石港区\", 420203: \"西塞山区\", 420204: \"下陆区\", 420205: \"铁山区\", 420222: \"阳新县\", 420281: \"大冶市\", 420282: \"其它区\", 420300: \"十堰市\", 420302: \"茅箭区\", 420303: \"张湾区\", 420321: \"郧县\", 420322: \"郧西县\", 420323: \"竹山县\", 420324: \"竹溪县\", 420325: \"房县\", 420381: \"丹江口市\", 420383: \"其它区\", 420500: \"宜昌市\", 420502: \"西陵区\", 420503: \"伍家岗区\", 420504: \"点军区\", 420505: \"猇亭区\", 420506: \"夷陵区\", 420525: \"远安县\", 420526: \"兴山县\", 420527: \"秭归县\", 420528: \"长阳土家族自治县\", 420529: \"五峰土家族自治县\", 420581: \"宜都市\", 420582: \"当阳市\", 420583: \"枝江市\", 420584: \"其它区\", 420600: \"襄阳市\", 420602: \"襄城区\", 420606: \"樊城区\", 420607: \"襄州区\", 420624: \"南漳县\", 420625: \"谷城县\", 420626: \"保康县\", 420682: \"老河口市\", 420683: \"枣阳市\", 420684: \"宜城市\", 420685: \"其它区\", 420700: \"鄂州市\", 420702: \"梁子湖区\", 420703: \"华容区\", 420704: \"鄂城区\", 420705: \"其它区\", 420800: \"荆门市\", 420802: \"东宝区\", 420804: \"掇刀区\", 420821: \"京山县\", 420822: \"沙洋县\", 420881: \"钟祥市\", 420882: \"其它区\", 420900: \"孝感市\", 420902: \"孝南区\", 420921: \"孝昌县\", 420922: \"大悟县\", 420923: \"云梦县\", 420981: \"应城市\", 420982: \"安陆市\", 420984: \"汉川市\", 420985: \"其它区\", 421000: \"荆州市\", 421002: \"沙市区\", 421003: \"荆州区\", 421022: \"公安县\", 421023: \"监利县\", 421024: \"江陵县\", 421081: \"石首市\", 421083: \"洪湖市\", 421087: \"松滋市\", 421088: \"其它区\", 421100: \"黄冈市\", 421102: \"黄州区\", 421121: \"团风县\", 421122: \"红安县\", 421123: \"罗田县\", 421124: \"英山县\", 421125: \"浠水县\", 421126: \"蕲春县\", 421127: \"黄梅县\", 421181: \"麻城市\", 421182: \"武穴市\", 421183: \"其它区\", 421200: \"咸宁市\", 421202: \"咸安区\", 421221: \"嘉鱼县\", 421222: \"通城县\", 421223: \"崇阳县\", 421224: \"通山县\", 421281: \"赤壁市\", 421283: \"其它区\", 421300: \"随州市\", 421302: \"曾都区\", 421321: \"随县\", 421381: \"广水市\", 421382: \"其它区\", 422800: \"恩施土家族苗族自治州\", 422801: \"恩施市\", 422802: \"利川市\", 422822: \"建始县\", 422823: \"巴东县\", 422825: \"宣恩县\", 422826: \"咸丰县\", 422827: \"来凤县\", 422828: \"鹤峰县\", 422829: \"其它区\", 429004: \"仙桃市\", 429005: \"潜江市\", 429006: \"天门市\", 429021: \"神农架林区\", 430000: \"湖南省\", 430100: \"长沙市\", 430102: \"芙蓉区\", 430103: \"天心区\", 430104: \"岳麓区\", 430105: \"开福区\", 430111: \"雨花区\", 430121: \"长沙县\", 430122: \"望城区\", 430124: \"宁乡县\", 430181: \"浏阳市\", 430182: \"其它区\", 430200: \"株洲市\", 430202: \"荷塘区\", 430203: \"芦淞区\", 430204: \"石峰区\", 430211: \"天元区\", 430221: \"株洲县\", 430223: \"攸县\", 430224: \"茶陵县\", 430225: \"炎陵县\", 430281: \"醴陵市\", 430282: \"其它区\", 430300: \"湘潭市\", 430302: \"雨湖区\", 430304: \"岳塘区\", 430321: \"湘潭县\", 430381: \"湘乡市\", 430382: \"韶山市\", 430383: \"其它区\", 430400: \"衡阳市\", 430405: \"珠晖区\", 430406: \"雁峰区\", 430407: \"石鼓区\", 430408: \"蒸湘区\", 430412: \"南岳区\", 430421: \"衡阳县\", 430422: \"衡南县\", 430423: \"衡山县\", 430424: \"衡东县\", 430426: \"祁东县\", 430481: \"耒阳市\", 430482: \"常宁市\", 430483: \"其它区\", 430500: \"邵阳市\", 430502: \"双清区\", 430503: \"大祥区\", 430511: \"北塔区\", 430521: \"邵东县\", 430522: \"新邵县\", 430523: \"邵阳县\", 430524: \"隆回县\", 430525: \"洞口县\", 430527: \"绥宁县\", 430528: \"新宁县\", 430529: \"城步苗族自治县\", 430581: \"武冈市\", 430582: \"其它区\", 430600: \"岳阳市\", 430602: \"岳阳楼区\", 430603: \"云溪区\", 430611: \"君山区\", 430621: \"岳阳县\", 430623: \"华容县\", 430624: \"湘阴县\", 430626: \"平江县\", 430681: \"汨罗市\", 430682: \"临湘市\", 430683: \"其它区\", 430700: \"常德市\", 430702: \"武陵区\", 430703: \"鼎城区\", 430721: \"安乡县\", 430722: \"汉寿县\", 430723: \"澧县\", 430724: \"临澧县\", 430725: \"桃源县\", 430726: \"石门县\", 430781: \"津市市\", 430782: \"其它区\", 430800: \"张家界市\", 430802: \"永定区\", 430811: \"武陵源区\", 430821: \"慈利县\", 430822: \"桑植县\", 430823: \"其它区\", 430900: \"益阳市\", 430902: \"资阳区\", 430903: \"赫山区\", 430921: \"南县\", 430922: \"桃江县\", 430923: \"安化县\", 430981: \"沅江市\", 430982: \"其它区\", 431000: \"郴州市\", 431002: \"北湖区\", 431003: \"苏仙区\", 431021: \"桂阳县\", 431022: \"宜章县\", 431023: \"永兴县\", 431024: \"嘉禾县\", 431025: \"临武县\", 431026: \"汝城县\", 431027: \"桂东县\", 431028: \"安仁县\", 431081: \"资兴市\", 431082: \"其它区\", 431100: \"永州市\", 431102: \"零陵区\", 431103: \"冷水滩区\", 431121: \"祁阳县\", 431122: \"东安县\", 431123: \"双牌县\", 431124: \"道县\", 431125: \"江永县\", 431126: \"宁远县\", 431127: \"蓝山县\", 431128: \"新田县\", 431129: \"江华瑶族自治县\", 431130: \"其它区\", 431200: \"怀化市\", 431202: \"鹤城区\", 431221: \"中方县\", 431222: \"沅陵县\", 431223: \"辰溪县\", 431224: \"溆浦县\", 431225: \"会同县\", 431226: \"麻阳苗族自治县\", 431227: \"新晃侗族自治县\", 431228: \"芷江侗族自治县\", 431229: \"靖州苗族侗族自治县\", 431230: \"通道侗族自治县\", 431281: \"洪江市\", 431282: \"其它区\", 431300: \"娄底市\", 431302: \"娄星区\", 431321: \"双峰县\", 431322: \"新化县\", 431381: \"冷水江市\", 431382: \"涟源市\", 431383: \"其它区\", 433100: \"湘西土家族苗族自治州\", 433101: \"吉首市\", 433122: \"泸溪县\", 433123: \"凤凰县\", 433124: \"花垣县\", 433125: \"保靖县\", 433126: \"古丈县\", 433127: \"永顺县\", 433130: \"龙山县\", 433131: \"其它区\", 440000: \"广东省\", 440100: \"广州市\", 440103: \"荔湾区\", 440104: \"越秀区\", 440105: \"海珠区\", 440106: \"天河区\", 440111: \"白云区\", 440112: \"黄埔区\", 440113: \"番禺区\", 440114: \"花都区\", 440115: \"南沙区\", 440116: \"萝岗区\", 440183: \"增城市\", 440184: \"从化市\", 440189: \"其它区\", 440200: \"韶关市\", 440203: \"武江区\", 440204: \"浈江区\", 440205: \"曲江区\", 440222: \"始兴县\", 440224: \"仁化县\", 440229: \"翁源县\", 440232: \"乳源瑶族自治县\", 440233: \"新丰县\", 440281: \"乐昌市\", 440282: \"南雄市\", 440283: \"其它区\", 440300: \"深圳市\", 440303: \"罗湖区\", 440304: \"福田区\", 440305: \"南山区\", 440306: \"宝安区\", 440307: \"龙岗区\", 440308: \"盐田区\", 440309: \"其它区\", 440320: \"光明新区\", 440321: \"坪山新区\", 440322: \"大鹏新区\", 440323: \"龙华新区\", 440400: \"珠海市\", 440402: \"香洲区\", 440403: \"斗门区\", 440404: \"金湾区\", 440488: \"其它区\", 440500: \"汕头市\", 440507: \"龙湖区\", 440511: \"金平区\", 440512: \"濠江区\", 440513: \"潮阳区\", 440514: \"潮南区\", 440515: \"澄海区\", 440523: \"南澳县\", 440524: \"其它区\", 440600: \"佛山市\", 440604: \"禅城区\", 440605: \"南海区\", 440606: \"顺德区\", 440607: \"三水区\", 440608: \"高明区\", 440609: \"其它区\", 440700: \"江门市\", 440703: \"蓬江区\", 440704: \"江海区\", 440705: \"新会区\", 440781: \"台山市\", 440783: \"开平市\", 440784: \"鹤山市\", 440785: \"恩平市\", 440786: \"其它区\", 440800: \"湛江市\", 440802: \"赤坎区\", 440803: \"霞山区\", 440804: \"坡头区\", 440811: \"麻章区\", 440823: \"遂溪县\", 440825: \"徐闻县\", 440881: \"廉江市\", 440882: \"雷州市\", 440883: \"吴川市\", 440884: \"其它区\", 440900: \"茂名市\", 440902: \"茂南区\", 440903: \"茂港区\", 440923: \"电白县\", 440981: \"高州市\", 440982: \"化州市\", 440983: \"信宜市\", 440984: \"其它区\", 441200: \"肇庆市\", 441202: \"端州区\", 441203: \"鼎湖区\", 441223: \"广宁县\", 441224: \"怀集县\", 441225: \"封开县\", 441226: \"德庆县\", 441283: \"高要市\", 441284: \"四会市\", 441285: \"其它区\", 441300: \"惠州市\", 441302: \"惠城区\", 441303: \"惠阳区\", 441322: \"博罗县\", 441323: \"惠东县\", 441324: \"龙门县\", 441325: \"其它区\", 441400: \"梅州市\", 441402: \"梅江区\", 441421: \"梅县\", 441422: \"大埔县\", 441423: \"丰顺县\", 441424: \"五华县\", 441426: \"平远县\", 441427: \"蕉岭县\", 441481: \"兴宁市\", 441482: \"其它区\", 441500: \"汕尾市\", 441502: \"城区\", 441521: \"海丰县\", 441523: \"陆河县\", 441581: \"陆丰市\", 441582: \"其它区\", 441600: \"河源市\", 441602: \"源城区\", 441621: \"紫金县\", 441622: \"龙川县\", 441623: \"连平县\", 441624: \"和平县\", 441625: \"东源县\", 441626: \"其它区\", 441700: \"阳江市\", 441702: \"江城区\", 441721: \"阳西县\", 441723: \"阳东县\", 441781: \"阳春市\", 441782: \"其它区\", 441800: \"清远市\", 441802: \"清城区\", 441821: \"佛冈县\", 441823: \"阳山县\", 441825: \"连山壮族瑶族自治县\", 441826: \"连南瑶族自治县\", 441827: \"清新区\", 441881: \"英德市\", 441882: \"连州市\", 441883: \"其它区\", 441900: \"东莞市\", 442000: \"中山市\", 442101: \"东沙群岛\", 445100: \"潮州市\", 445102: \"湘桥区\", 445121: \"潮安区\", 445122: \"饶平县\", 445186: \"其它区\", 445200: \"揭阳市\", 445202: \"榕城区\", 445221: \"揭东区\", 445222: \"揭西县\", 445224: \"惠来县\", 445281: \"普宁市\", 445285: \"其它区\", 445300: \"云浮市\", 445302: \"云城区\", 445321: \"新兴县\", 445322: \"郁南县\", 445323: \"云安县\", 445381: \"罗定市\", 445382: \"其它区\", 450000: \"广西壮族自治区\", 450100: \"南宁市\", 450102: \"兴宁区\", 450103: \"青秀区\", 450105: \"江南区\", 450107: \"西乡塘区\", 450108: \"良庆区\", 450109: \"邕宁区\", 450122: \"武鸣县\", 450123: \"隆安县\", 450124: \"马山县\", 450125: \"上林县\", 450126: \"宾阳县\", 450127: \"横县\", 450128: \"其它区\", 450200: \"柳州市\", 450202: \"城中区\", 450203: \"鱼峰区\", 450204: \"柳南区\", 450205: \"柳北区\", 450221: \"柳江县\", 450222: \"柳城县\", 450223: \"鹿寨县\", 450224: \"融安县\", 450225: \"融水苗族自治县\", 450226: \"三江侗族自治县\", 450227: \"其它区\", 450300: \"桂林市\", 450302: \"秀峰区\", 450303: \"叠彩区\", 450304: \"象山区\", 450305: \"七星区\", 450311: \"雁山区\", 450321: \"阳朔县\", 450322: \"临桂区\", 450323: \"灵川县\", 450324: \"全州县\", 450325: \"兴安县\", 450326: \"永福县\", 450327: \"灌阳县\", 450328: \"龙胜各族自治县\", 450329: \"资源县\", 450330: \"平乐县\", 450331: \"荔浦县\", 450332: \"恭城瑶族自治县\", 450333: \"其它区\", 450400: \"梧州市\", 450403: \"万秀区\", 450405: \"长洲区\", 450406: \"龙圩区\", 450421: \"苍梧县\", 450422: \"藤县\", 450423: \"蒙山县\", 450481: \"岑溪市\", 450482: \"其它区\", 450500: \"北海市\", 450502: \"海城区\", 450503: \"银海区\", 450512: \"铁山港区\", 450521: \"合浦县\", 450522: \"其它区\", 450600: \"防城港市\", 450602: \"港口区\", 450603: \"防城区\", 450621: \"上思县\", 450681: \"东兴市\", 450682: \"其它区\", 450700: \"钦州市\", 450702: \"钦南区\", 450703: \"钦北区\", 450721: \"灵山县\", 450722: \"浦北县\", 450723: \"其它区\", 450800: \"贵港市\", 450802: \"港北区\", 450803: \"港南区\", 450804: \"覃塘区\", 450821: \"平南县\", 450881: \"桂平市\", 450882: \"其它区\", 450900: \"玉林市\", 450902: \"玉州区\", 450903: \"福绵区\", 450921: \"容县\", 450922: \"陆川县\", 450923: \"博白县\", 450924: \"兴业县\", 450981: \"北流市\", 450982: \"其它区\", 451000: \"百色市\", 451002: \"右江区\", 451021: \"田阳县\", 451022: \"田东县\", 451023: \"平果县\", 451024: \"德保县\", 451025: \"靖西县\", 451026: \"那坡县\", 451027: \"凌云县\", 451028: \"乐业县\", 451029: \"田林县\", 451030: \"西林县\", 451031: \"隆林各族自治县\", 451032: \"其它区\", 451100: \"贺州市\", 451102: \"八步区\", 451119: \"平桂管理区\", 451121: \"昭平县\", 451122: \"钟山县\", 451123: \"富川瑶族自治县\", 451124: \"其它区\", 451200: \"河池市\", 451202: \"金城江区\", 451221: \"南丹县\", 451222: \"天峨县\", 451223: \"凤山县\", 451224: \"东兰县\", 451225: \"罗城仫佬族自治县\", 451226: \"环江毛南族自治县\", 451227: \"巴马瑶族自治县\", 451228: \"都安瑶族自治县\", 451229: \"大化瑶族自治县\", 451281: \"宜州市\", 451282: \"其它区\", 451300: \"来宾市\", 451302: \"兴宾区\", 451321: \"忻城县\", 451322: \"象州县\", 451323: \"武宣县\", 451324: \"金秀瑶族自治县\", 451381: \"合山市\", 451382: \"其它区\", 451400: \"崇左市\", 451402: \"江州区\", 451421: \"扶绥县\", 451422: \"宁明县\", 451423: \"龙州县\", 451424: \"大新县\", 451425: \"天等县\", 451481: \"凭祥市\", 451482: \"其它区\", 460000: \"海南省\", 460100: \"海口市\", 460105: \"秀英区\", 460106: \"龙华区\", 460107: \"琼山区\", 460108: \"美兰区\", 460109: \"其它区\", 460200: \"三亚市\", 460300: \"三沙市\", 460321: \"西沙群岛\", 460322: \"南沙群岛\", 460323: \"中沙群岛的岛礁及其海域\", 469001: \"五指山市\", 469002: \"琼海市\", 469003: \"儋州市\", 469005: \"文昌市\", 469006: \"万宁市\", 469007: \"东方市\", 469025: \"定安县\", 469026: \"屯昌县\", 469027: \"澄迈县\", 469028: \"临高县\", 469030: \"白沙黎族自治县\", 469031: \"昌江黎族自治县\", 469033: \"乐东黎族自治县\", 469034: \"陵水黎族自治县\", 469035: \"保亭黎族苗族自治县\", 469036: \"琼中黎族苗族自治县\", 471005: \"其它区\", 500000: \"重庆\", 500100: \"重庆市\", 500101: \"万州区\", 500102: \"涪陵区\", 500103: \"渝中区\", 500104: \"大渡口区\", 500105: \"江北区\", 500106: \"沙坪坝区\", 500107: \"九龙坡区\", 500108: \"南岸区\", 500109: \"北碚区\", 500110: \"万盛区\", 500111: \"双桥区\", 500112: \"渝北区\", 500113: \"巴南区\", 500114: \"黔江区\", 500115: \"长寿区\", 500222: \"綦江区\", 500223: \"潼南县\", 500224: \"铜梁县\", 500225: \"大足区\", 500226: \"荣昌县\", 500227: \"璧山县\", 500228: \"梁平县\", 500229: \"城口县\", 500230: \"丰都县\", 500231: \"垫江县\", 500232: \"武隆县\", 500233: \"忠县\", 500234: \"开县\", 500235: \"云阳县\", 500236: \"奉节县\", 500237: \"巫山县\", 500238: \"巫溪县\", 500240: \"石柱土家族自治县\", 500241: \"秀山土家族苗族自治县\", 500242: \"酉阳土家族苗族自治县\", 500243: \"彭水苗族土家族自治县\", 500381: \"江津区\", 500382: \"合川区\", 500383: \"永川区\", 500384: \"南川区\", 500385: \"其它区\", 510000: \"四川省\", 510100: \"成都市\", 510104: \"锦江区\", 510105: \"青羊区\", 510106: \"金牛区\", 510107: \"武侯区\", 510108: \"成华区\", 510112: \"龙泉驿区\", 510113: \"青白江区\", 510114: \"新都区\", 510115: \"温江区\", 510121: \"金堂县\", 510122: \"双流县\", 510124: \"郫县\", 510129: \"大邑县\", 510131: \"蒲江县\", 510132: \"新津县\", 510181: \"都江堰市\", 510182: \"彭州市\", 510183: \"邛崃市\", 510184: \"崇州市\", 510185: \"其它区\", 510300: \"自贡市\", 510302: \"自流井区\", 510303: \"贡井区\", 510304: \"大安区\", 510311: \"沿滩区\", 510321: \"荣县\", 510322: \"富顺县\", 510323: \"其它区\", 510400: \"攀枝花市\", 510402: \"东区\", 510403: \"西区\", 510411: \"仁和区\", 510421: \"米易县\", 510422: \"盐边县\", 510423: \"其它区\", 510500: \"泸州市\", 510502: \"江阳区\", 510503: \"纳溪区\", 510504: \"龙马潭区\", 510521: \"泸县\", 510522: \"合江县\", 510524: \"叙永县\", 510525: \"古蔺县\", 510526: \"其它区\", 510600: \"德阳市\", 510603: \"旌阳区\", 510623: \"中江县\", 510626: \"罗江县\", 510681: \"广汉市\", 510682: \"什邡市\", 510683: \"绵竹市\", 510684: \"其它区\", 510700: \"绵阳市\", 510703: \"涪城区\", 510704: \"游仙区\", 510722: \"三台县\", 510723: \"盐亭县\", 510724: \"安县\", 510725: \"梓潼县\", 510726: \"北川羌族自治县\", 510727: \"平武县\", 510781: \"江油市\", 510782: \"其它区\", 510800: \"广元市\", 510802: \"利州区\", 510811: \"昭化区\", 510812: \"朝天区\", 510821: \"旺苍县\", 510822: \"青川县\", 510823: \"剑阁县\", 510824: \"苍溪县\", 510825: \"其它区\", 510900: \"遂宁市\", 510903: \"船山区\", 510904: \"安居区\", 510921: \"蓬溪县\", 510922: \"射洪县\", 510923: \"大英县\", 510924: \"其它区\", 511000: \"内江市\", 511002: \"市中区\", 511011: \"东兴区\", 511024: \"威远县\", 511025: \"资中县\", 511028: \"隆昌县\", 511029: \"其它区\", 511100: \"乐山市\", 511102: \"市中区\", 511111: \"沙湾区\", 511112: \"五通桥区\", 511113: \"金口河区\", 511123: \"犍为县\", 511124: \"井研县\", 511126: \"夹江县\", 511129: \"沐川县\", 511132: \"峨边彝族自治县\", 511133: \"马边彝族自治县\", 511181: \"峨眉山市\", 511182: \"其它区\", 511300: \"南充市\", 511302: \"顺庆区\", 511303: \"高坪区\", 511304: \"嘉陵区\", 511321: \"南部县\", 511322: \"营山县\", 511323: \"蓬安县\", 511324: \"仪陇县\", 511325: \"西充县\", 511381: \"阆中市\", 511382: \"其它区\", 511400: \"眉山市\", 511402: \"东坡区\", 511421: \"仁寿县\", 511422: \"彭山县\", 511423: \"洪雅县\", 511424: \"丹棱县\", 511425: \"青神县\", 511426: \"其它区\", 511500: \"宜宾市\", 511502: \"翠屏区\", 511521: \"宜宾县\", 511522: \"南溪区\", 511523: \"江安县\", 511524: \"长宁县\", 511525: \"高县\", 511526: \"珙县\", 511527: \"筠连县\", 511528: \"兴文县\", 511529: \"屏山县\", 511530: \"其它区\", 511600: \"广安市\", 511602: \"广安区\", 511603: \"前锋区\", 511621: \"岳池县\", 511622: \"武胜县\", 511623: \"邻水县\", 511681: \"华蓥市\", 511683: \"其它区\", 511700: \"达州市\", 511702: \"通川区\", 511721: \"达川区\", 511722: \"宣汉县\", 511723: \"开江县\", 511724: \"大竹县\", 511725: \"渠县\", 511781: \"万源市\", 511782: \"其它区\", 511800: \"雅安市\", 511802: \"雨城区\", 511821: \"名山区\", 511822: \"荥经县\", 511823: \"汉源县\", 511824: \"石棉县\", 511825: \"天全县\", 511826: \"芦山县\", 511827: \"宝兴县\", 511828: \"其它区\", 511900: \"巴中市\", 511902: \"巴州区\", 511903: \"恩阳区\", 511921: \"通江县\", 511922: \"南江县\", 511923: \"平昌县\", 511924: \"其它区\", 512000: \"资阳市\", 512002: \"雁江区\", 512021: \"安岳县\", 512022: \"乐至县\", 512081: \"简阳市\", 512082: \"其它区\", 513200: \"阿坝藏族羌族自治州\", 513221: \"汶川县\", 513222: \"理县\", 513223: \"茂县\", 513224: \"松潘县\", 513225: \"九寨沟县\", 513226: \"金川县\", 513227: \"小金县\", 513228: \"黑水县\", 513229: \"马尔康县\", 513230: \"壤塘县\", 513231: \"阿坝县\", 513232: \"若尔盖县\", 513233: \"红原县\", 513234: \"其它区\", 513300: \"甘孜藏族自治州\", 513321: \"康定县\", 513322: \"泸定县\", 513323: \"丹巴县\", 513324: \"九龙县\", 513325: \"雅江县\", 513326: \"道孚县\", 513327: \"炉霍县\", 513328: \"甘孜县\", 513329: \"新龙县\", 513330: \"德格县\", 513331: \"白玉县\", 513332: \"石渠县\", 513333: \"色达县\", 513334: \"理塘县\", 513335: \"巴塘县\", 513336: \"乡城县\", 513337: \"稻城县\", 513338: \"得荣县\", 513339: \"其它区\", 513400: \"凉山彝族自治州\", 513401: \"西昌市\", 513422: \"木里藏族自治县\", 513423: \"盐源县\", 513424: \"德昌县\", 513425: \"会理县\", 513426: \"会东县\", 513427: \"宁南县\", 513428: \"普格县\", 513429: \"布拖县\", 513430: \"金阳县\", 513431: \"昭觉县\", 513432: \"喜德县\", 513433: \"冕宁县\", 513434: \"越西县\", 513435: \"甘洛县\", 513436: \"美姑县\", 513437: \"雷波县\", 513438: \"其它区\", 520000: \"贵州省\", 520100: \"贵阳市\", 520102: \"南明区\", 520103: \"云岩区\", 520111: \"花溪区\", 520112: \"乌当区\", 520113: \"白云区\", 520121: \"开阳县\", 520122: \"息烽县\", 520123: \"修文县\", 520151: \"观山湖区\", 520181: \"清镇市\", 520182: \"其它区\", 520200: \"六盘水市\", 520201: \"钟山区\", 520203: \"六枝特区\", 520221: \"水城县\", 520222: \"盘县\", 520223: \"其它区\", 520300: \"遵义市\", 520302: \"红花岗区\", 520303: \"汇川区\", 520321: \"遵义县\", 520322: \"桐梓县\", 520323: \"绥阳县\", 520324: \"正安县\", 520325: \"道真仡佬族苗族自治县\", 520326: \"务川仡佬族苗族自治县\", 520327: \"凤冈县\", 520328: \"湄潭县\", 520329: \"余庆县\", 520330: \"习水县\", 520381: \"赤水市\", 520382: \"仁怀市\", 520383: \"其它区\", 520400: \"安顺市\", 520402: \"西秀区\", 520421: \"平坝县\", 520422: \"普定县\", 520423: \"镇宁布依族苗族自治县\", 520424: \"关岭布依族苗族自治县\", 520425: \"紫云苗族布依族自治县\", 520426: \"其它区\", 522200: \"铜仁市\", 522201: \"碧江区\", 522222: \"江口县\", 522223: \"玉屏侗族自治县\", 522224: \"石阡县\", 522225: \"思南县\", 522226: \"印江土家族苗族自治县\", 522227: \"德江县\", 522228: \"沿河土家族自治县\", 522229: \"松桃苗族自治县\", 522230: \"万山区\",\n\t\t\t522231: \"其它区\", 522300: \"黔西南布依族苗族自治州\", 522301: \"兴义市\", 522322: \"兴仁县\", 522323: \"普安县\", 522324: \"晴隆县\", 522325: \"贞丰县\", 522326: \"望谟县\", 522327: \"册亨县\", 522328: \"安龙县\", 522329: \"其它区\", 522400: \"毕节市\", 522401: \"七星关区\", 522422: \"大方县\", 522423: \"黔西县\", 522424: \"金沙县\", 522425: \"织金县\", 522426: \"纳雍县\", 522427: \"威宁彝族回族苗族自治县\", 522428: \"赫章县\", 522429: \"其它区\", 522600: \"黔东南苗族侗族自治州\", 522601: \"凯里市\", 522622: \"黄平县\", 522623: \"施秉县\", 522624: \"三穗县\", 522625: \"镇远县\", 522626: \"岑巩县\", 522627: \"天柱县\", 522628: \"锦屏县\", 522629: \"剑河县\", 522630: \"台江县\", 522631: \"黎平县\", 522632: \"榕江县\", 522633: \"从江县\", 522634: \"雷山县\", 522635: \"麻江县\", 522636: \"丹寨县\", 522637: \"其它区\", 522700: \"黔南布依族苗族自治州\", 522701: \"都匀市\", 522702: \"福泉市\", 522722: \"荔波县\", 522723: \"贵定县\", 522725: \"瓮安县\", 522726: \"独山县\", 522727: \"平塘县\", 522728: \"罗甸县\", 522729: \"长顺县\", 522730: \"龙里县\", 522731: \"惠水县\", 522732: \"三都水族自治县\", 522733: \"其它区\", 530000: \"云南省\", 530100: \"昆明市\", 530102: \"五华区\", 530103: \"盘龙区\", 530111: \"官渡区\", 530112: \"西山区\", 530113: \"东川区\", 530121: \"呈贡区\", 530122: \"晋宁县\", 530124: \"富民县\", 530125: \"宜良县\", 530126: \"石林彝族自治县\", 530127: \"嵩明县\", 530128: \"禄劝彝族苗族自治县\", 530129: \"寻甸回族彝族自治县\", 530181: \"安宁市\", 530182: \"其它区\", 530300: \"曲靖市\", 530302: \"麒麟区\", 530321: \"马龙县\", 530322: \"陆良县\", 530323: \"师宗县\", 530324: \"罗平县\", 530325: \"富源县\", 530326: \"会泽县\", 530328: \"沾益县\", 530381: \"宣威市\", 530382: \"其它区\", 530400: \"玉溪市\", 530402: \"红塔区\", 530421: \"江川县\", 530422: \"澄江县\", 530423: \"通海县\", 530424: \"华宁县\", 530425: \"易门县\", 530426: \"峨山彝族自治县\", 530427: \"新平彝族傣族自治县\", 530428: \"元江哈尼族彝族傣族自治县\", 530429: \"其它区\", 530500: \"保山市\", 530502: \"隆阳区\", 530521: \"施甸县\", 530522: \"腾冲县\", 530523: \"龙陵县\", 530524: \"昌宁县\", 530525: \"其它区\", 530600: \"昭通市\", 530602: \"昭阳区\", 530621: \"鲁甸县\", 530622: \"巧家县\", 530623: \"盐津县\", 530624: \"大关县\", 530625: \"永善县\", 530626: \"绥江县\", 530627: \"镇雄县\", 530628: \"彝良县\", 530629: \"威信县\", 530630: \"水富县\", 530631: \"其它区\", 530700: \"丽江市\", 530702: \"古城区\", 530721: \"玉龙纳西族自治县\", 530722: \"永胜县\", 530723: \"华坪县\", 530724: \"宁蒗彝族自治县\", 530725: \"其它区\", 530800: \"普洱市\", 530802: \"思茅区\", 530821: \"宁洱哈尼族彝族自治县\", 530822: \"墨江哈尼族自治县\", 530823: \"景东彝族自治县\", 530824: \"景谷傣族彝族自治县\", 530825: \"镇沅彝族哈尼族拉祜族自治县\", 530826: \"江城哈尼族彝族自治县\", 530827: \"孟连傣族拉祜族佤族自治县\", 530828: \"澜沧拉祜族自治县\", 530829: \"西盟佤族自治县\", 530830: \"其它区\", 530900: \"临沧市\", 530902: \"临翔区\", 530921: \"凤庆县\", 530922: \"云县\", 530923: \"永德县\", 530924: \"镇康县\", 530925: \"双江拉祜族佤族布朗族傣族自治县\", 530926: \"耿马傣族佤族自治县\", 530927: \"沧源佤族自治县\", 530928: \"其它区\", 532300: \"楚雄彝族自治州\", 532301: \"楚雄市\", 532322: \"双柏县\", 532323: \"牟定县\", 532324: \"南华县\", 532325: \"姚安县\", 532326: \"大姚县\", 532327: \"永仁县\", 532328: \"元谋县\", 532329: \"武定县\", 532331: \"禄丰县\", 532332: \"其它区\", 532500: \"红河哈尼族彝族自治州\", 532501: \"个旧市\", 532502: \"开远市\", 532522: \"蒙自市\", 532523: \"屏边苗族自治县\", 532524: \"建水县\", 532525: \"石屏县\", 532526: \"弥勒市\", 532527: \"泸西县\", 532528: \"元阳县\", 532529: \"红河县\", 532530: \"金平苗族瑶族傣族自治县\", 532531: \"绿春县\", 532532: \"河口瑶族自治县\", 532533: \"其它区\", 532600: \"文山壮族苗族自治州\", 532621: \"文山市\", 532622: \"砚山县\", 532623: \"西畴县\", 532624: \"麻栗坡县\", 532625: \"马关县\", 532626: \"丘北县\", 532627: \"广南县\", 532628: \"富宁县\", 532629: \"其它区\", 532800: \"西双版纳傣族自治州\", 532801: \"景洪市\", 532822: \"勐海县\", 532823: \"勐腊县\", 532824: \"其它区\", 532900: \"大理白族自治州\", 532901: \"大理市\", 532922: \"漾濞彝族自治县\", 532923: \"祥云县\", 532924: \"宾川县\", 532925: \"弥渡县\", 532926: \"南涧彝族自治县\", 532927: \"巍山彝族回族自治县\", 532928: \"永平县\", 532929: \"云龙县\", 532930: \"洱源县\", 532931: \"剑川县\", 532932: \"鹤庆县\", 532933: \"其它区\", 533100: \"德宏傣族景颇族自治州\", 533102: \"瑞丽市\", 533103: \"芒市\", 533122: \"梁河县\", 533123: \"盈江县\", 533124: \"陇川县\", 533125: \"其它区\", 533300: \"怒江傈僳族自治州\", 533321: \"泸水县\", 533323: \"福贡县\", 533324: \"贡山独龙族怒族自治县\", 533325: \"兰坪白族普米族自治县\", 533326: \"其它区\", 533400: \"迪庆藏族自治州\", 533421: \"香格里拉县\", 533422: \"德钦县\", 533423: \"维西傈僳族自治县\", 533424: \"其它区\", 540000: \"西藏自治区\", 540100: \"拉萨市\", 540102: \"城关区\", 540121: \"林周县\", 540122: \"当雄县\", 540123: \"尼木县\", 540124: \"曲水县\", 540125: \"堆龙德庆县\", 540126: \"达孜县\", 540127: \"墨竹工卡县\", 540128: \"其它区\", 542100: \"昌都地区\", 542121: \"昌都县\", 542122: \"江达县\", 542123: \"贡觉县\", 542124: \"类乌齐县\", 542125: \"丁青县\", 542126: \"察雅县\", 542127: \"八宿县\", 542128: \"左贡县\", 542129: \"芒康县\", 542132: \"洛隆县\", 542133: \"边坝县\", 542134: \"其它区\", 542200: \"山南地区\", 542221: \"乃东县\", 542222: \"扎囊县\", 542223: \"贡嘎县\", 542224: \"桑日县\", 542225: \"琼结县\", 542226: \"曲松县\", 542227: \"措美县\", 542228: \"洛扎县\", 542229: \"加查县\", 542231: \"隆子县\", 542232: \"错那县\", 542233: \"浪卡子县\", 542234: \"其它区\", 542300: \"日喀则地区\", 542301: \"日喀则市\", 542322: \"南木林县\", 542323: \"江孜县\", 542324: \"定日县\", 542325: \"萨迦县\", 542326: \"拉孜县\", 542327: \"昂仁县\", 542328: \"谢通门县\", 542329: \"白朗县\", 542330: \"仁布县\", 542331: \"康马县\", 542332: \"定结县\", 542333: \"仲巴县\", 542334: \"亚东县\", 542335: \"吉隆县\", 542336: \"聂拉木县\", 542337: \"萨嘎县\", 542338: \"岗巴县\", 542339: \"其它区\", 542400: \"那曲地区\", 542421: \"那曲县\", 542422: \"嘉黎县\", 542423: \"比如县\", 542424: \"聂荣县\", 542425: \"安多县\", 542426: \"申扎县\", 542427: \"索县\", 542428: \"班戈县\", 542429: \"巴青县\", 542430: \"尼玛县\", 542431: \"其它区\", 542432: \"双湖县\", 542500: \"阿里地区\", 542521: \"普兰县\", 542522: \"札达县\", 542523: \"噶尔县\", 542524: \"日土县\", 542525: \"革吉县\", 542526: \"改则县\", 542527: \"措勤县\", 542528: \"其它区\", 542600: \"林芝地区\", 542621: \"林芝县\", 542622: \"工布江达县\", 542623: \"米林县\", 542624: \"墨脱县\", 542625: \"波密县\", 542626: \"察隅县\", 542627: \"朗县\", 542628: \"其它区\", 610000: \"陕西省\", 610100: \"西安市\", 610102: \"新城区\", 610103: \"碑林区\", 610104: \"莲湖区\", 610111: \"灞桥区\", 610112: \"未央区\", 610113: \"雁塔区\", 610114: \"阎良区\", 610115: \"临潼区\", 610116: \"长安区\", 610122: \"蓝田县\", 610124: \"周至县\", 610125: \"户县\", 610126: \"高陵县\", 610127: \"其它区\", 610200: \"铜川市\", 610202: \"王益区\", 610203: \"印台区\", 610204: \"耀州区\", 610222: \"宜君县\", 610223: \"其它区\", 610300: \"宝鸡市\", 610302: \"渭滨区\", 610303: \"金台区\", 610304: \"陈仓区\", 610322: \"凤翔县\", 610323: \"岐山县\", 610324: \"扶风县\", 610326: \"眉县\", 610327: \"陇县\", 610328: \"千阳县\", 610329: \"麟游县\", 610330: \"凤县\", 610331: \"太白县\", 610332: \"其它区\", 610400: \"咸阳市\", 610402: \"秦都区\", 610403: \"杨陵区\", 610404: \"渭城区\", 610422: \"三原县\", 610423: \"泾阳县\", 610424: \"乾县\", 610425: \"礼泉县\", 610426: \"永寿县\", 610427: \"彬县\", 610428: \"长武县\", 610429: \"旬邑县\", 610430: \"淳化县\", 610431: \"武功县\", 610481: \"兴平市\", 610482: \"其它区\", 610500: \"渭南市\", 610502: \"临渭区\", 610521: \"华县\", 610522: \"潼关县\", 610523: \"大荔县\", 610524: \"合阳县\", 610525: \"澄城县\", 610526: \"蒲城县\", 610527: \"白水县\", 610528: \"富平县\", 610581: \"韩城市\", 610582: \"华阴市\", 610583: \"其它区\", 610600: \"延安市\", 610602: \"宝塔区\", 610621: \"延长县\", 610622: \"延川县\", 610623: \"子长县\", 610624: \"安塞县\", 610625: \"志丹县\", 610626: \"吴起县\", 610627: \"甘泉县\", 610628: \"富县\", 610629: \"洛川县\", 610630: \"宜川县\", 610631: \"黄龙县\", 610632: \"黄陵县\", 610633: \"其它区\", 610700: \"汉中市\", 610702: \"汉台区\", 610721: \"南郑县\", 610722: \"城固县\", 610723: \"洋县\", 610724: \"西乡县\", 610725: \"勉县\", 610726: \"宁强县\", 610727: \"略阳县\", 610728: \"镇巴县\", 610729: \"留坝县\", 610730: \"佛坪县\", 610731: \"其它区\", 610800: \"榆林市\", 610802: \"榆阳区\", 610821: \"神木县\", 610822: \"府谷县\", 610823: \"横山县\", 610824: \"靖边县\", 610825: \"定边县\", 610826: \"绥德县\", 610827: \"米脂县\", 610828: \"佳县\", 610829: \"吴堡县\", 610830: \"清涧县\", 610831: \"子洲县\", 610832: \"其它区\", 610900: \"安康市\", 610902: \"汉滨区\", 610921: \"汉阴县\", 610922: \"石泉县\", 610923: \"宁陕县\", 610924: \"紫阳县\", 610925: \"岚皋县\", 610926: \"平利县\", 610927: \"镇坪县\", 610928: \"旬阳县\", 610929: \"白河县\", 610930: \"其它区\", 611000: \"商洛市\", 611002: \"商州区\", 611021: \"洛南县\", 611022: \"丹凤县\", 611023: \"商南县\", 611024: \"山阳县\", 611025: \"镇安县\", 611026: \"柞水县\", 611027: \"其它区\", 620000: \"甘肃省\", 620100: \"兰州市\", 620102: \"城关区\", 620103: \"七里河区\", 620104: \"西固区\", 620105: \"安宁区\", 620111: \"红古区\", 620121: \"永登县\", 620122: \"皋兰县\", 620123: \"榆中县\", 620124: \"其它区\", 620200: \"嘉峪关市\", 620300: \"金昌市\", 620302: \"金川区\", 620321: \"永昌县\", 620322: \"其它区\", 620400: \"白银市\", 620402: \"白银区\", 620403: \"平川区\", 620421: \"靖远县\", 620422: \"会宁县\", 620423: \"景泰县\", 620424: \"其它区\", 620500: \"天水市\", 620502: \"秦州区\", 620503: \"麦积区\", 620521: \"清水县\", 620522: \"秦安县\", 620523: \"甘谷县\", 620524: \"武山县\", 620525: \"张家川回族自治县\", 620526: \"其它区\", 620600: \"武威市\", 620602: \"凉州区\", 620621: \"民勤县\", 620622: \"古浪县\", 620623: \"天祝藏族自治县\", 620624: \"其它区\", 620700: \"张掖市\", 620702: \"甘州区\", 620721: \"肃南裕固族自治县\", 620722: \"民乐县\", 620723: \"临泽县\", 620724: \"高台县\", 620725: \"山丹县\", 620726: \"其它区\", 620800: \"平凉市\", 620802: \"崆峒区\", 620821: \"泾川县\", 620822: \"灵台县\", 620823: \"崇信县\", 620824: \"华亭县\", 620825: \"庄浪县\", 620826: \"静宁县\", 620827: \"其它区\", 620900: \"酒泉市\", 620902: \"肃州区\", 620921: \"金塔县\", 620922: \"瓜州县\", 620923: \"肃北蒙古族自治县\", 620924: \"阿克塞哈萨克族自治县\", 620981: \"玉门市\", 620982: \"敦煌市\", 620983: \"其它区\", 621000: \"庆阳市\", 621002: \"西峰区\", 621021: \"庆城县\", 621022: \"环县\", 621023: \"华池县\", 621024: \"合水县\", 621025: \"正宁县\", 621026: \"宁县\", 621027: \"镇原县\", 621028: \"其它区\", 621100: \"定西市\", 621102: \"安定区\", 621121: \"通渭县\", 621122: \"陇西县\", 621123: \"渭源县\", 621124: \"临洮县\", 621125: \"漳县\", 621126: \"岷县\", 621127: \"其它区\", 621200: \"陇南市\", 621202: \"武都区\", 621221: \"成县\", 621222: \"文县\", 621223: \"宕昌县\", 621224: \"康县\", 621225: \"西和县\", 621226: \"礼县\", 621227: \"徽县\", 621228: \"两当县\", 621229: \"其它区\", 622900: \"临夏回族自治州\", 622901: \"临夏市\", 622921: \"临夏县\", 622922: \"康乐县\", 622923: \"永靖县\", 622924: \"广河县\", 622925: \"和政县\", 622926: \"东乡族自治县\", 622927: \"积石山保安族东乡族撒拉族自治县\", 622928: \"其它区\", 623000: \"甘南藏族自治州\", 623001: \"合作市\", 623021: \"临潭县\", 623022: \"卓尼县\", 623023: \"舟曲县\", 623024: \"迭部县\", 623025: \"玛曲县\", 623026: \"碌曲县\", 623027: \"夏河县\", 623028: \"其它区\", 630000: \"青海省\", 630100: \"西宁市\", 630102: \"城东区\", 630103: \"城中区\", 630104: \"城西区\", 630105: \"城北区\", 630121: \"大通回族土族自治县\", 630122: \"湟中县\", 630123: \"湟源县\", 630124: \"其它区\", 632100: \"海东市\", 632121: \"平安县\", 632122: \"民和回族土族自治县\", 632123: \"乐都区\", 632126: \"互助土族自治县\", 632127: \"化隆回族自治县\", 632128: \"循化撒拉族自治县\", 632129: \"其它区\", 632200: \"海北藏族自治州\", 632221: \"门源回族自治县\", 632222: \"祁连县\", 632223: \"海晏县\", 632224: \"刚察县\", 632225: \"其它区\", 632300: \"黄南藏族自治州\", 632321: \"同仁县\", 632322: \"尖扎县\", 632323: \"泽库县\", 632324: \"河南蒙古族自治县\", 632325: \"其它区\", 632500: \"海南藏族自治州\", 632521: \"共和县\", 632522: \"同德县\", 632523: \"贵德县\", 632524: \"兴海县\", 632525: \"贵南县\", 632526: \"其它区\", 632600: \"果洛藏族自治州\", 632621: \"玛沁县\", 632622: \"班玛县\", 632623: \"甘德县\", 632624: \"达日县\", 632625: \"久治县\", 632626: \"玛多县\", 632627: \"其它区\", 632700: \"玉树藏族自治州\", 632721: \"玉树市\", 632722: \"杂多县\", 632723: \"称多县\", 632724: \"治多县\", 632725: \"囊谦县\", 632726: \"曲麻莱县\", 632727: \"其它区\", 632800: \"海西蒙古族藏族自治州\", 632801: \"格尔木市\", 632802: \"德令哈市\", 632821: \"乌兰县\", 632822: \"都兰县\", 632823: \"天峻县\", 632824: \"其它区\", 640000: \"宁夏回族自治区\", 640100: \"银川市\", 640104: \"兴庆区\", 640105: \"西夏区\", 640106: \"金凤区\", 640121: \"永宁县\", 640122: \"贺兰县\", 640181: \"灵武市\", 640182: \"其它区\", 640200: \"石嘴山市\", 640202: \"大武口区\", 640205: \"惠农区\", 640221: \"平罗县\", 640222: \"其它区\", 640300: \"吴忠市\", 640302: \"利通区\", 640303: \"红寺堡区\", 640323: \"盐池县\", 640324: \"同心县\", 640381: \"青铜峡市\", 640382: \"其它区\", 640400: \"固原市\", 640402: \"原州区\", 640422: \"西吉县\", 640423: \"隆德县\", 640424: \"泾源县\", 640425: \"彭阳县\", 640426: \"其它区\", 640500: \"中卫市\", 640502: \"沙坡头区\", 640521: \"中宁县\", 640522: \"海原县\", 640523: \"其它区\", 650000: \"新疆维吾尔自治区\", 650100: \"乌鲁木齐市\", 650102: \"天山区\", 650103: \"沙依巴克区\", 650104: \"新市区\", 650105: \"水磨沟区\", 650106: \"头屯河区\", 650107: \"达坂城区\", 650109: \"米东区\", 650121: \"乌鲁木齐县\", 650122: \"其它区\", 650200: \"克拉玛依市\", 650202: \"独山子区\", 650203: \"克拉玛依区\", 650204: \"白碱滩区\", 650205: \"乌尔禾区\", 650206: \"其它区\", 652100: \"吐鲁番地区\", 652101: \"吐鲁番市\", 652122: \"鄯善县\", 652123: \"托克逊县\", 652124: \"其它区\", 652200: \"哈密地区\", 652201: \"哈密市\", 652222: \"巴里坤哈萨克自治县\", 652223: \"伊吾县\", 652224: \"其它区\", 652300: \"昌吉回族自治州\", 652301: \"昌吉市\", 652302: \"阜康市\", 652323: \"呼图壁县\", 652324: \"玛纳斯县\", 652325: \"奇台县\", 652327: \"吉木萨尔县\", 652328: \"木垒哈萨克自治县\", 652329: \"其它区\", 652700: \"博尔塔拉蒙古自治州\", 652701: \"博乐市\", 652702: \"阿拉山口市\", 652722: \"精河县\", 652723: \"温泉县\", 652724: \"其它区\", 652800: \"巴音郭楞蒙古自治州\", 652801: \"库尔勒市\", 652822: \"轮台县\", 652823: \"尉犁县\", 652824: \"若羌县\", 652825: \"且末县\", 652826: \"焉耆回族自治县\", 652827: \"和静县\", 652828: \"和硕县\", 652829: \"博湖县\", 652830: \"其它区\", 652900: \"阿克苏地区\", 652901: \"阿克苏市\", 652922: \"温宿县\", 652923: \"库车县\", 652924: \"沙雅县\", 652925: \"新和县\", 652926: \"拜城县\", 652927: \"乌什县\", 652928: \"阿瓦提县\", 652929: \"柯坪县\", 652930: \"其它区\", 653000: \"克孜勒苏柯尔克孜自治州\", 653001: \"阿图什市\", 653022: \"阿克陶县\", 653023: \"阿合奇县\", 653024: \"乌恰县\", 653025: \"其它区\", 653100: \"喀什地区\", 653101: \"喀什市\", 653121: \"疏附县\", 653122: \"疏勒县\", 653123: \"英吉沙县\", 653124: \"泽普县\", 653125: \"莎车县\", 653126: \"叶城县\", 653127: \"麦盖提县\", 653128: \"岳普湖县\", 653129: \"伽师县\", 653130: \"巴楚县\", 653131: \"塔什库尔干塔吉克自治县\", 653132: \"其它区\", 653200: \"和田地区\", 653201: \"和田市\", 653221: \"和田县\", 653222: \"墨玉县\", 653223: \"皮山县\", 653224: \"洛浦县\", 653225: \"策勒县\", 653226: \"于田县\", 653227: \"民丰县\", 653228: \"其它区\", 654000: \"伊犁哈萨克自治州\", 654002: \"伊宁市\", 654003: \"奎屯市\", 654021: \"伊宁县\", 654022: \"察布查尔锡伯自治县\", 654023: \"霍城县\", 654024: \"巩留县\", 654025: \"新源县\", 654026: \"昭苏县\", 654027: \"特克斯县\", 654028: \"尼勒克县\", 654029: \"其它区\", 654200: \"塔城地区\", 654201: \"塔城市\", 654202: \"乌苏市\", 654221: \"额敏县\", 654223: \"沙湾县\", 654224: \"托里县\", 654225: \"裕民县\", 654226: \"和布克赛尔蒙古自治县\", 654227: \"其它区\", 654300: \"阿勒泰地区\", 654301: \"阿勒泰市\", 654321: \"布尔津县\", 654322: \"富蕴县\", 654323: \"福海县\", 654324: \"哈巴河县\", 654325: \"青河县\", 654326: \"吉木乃县\", 654327: \"其它区\", 659001: \"石河子市\", 659002: \"阿拉尔市\", 659003: \"图木舒克市\", 659004: \"五家渠市\", 710000: \"台湾\", 710100: \"台北市\", 710101: \"中正区\", 710102: \"大同区\", 710103: \"中山区\", 710104: \"松山区\", 710105: \"大安区\", 710106: \"万华区\", 710107: \"信义区\", 710108: \"士林区\", 710109: \"北投区\", 710110: \"内湖区\", 710111: \"南港区\", 710112: \"文山区\", 710113: \"其它区\", 710200: \"高雄市\", 710201: \"新兴区\", 710202: \"前金区\", 710203: \"芩雅区\", 710204: \"盐埕区\", 710205: \"鼓山区\", 710206: \"旗津区\", 710207: \"前镇区\", 710208: \"三民区\", 710209: \"左营区\", 710210: \"楠梓区\", 710211: \"小港区\", 710212: \"其它区\", 710241: \"苓雅区\", 710242: \"仁武区\", 710243: \"大社区\", 710244: \"冈山区\", 710245: \"路竹区\", 710246: \"阿莲区\", 710247: \"田寮区\", 710248: \"燕巢区\", 710249: \"桥头区\", 710250: \"梓官区\", 710251: \"弥陀区\", 710252: \"永安区\", 710253: \"湖内区\", 710254: \"凤山区\", 710255: \"大寮区\", 710256: \"林园区\", 710257: \"鸟松区\", 710258: \"大树区\", 710259: \"旗山区\", 710260: \"美浓区\", 710261: \"六龟区\", 710262: \"内门区\", 710263: \"杉林区\", 710264: \"甲仙区\", 710265: \"桃源区\", 710266: \"那玛夏区\", 710267: \"茂林区\", 710268: \"茄萣区\", 710300: \"台南市\", 710301: \"中西区\", 710302: \"东区\", 710303: \"南区\", 710304: \"北区\", 710305: \"安平区\", 710306: \"安南区\", 710307: \"其它区\", 710339: \"永康区\", 710340: \"归仁区\", 710341: \"新化区\", 710342: \"左镇区\", 710343: \"玉井区\", 710344: \"楠西区\", 710345: \"南化区\", 710346: \"仁德区\", 710347: \"关庙区\", 710348: \"龙崎区\", 710349: \"官田区\", 710350: \"麻豆区\", 710351: \"佳里区\", 710352: \"西港区\", 710353: \"七股区\", 710354: \"将军区\", 710355: \"学甲区\", 710356: \"北门区\", 710357: \"新营区\", 710358: \"后壁区\", 710359: \"白河区\", 710360: \"东山区\", 710361: \"六甲区\", 710362: \"下营区\", 710363: \"柳营区\", 710364: \"盐水区\", 710365: \"善化区\", 710366: \"大内区\", 710367: \"山上区\", 710368: \"新市区\", 710369: \"安定区\", 710400: \"台中市\", 710401: \"中区\", 710402: \"东区\", 710403: \"南区\", 710404: \"西区\", 710405: \"北区\", 710406: \"北屯区\", 710407: \"西屯区\", 710408: \"南屯区\", 710409: \"其它区\", 710431: \"太平区\", 710432: \"大里区\", 710433: \"雾峰区\", 710434: \"乌日区\", 710435: \"丰原区\", 710436: \"后里区\", 710437: \"石冈区\", 710438: \"东势区\", 710439: \"和平区\", 710440: \"新社区\", 710441: \"潭子区\", 710442: \"大雅区\", 710443: \"神冈区\", 710444: \"大肚区\", 710445: \"沙鹿区\", 710446: \"龙井区\", 710447: \"梧栖区\", 710448: \"清水区\", 710449: \"大甲区\", 710450: \"外埔区\", 710451: \"大安区\", 710500: \"金门县\", 710507: \"金沙镇\", 710508: \"金湖镇\", 710509: \"金宁乡\", 710510: \"金城镇\", 710511: \"烈屿乡\", 710512: \"乌坵乡\", 710600: \"南投县\", 710614: \"南投市\", 710615: \"中寮乡\", 710616: \"草屯镇\", 710617: \"国姓乡\", 710618: \"埔里镇\", 710619: \"仁爱乡\", 710620: \"名间乡\", 710621: \"集集镇\", 710622: \"水里乡\", 710623: \"鱼池乡\", 710624: \"信义乡\", 710625: \"竹山镇\", 710626: \"鹿谷乡\", 710700: \"基隆市\", 710701: \"仁爱区\", 710702: \"信义区\", 710703: \"中正区\", 710704: \"中山区\", 710705: \"安乐区\", 710706: \"暖暖区\", 710707: \"七堵区\", 710708: \"其它区\", 710800: \"新竹市\", 710801: \"东区\", 710802: \"北区\", 710803: \"香山区\", 710804: \"其它区\", 710900: \"嘉义市\", 710901: \"东区\", 710902: \"西区\", 710903: \"其它区\", 711100: \"新北市\", 711130: \"万里区\", 711131: \"金山区\", 711132: \"板桥区\", 711133: \"汐止区\", 711134: \"深坑区\", 711135: \"石碇区\", 711136: \"瑞芳区\", 711137: \"平溪区\", 711138: \"双溪区\", 711139: \"贡寮区\", 711140: \"新店区\", 711141: \"坪林区\", 711142: \"乌来区\", 711143: \"永和区\", 711144: \"中和区\", 711145: \"土城区\", 711146: \"三峡区\", 711147: \"树林区\", 711148: \"莺歌区\", 711149: \"三重区\", 711150: \"新庄区\", 711151: \"泰山区\", 711152: \"林口区\", 711153: \"芦洲区\", 711154: \"五股区\", 711155: \"八里区\", 711156: \"淡水区\", 711157: \"三芝区\", 711158: \"石门区\", 711200: \"宜兰县\", 711214: \"宜兰市\", 711215: \"头城镇\", 711216: \"礁溪乡\", 711217: \"壮围乡\", 711218: \"员山乡\", 711219: \"罗东镇\", 711220: \"三星乡\", 711221: \"大同乡\", 711222: \"五结乡\", 711223: \"冬山乡\", 711224: \"苏澳镇\", 711225: \"南澳乡\", 711226: \"钓鱼台\", 711300: \"新竹县\", 711314: \"竹北市\", 711315: \"湖口乡\", 711316: \"新丰乡\", 711317: \"新埔镇\", 711318: \"关西镇\", 711319: \"芎林乡\", 711320: \"宝山乡\", 711321: \"竹东镇\", 711322: \"五峰乡\", 711323: \"横山乡\", 711324: \"尖石乡\", 711325: \"北埔乡\", 711326: \"峨眉乡\", 711400: \"桃园县\", 711414: \"中坜市\", 711415: \"平镇市\", 711416: \"龙潭乡\", 711417: \"杨梅市\", 711418: \"新屋乡\", 711419: \"观音乡\", 711420: \"桃园市\", 711421: \"龟山乡\", 711422: \"八德市\", 711423: \"大溪镇\", 711424: \"复兴乡\", 711425: \"大园乡\", 711426: \"芦竹乡\", 711500: \"苗栗县\", 711519: \"竹南镇\", 711520: \"头份镇\", 711521: \"三湾乡\", 711522: \"南庄乡\", 711523: \"狮潭乡\", 711524: \"后龙镇\", 711525: \"通霄镇\", 711526: \"苑里镇\", 711527: \"苗栗市\", 711528: \"造桥乡\", 711529: \"头屋乡\", 711530: \"公馆乡\", 711531: \"大湖乡\", 711532: \"泰安乡\", 711533: \"铜锣乡\", 711534: \"三义乡\", 711535: \"西湖乡\", 711536: \"卓兰镇\", 711700: \"彰化县\", 711727: \"彰化市\", 711728: \"芬园乡\", 711729: \"花坛乡\", 711730: \"秀水乡\", 711731: \"鹿港镇\", 711732: \"福兴乡\", 711733: \"线西乡\", 711734: \"和美镇\", 711735: \"伸港乡\", 711736: \"员林镇\", 711737: \"社头乡\", 711738: \"永靖乡\", 711739: \"埔心乡\", 711740: \"溪湖镇\", 711741: \"大村乡\", 711742: \"埔盐乡\", 711743: \"田中镇\", 711744: \"北斗镇\", 711745: \"田尾乡\", 711746: \"埤头乡\", 711747: \"溪州乡\", 711748: \"竹塘乡\", 711749: \"二林镇\", 711750: \"大城乡\", 711751: \"芳苑乡\", 711752: \"二水乡\", 711900: \"嘉义县\", 711919: \"番路乡\", 711920: \"梅山乡\", 711921: \"竹崎乡\", 711922: \"阿里山乡\", 711923: \"中埔乡\", 711924: \"大埔乡\", 711925: \"水上乡\", 711926: \"鹿草乡\", 711927: \"太保市\", 711928: \"朴子市\", 711929: \"东石乡\", 711930: \"六脚乡\", 711931: \"新港乡\", 711932: \"民雄乡\", 711933: \"大林镇\", 711934: \"溪口乡\", 711935: \"义竹乡\", 711936: \"布袋镇\", 712100: \"云林县\", 712121: \"斗南镇\", 712122: \"大埤乡\", 712123: \"虎尾镇\", 712124: \"土库镇\", 712125: \"褒忠乡\", 712126: \"东势乡\", 712127: \"台西乡\", 712128: \"仑背乡\", 712129: \"麦寮乡\", 712130: \"斗六市\", 712131: \"林内乡\", 712132: \"古坑乡\", 712133: \"莿桐乡\", 712134: \"西螺镇\", 712135: \"二仑乡\", 712136: \"北港镇\", 712137: \"水林乡\", 712138: \"口湖乡\", 712139: \"四湖乡\", 712140: \"元长乡\", 712400: \"屏东县\", 712434: \"屏东市\", 712435: \"三地门乡\", 712436: \"雾台乡\", 712437: \"玛家乡\", 712438: \"九如乡\", 712439: \"里港乡\", 712440: \"高树乡\", 712441: \"盐埔乡\", 712442: \"长治乡\", 712443: \"麟洛乡\", 712444: \"竹田乡\", 712445: \"内埔乡\", 712446: \"万丹乡\", 712447: \"潮州镇\", 712448: \"泰武乡\", 712449: \"来义乡\", 712450: \"万峦乡\", 712451: \"崁顶乡\", 712452: \"新埤乡\", 712453: \"南州乡\", 712454: \"林边乡\", 712455: \"东港镇\", 712456: \"琉球乡\", 712457: \"佳冬乡\", 712458: \"新园乡\", 712459: \"枋寮乡\", 712460: \"枋山乡\", 712461: \"春日乡\", 712462: \"狮子乡\", 712463: \"车城乡\", 712464: \"牡丹乡\", 712465: \"恒春镇\", 712466: \"满州乡\", 712500: \"台东县\", 712517: \"台东市\", 712518: \"绿岛乡\", 712519: \"兰屿乡\", 712520: \"延平乡\", 712521: \"卑南乡\", 712522: \"鹿野乡\", 712523: \"关山镇\", 712524: \"海端乡\", 712525: \"池上乡\", 712526: \"东河乡\", 712527: \"成功镇\", 712528: \"长滨乡\", 712529: \"金峰乡\", 712530: \"大武乡\", 712531: \"达仁乡\", 712532: \"太麻里乡\", 712600: \"花莲县\", 712615: \"花莲市\", 712616: \"新城乡\", 712617: \"太鲁阁\", 712618: \"秀林乡\", 712619: \"吉安乡\", 712620: \"寿丰乡\", 712621: \"凤林镇\", 712622: \"光复乡\", 712623: \"丰滨乡\", 712624: \"瑞穗乡\", 712625: \"万荣乡\", 712626: \"玉里镇\", 712627: \"卓溪乡\", 712628: \"富里乡\", 712700: \"澎湖县\", 712707: \"马公市\", 712708: \"西屿乡\", 712709: \"望安乡\", 712710: \"七美乡\", 712711: \"白沙乡\", 712712: \"湖西乡\", 712800: \"连江县\", 712805: \"南竿乡\", 712806: \"北竿乡\", 712807: \"莒光乡\", 712808: \"东引乡\", 810000: \"香港特别行政区\", 810100: \"香港岛\", 810101: \"中西区\", 810102: \"湾仔\", 810103: \"东区\", 810104: \"南区\", 810200: \"九龙\", 810201: \"九龙城区\", 810202: \"油尖旺区\", 810203: \"深水埗区\", 810204: \"黄大仙区\", 810205: \"观塘区\", 810300: \"新界\", 810301: \"北区\", 810302: \"大埔区\", 810303: \"沙田区\", 810304: \"西贡区\", 810305: \"元朗区\", 810306: \"屯门区\", 810307: \"荃湾区\", 810308: \"葵青区\", 810309: \"离岛区\", 820000: \"澳门特别行政区\", 820100: \"澳门半岛\", 820200: \"离岛\", 990000: \"海外\", 990100: \"海外\" },\n\t\t    a = function () {\n\t\t\tvar t = [];for (var e in r) {\n\t\t\t\tvar a = \"0000\" === e.slice(2, 6) ? void 0 : \"00\" == e.slice(4, 6) ? e.slice(0, 2) + \"0000\" : e.slice(0, 4) + \"00\";t.push({ id: e, pid: a, name: r[e] });\n\t\t\t}return n(t);\n\t\t}();t.exports = a;\n\t}, function (t, e, n) {\n\t\tvar r = n(18);t.exports = { d4: function d4() {\n\t\t\t\treturn this.natural(1, 4);\n\t\t\t}, d6: function d6() {\n\t\t\t\treturn this.natural(1, 6);\n\t\t\t}, d8: function d8() {\n\t\t\t\treturn this.natural(1, 8);\n\t\t\t}, d12: function d12() {\n\t\t\t\treturn this.natural(1, 12);\n\t\t\t}, d20: function d20() {\n\t\t\t\treturn this.natural(1, 20);\n\t\t\t}, d100: function d100() {\n\t\t\t\treturn this.natural(1, 100);\n\t\t\t}, guid: function guid() {\n\t\t\t\tvar t = \"abcdefABCDEF1234567890\",\n\t\t\t\t    e = this.string(t, 8) + \"-\" + this.string(t, 4) + \"-\" + this.string(t, 4) + \"-\" + this.string(t, 4) + \"-\" + this.string(t, 12);return e;\n\t\t\t}, uuid: function uuid() {\n\t\t\t\treturn this.guid();\n\t\t\t}, id: function id() {\n\t\t\t\tvar t,\n\t\t\t\t    e = 0,\n\t\t\t\t    n = [\"7\", \"9\", \"10\", \"5\", \"8\", \"4\", \"2\", \"1\", \"6\", \"3\", \"7\", \"9\", \"10\", \"5\", \"8\", \"4\", \"2\"],\n\t\t\t\t    a = [\"1\", \"0\", \"X\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"];t = this.pick(r).id + this.date(\"yyyyMMdd\") + this.string(\"number\", 3);for (var o = 0; o < t.length; o++) {\n\t\t\t\t\te += t[o] * n[o];\n\t\t\t\t}return t += a[e % 11];\n\t\t\t}, increment: function () {\n\t\t\t\tvar t = 0;return function (e) {\n\t\t\t\t\treturn t += +e || 1;\n\t\t\t\t};\n\t\t\t}(), inc: function inc(t) {\n\t\t\t\treturn this.increment(t);\n\t\t\t} };\n\t}, function (t, e, n) {\n\t\tvar r = n(21),\n\t\t    a = n(22);t.exports = { Parser: r, Handler: a };\n\t}, function (t, e) {\n\t\tfunction n(t) {\n\t\t\tthis.type = t, this.offset = n.offset(), this.text = n.text();\n\t\t}function r(t, e) {\n\t\t\tn.call(this, \"alternate\"), this.left = t, this.right = e;\n\t\t}function a(t) {\n\t\t\tn.call(this, \"match\"), this.body = t.filter(Boolean);\n\t\t}function o(t, e) {\n\t\t\tn.call(this, t), this.body = e;\n\t\t}function u(t) {\n\t\t\to.call(this, \"capture-group\"), this.index = y[this.offset] || (y[this.offset] = x++), this.body = t;\n\t\t}function i(t, e) {\n\t\t\tn.call(this, \"quantified\"), this.body = t, this.quantifier = e;\n\t\t}function l(t, e) {\n\t\t\tn.call(this, \"quantifier\"), this.min = t, this.max = e, this.greedy = !0;\n\t\t}function s(t, e) {\n\t\t\tn.call(this, \"charset\"), this.invert = t, this.body = e;\n\t\t}function c(t, e) {\n\t\t\tn.call(this, \"range\"), this.start = t, this.end = e;\n\t\t}function h(t) {\n\t\t\tn.call(this, \"literal\"), this.body = t, this.escaped = this.body != this.text;\n\t\t}function p(t) {\n\t\t\tn.call(this, \"unicode\"), this.code = t.toUpperCase();\n\t\t}function f(t) {\n\t\t\tn.call(this, \"hex\"), this.code = t.toUpperCase();\n\t\t}function d(t) {\n\t\t\tn.call(this, \"octal\"), this.code = t.toUpperCase();\n\t\t}function m(t) {\n\t\t\tn.call(this, \"back-reference\"), this.code = t.toUpperCase();\n\t\t}function g(t) {\n\t\t\tn.call(this, \"control-character\"), this.code = t.toUpperCase();\n\t\t}var v = function () {\n\t\t\tfunction t(t, e) {\n\t\t\t\tfunction n() {\n\t\t\t\t\tthis.constructor = t;\n\t\t\t\t}n.prototype = e.prototype, t.prototype = new n();\n\t\t\t}function e(t, e, n, r, a) {\n\t\t\t\tfunction o(t, e) {\n\t\t\t\t\tfunction n(t) {\n\t\t\t\t\t\tfunction e(t) {\n\t\t\t\t\t\t\treturn t.charCodeAt(0).toString(16).toUpperCase();\n\t\t\t\t\t\t}return t.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\x08/g, \"\\\\b\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\f/g, \"\\\\f\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function (t) {\n\t\t\t\t\t\t\treturn \"\\\\x0\" + e(t);\n\t\t\t\t\t\t}).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function (t) {\n\t\t\t\t\t\t\treturn \"\\\\x\" + e(t);\n\t\t\t\t\t\t}).replace(/[\\u0180-\\u0FFF]/g, function (t) {\n\t\t\t\t\t\t\treturn \"\\\\u0\" + e(t);\n\t\t\t\t\t\t}).replace(/[\\u1080-\\uFFFF]/g, function (t) {\n\t\t\t\t\t\t\treturn \"\\\\u\" + e(t);\n\t\t\t\t\t\t});\n\t\t\t\t\t}var r, a;switch (t.length) {case 0:\n\t\t\t\t\t\t\tr = \"end of input\";break;case 1:\n\t\t\t\t\t\t\tr = t[0];break;default:\n\t\t\t\t\t\t\tr = t.slice(0, -1).join(\", \") + \" or \" + t[t.length - 1];}return a = e ? '\"' + n(e) + '\"' : \"end of input\", \"Expected \" + r + \" but \" + a + \" found.\";\n\t\t\t\t}this.expected = t, this.found = e, this.offset = n, this.line = r, this.column = a, this.name = \"SyntaxError\", this.message = o(t, e);\n\t\t\t}function v(t) {\n\t\t\t\tfunction v() {\n\t\t\t\t\treturn t.substring(Qn, Zn);\n\t\t\t\t}function x() {\n\t\t\t\t\treturn Qn;\n\t\t\t\t}function y(e) {\n\t\t\t\t\tfunction n(e, n, r) {\n\t\t\t\t\t\tvar a, o;for (a = n; r > a; a++) {\n\t\t\t\t\t\t\to = t.charAt(a), \"\\n\" === o ? (e.seenCR || e.line++, e.column = 1, e.seenCR = !1) : \"\\r\" === o || \"\\u2028\" === o || \"\\u2029\" === o ? (e.line++, e.column = 1, e.seenCR = !0) : (e.column++, e.seenCR = !1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}return tr !== e && (tr > e && (tr = 0, er = { line: 1, column: 1, seenCR: !1 }), n(er, tr, e), tr = e), er;\n\t\t\t\t}function b(t) {\n\t\t\t\t\tnr > Zn || (Zn > nr && (nr = Zn, rr = []), rr.push(t));\n\t\t\t\t}function w(t) {\n\t\t\t\t\tvar e = 0;for (t.sort(); e < t.length;) {\n\t\t\t\t\t\tt[e - 1] === t[e] ? t.splice(e, 1) : e++;\n\t\t\t\t\t}\n\t\t\t\t}function C() {\n\t\t\t\t\tvar e, n, r, a, o;return e = Zn, n = k(), null !== n ? (r = Zn, 124 === t.charCodeAt(Zn) ? (a = Rt, Zn++) : (a = null, 0 === ar && b(At)), null !== a ? (o = C(), null !== o ? (a = [a, o], r = a) : (Zn = r, r = kt)) : (Zn = r, r = kt), null === r && (r = Et), null !== r ? (Qn = e, n = _t(n, r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function k() {\n\t\t\t\t\tvar t, e, n, r, a;if (t = Zn, e = R(), null === e && (e = Et), null !== e) {\n\t\t\t\t\t\tif (n = Zn, ar++, r = M(), ar--, null === r ? n = Et : (Zn = n, n = kt), null !== n) {\n\t\t\t\t\t\t\tfor (r = [], a = _(), null === a && (a = E()); null !== a;) {\n\t\t\t\t\t\t\t\tr.push(a), a = _(), null === a && (a = E());\n\t\t\t\t\t\t\t}null !== r ? (a = A(), null === a && (a = Et), null !== a ? (Qn = t, e = Mt(e, r, a), null === e ? (Zn = t, t = e) : t = e) : (Zn = t, t = kt)) : (Zn = t, t = kt);\n\t\t\t\t\t\t} else Zn = t, t = kt;\n\t\t\t\t\t} else Zn = t, t = kt;return t;\n\t\t\t\t}function E() {\n\t\t\t\t\tvar t;return t = I(), null === t && (t = B(), null === t && (t = Y())), t;\n\t\t\t\t}function R() {\n\t\t\t\t\tvar e, n;return e = Zn, 94 === t.charCodeAt(Zn) ? (n = Pt, Zn++) : (n = null, 0 === ar && b(Tt)), null !== n && (Qn = e, n = Ht()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function A() {\n\t\t\t\t\tvar e, n;return e = Zn, 36 === t.charCodeAt(Zn) ? (n = St, Zn++) : (n = null, 0 === ar && b(Dt)), null !== n && (Qn = e, n = qt()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function _() {\n\t\t\t\t\tvar t, e, n;return t = Zn, e = E(), null !== e ? (n = M(), null !== n ? (Qn = t, e = Ft(e, n), null === e ? (Zn = t, t = e) : t = e) : (Zn = t, t = kt)) : (Zn = t, t = kt), t;\n\t\t\t\t}function M() {\n\t\t\t\t\tvar t, e, n;return ar++, t = Zn, e = P(), null !== e ? (n = L(), null === n && (n = Et), null !== n ? (Qn = t, e = Ot(e, n), null === e ? (Zn = t, t = e) : t = e) : (Zn = t, t = kt)) : (Zn = t, t = kt), ar--, null === t && (e = null, 0 === ar && b(Lt)), t;\n\t\t\t\t}function P() {\n\t\t\t\t\tvar t;return t = T(), null === t && (t = H(), null === t && (t = S(), null === t && (t = D(), null === t && (t = q(), null === t && (t = F()))))), t;\n\t\t\t\t}function T() {\n\t\t\t\t\tvar e, n, r, a, o, u;return e = Zn, 123 === t.charCodeAt(Zn) ? (n = It, Zn++) : (n = null, 0 === ar && b(jt)), null !== n ? (r = O(), null !== r ? (44 === t.charCodeAt(Zn) ? (a = Nt, Zn++) : (a = null, 0 === ar && b(zt)), null !== a ? (o = O(), null !== o ? (125 === t.charCodeAt(Zn) ? (u = Ut, Zn++) : (u = null, 0 === ar && b(Bt)), null !== u ? (Qn = e, n = Gt(r, o), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt)) : (Zn = e, e = kt)) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function H() {\n\t\t\t\t\tvar e, n, r, a;return e = Zn, 123 === t.charCodeAt(Zn) ? (n = It, Zn++) : (n = null, 0 === ar && b(jt)), null !== n ? (r = O(), null !== r ? (t.substr(Zn, 2) === Xt ? (a = Xt, Zn += 2) : (a = null, 0 === ar && b(Kt)), null !== a ? (Qn = e, n = Wt(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function S() {\n\t\t\t\t\tvar e, n, r, a;return e = Zn, 123 === t.charCodeAt(Zn) ? (n = It, Zn++) : (n = null, 0 === ar && b(jt)), null !== n ? (r = O(), null !== r ? (125 === t.charCodeAt(Zn) ? (a = Ut, Zn++) : (a = null, 0 === ar && b(Bt)), null !== a ? (Qn = e, n = Yt(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function D() {\n\t\t\t\t\tvar e, n;return e = Zn, 43 === t.charCodeAt(Zn) ? (n = $t, Zn++) : (n = null, 0 === ar && b(Jt)), null !== n && (Qn = e, n = Vt()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function q() {\n\t\t\t\t\tvar e, n;return e = Zn, 42 === t.charCodeAt(Zn) ? (n = Zt, Zn++) : (n = null, 0 === ar && b(Qt)), null !== n && (Qn = e, n = te()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function F() {\n\t\t\t\t\tvar e, n;return e = Zn, 63 === t.charCodeAt(Zn) ? (n = ee, Zn++) : (n = null, 0 === ar && b(ne)), null !== n && (Qn = e, n = re()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function L() {\n\t\t\t\t\tvar e;return 63 === t.charCodeAt(Zn) ? (e = ee, Zn++) : (e = null, 0 === ar && b(ne)), e;\n\t\t\t\t}function O() {\n\t\t\t\t\tvar e, n, r;if (e = Zn, n = [], ae.test(t.charAt(Zn)) ? (r = t.charAt(Zn), Zn++) : (r = null, 0 === ar && b(oe)), null !== r) for (; null !== r;) {\n\t\t\t\t\t\tn.push(r), ae.test(t.charAt(Zn)) ? (r = t.charAt(Zn), Zn++) : (r = null, 0 === ar && b(oe));\n\t\t\t\t\t} else n = kt;return null !== n && (Qn = e, n = ue(n)), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function I() {\n\t\t\t\t\tvar e, n, r, a;return e = Zn, 40 === t.charCodeAt(Zn) ? (n = ie, Zn++) : (n = null, 0 === ar && b(le)), null !== n ? (r = z(), null === r && (r = U(), null === r && (r = N(), null === r && (r = j()))), null !== r ? (41 === t.charCodeAt(Zn) ? (a = se, Zn++) : (a = null, 0 === ar && b(ce)), null !== a ? (Qn = e, n = he(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function j() {\n\t\t\t\t\tvar t, e;return t = Zn, e = C(), null !== e && (Qn = t, e = pe(e)), null === e ? (Zn = t, t = e) : t = e, t;\n\t\t\t\t}function N() {\n\t\t\t\t\tvar e, n, r;return e = Zn, t.substr(Zn, 2) === fe ? (n = fe, Zn += 2) : (n = null, 0 === ar && b(de)), null !== n ? (r = C(), null !== r ? (Qn = e, n = me(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function z() {\n\t\t\t\t\tvar e, n, r;return e = Zn, t.substr(Zn, 2) === ge ? (n = ge, Zn += 2) : (n = null, 0 === ar && b(ve)), null !== n ? (r = C(), null !== r ? (Qn = e, n = xe(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function U() {\n\t\t\t\t\tvar e, n, r;return e = Zn, t.substr(Zn, 2) === ye ? (n = ye, Zn += 2) : (n = null, 0 === ar && b(be)), null !== n ? (r = C(), null !== r ? (Qn = e, n = we(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function B() {\n\t\t\t\t\tvar e, n, r, a, o;if (ar++, e = Zn, 91 === t.charCodeAt(Zn) ? (n = ke, Zn++) : (n = null, 0 === ar && b(Ee)), null !== n) {\n\t\t\t\t\t\tif (94 === t.charCodeAt(Zn) ? (r = Pt, Zn++) : (r = null, 0 === ar && b(Tt)), null === r && (r = Et), null !== r) {\n\t\t\t\t\t\t\tfor (a = [], o = G(), null === o && (o = X()); null !== o;) {\n\t\t\t\t\t\t\t\ta.push(o), o = G(), null === o && (o = X());\n\t\t\t\t\t\t\t}null !== a ? (93 === t.charCodeAt(Zn) ? (o = Re, Zn++) : (o = null, 0 === ar && b(Ae)), null !== o ? (Qn = e, n = _e(r, a), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt);\n\t\t\t\t\t\t} else Zn = e, e = kt;\n\t\t\t\t\t} else Zn = e, e = kt;return ar--, null === e && (n = null, 0 === ar && b(Ce)), e;\n\t\t\t\t}function G() {\n\t\t\t\t\tvar e, n, r, a;return ar++, e = Zn, n = X(), null !== n ? (45 === t.charCodeAt(Zn) ? (r = Pe, Zn++) : (r = null, 0 === ar && b(Te)), null !== r ? (a = X(), null !== a ? (Qn = e, n = He(n, a), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt)) : (Zn = e, e = kt), ar--, null === e && (n = null, 0 === ar && b(Me)), e;\n\t\t\t\t}function X() {\n\t\t\t\t\tvar t, e;return ar++, t = W(), null === t && (t = K()), ar--, null === t && (e = null, 0 === ar && b(Se)), t;\n\t\t\t\t}function K() {\n\t\t\t\t\tvar e, n;return e = Zn, De.test(t.charAt(Zn)) ? (n = t.charAt(Zn), Zn++) : (n = null, 0 === ar && b(qe)), null !== n && (Qn = e, n = Fe(n)), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function W() {\n\t\t\t\t\tvar t;return t = Z(), null === t && (t = pt(), null === t && (t = et(), null === t && (t = nt(), null === t && (t = rt(), null === t && (t = at(), null === t && (t = ot(), null === t && (t = ut(), null === t && (t = it(), null === t && (t = lt(), null === t && (t = st(), null === t && (t = ct(), null === t && (t = ht(), null === t && (t = dt(), null === t && (t = mt(), null === t && (t = gt(), null === t && (t = vt(), null === t && (t = xt()))))))))))))))))), t;\n\t\t\t\t}function Y() {\n\t\t\t\t\tvar t;return t = $(), null === t && (t = V(), null === t && (t = J())), t;\n\t\t\t\t}function $() {\n\t\t\t\t\tvar e, n;return e = Zn, 46 === t.charCodeAt(Zn) ? (n = Le, Zn++) : (n = null, 0 === ar && b(Oe)), null !== n && (Qn = e, n = Ie()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function J() {\n\t\t\t\t\tvar e, n;return ar++, e = Zn, Ne.test(t.charAt(Zn)) ? (n = t.charAt(Zn), Zn++) : (n = null, 0 === ar && b(ze)), null !== n && (Qn = e, n = Fe(n)), null === n ? (Zn = e, e = n) : e = n, ar--, null === e && (n = null, 0 === ar && b(je)), e;\n\t\t\t\t}function V() {\n\t\t\t\t\tvar t;return t = Q(), null === t && (t = tt(), null === t && (t = pt(), null === t && (t = et(), null === t && (t = nt(), null === t && (t = rt(), null === t && (t = at(), null === t && (t = ot(), null === t && (t = ut(), null === t && (t = it(), null === t && (t = lt(), null === t && (t = st(), null === t && (t = ct(), null === t && (t = ht(), null === t && (t = ft(), null === t && (t = dt(), null === t && (t = mt(), null === t && (t = gt(), null === t && (t = vt(), null === t && (t = xt()))))))))))))))))))), t;\n\t\t\t\t}function Z() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === Ue ? (n = Ue, Zn += 2) : (n = null, 0 === ar && b(Be)), null !== n && (Qn = e, n = Ge()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function Q() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === Ue ? (n = Ue, Zn += 2) : (n = null, 0 === ar && b(Be)), null !== n && (Qn = e, n = Xe()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function tt() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === Ke ? (n = Ke, Zn += 2) : (n = null, 0 === ar && b(We)), null !== n && (Qn = e, n = Ye()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function et() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === $e ? (n = $e, Zn += 2) : (n = null, 0 === ar && b(Je)), null !== n && (Qn = e, n = Ve()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function nt() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === Ze ? (n = Ze, Zn += 2) : (n = null, 0 === ar && b(Qe)), null !== n && (Qn = e, n = tn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function rt() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === en ? (n = en, Zn += 2) : (n = null, 0 === ar && b(nn)), null !== n && (Qn = e, n = rn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function at() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === an ? (n = an, Zn += 2) : (n = null, 0 === ar && b(on)), null !== n && (Qn = e, n = un()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function ot() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === ln ? (n = ln, Zn += 2) : (n = null, 0 === ar && b(sn)), null !== n && (Qn = e, n = cn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function ut() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === hn ? (n = hn, Zn += 2) : (n = null, 0 === ar && b(pn)), null !== n && (Qn = e, n = fn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function it() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === dn ? (n = dn, Zn += 2) : (n = null, 0 === ar && b(mn)), null !== n && (Qn = e, n = gn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function lt() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === vn ? (n = vn, Zn += 2) : (n = null, 0 === ar && b(xn)), null !== n && (Qn = e, n = yn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function st() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === bn ? (n = bn, Zn += 2) : (n = null, 0 === ar && b(wn)), null !== n && (Qn = e, n = Cn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function ct() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === kn ? (n = kn, Zn += 2) : (n = null, 0 === ar && b(En)), null !== n && (Qn = e, n = Rn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function ht() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === An ? (n = An, Zn += 2) : (n = null, 0 === ar && b(_n)), null !== n && (Qn = e, n = Mn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function pt() {\n\t\t\t\t\tvar e, n, r;return e = Zn, t.substr(Zn, 2) === Pn ? (n = Pn, Zn += 2) : (n = null, 0 === ar && b(Tn)), null !== n ? (t.length > Zn ? (r = t.charAt(Zn), Zn++) : (r = null, 0 === ar && b(Hn)), null !== r ? (Qn = e, n = Sn(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function ft() {\n\t\t\t\t\tvar e, n, r;return e = Zn, 92 === t.charCodeAt(Zn) ? (n = Dn, Zn++) : (n = null, 0 === ar && b(qn)), null !== n ? (Fn.test(t.charAt(Zn)) ? (r = t.charAt(Zn), Zn++) : (r = null, 0 === ar && b(Ln)), null !== r ? (Qn = e, n = On(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}function dt() {\n\t\t\t\t\tvar e, n, r, a;if (e = Zn, t.substr(Zn, 2) === In ? (n = In, Zn += 2) : (n = null, 0 === ar && b(jn)), null !== n) {\n\t\t\t\t\t\tif (r = [], Nn.test(t.charAt(Zn)) ? (a = t.charAt(Zn), Zn++) : (a = null, 0 === ar && b(zn)), null !== a) for (; null !== a;) {\n\t\t\t\t\t\t\tr.push(a), Nn.test(t.charAt(Zn)) ? (a = t.charAt(Zn), Zn++) : (a = null, 0 === ar && b(zn));\n\t\t\t\t\t\t} else r = kt;null !== r ? (Qn = e, n = Un(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt);\n\t\t\t\t\t} else Zn = e, e = kt;return e;\n\t\t\t\t}function mt() {\n\t\t\t\t\tvar e, n, r, a;if (e = Zn, t.substr(Zn, 2) === Bn ? (n = Bn, Zn += 2) : (n = null, 0 === ar && b(Gn)), null !== n) {\n\t\t\t\t\t\tif (r = [], Xn.test(t.charAt(Zn)) ? (a = t.charAt(Zn), Zn++) : (a = null, 0 === ar && b(Kn)), null !== a) for (; null !== a;) {\n\t\t\t\t\t\t\tr.push(a), Xn.test(t.charAt(Zn)) ? (a = t.charAt(Zn), Zn++) : (a = null, 0 === ar && b(Kn));\n\t\t\t\t\t\t} else r = kt;null !== r ? (Qn = e, n = Wn(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt);\n\t\t\t\t\t} else Zn = e, e = kt;return e;\n\t\t\t\t}function gt() {\n\t\t\t\t\tvar e, n, r, a;if (e = Zn, t.substr(Zn, 2) === Yn ? (n = Yn, Zn += 2) : (n = null, 0 === ar && b($n)), null !== n) {\n\t\t\t\t\t\tif (r = [], Xn.test(t.charAt(Zn)) ? (a = t.charAt(Zn), Zn++) : (a = null, 0 === ar && b(Kn)), null !== a) for (; null !== a;) {\n\t\t\t\t\t\t\tr.push(a), Xn.test(t.charAt(Zn)) ? (a = t.charAt(Zn), Zn++) : (a = null, 0 === ar && b(Kn));\n\t\t\t\t\t\t} else r = kt;null !== r ? (Qn = e, n = Jn(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt);\n\t\t\t\t\t} else Zn = e, e = kt;return e;\n\t\t\t\t}function vt() {\n\t\t\t\t\tvar e, n;return e = Zn, t.substr(Zn, 2) === In ? (n = In, Zn += 2) : (n = null, 0 === ar && b(jn)), null !== n && (Qn = e, n = Vn()), null === n ? (Zn = e, e = n) : e = n, e;\n\t\t\t\t}function xt() {\n\t\t\t\t\tvar e, n, r;return e = Zn, 92 === t.charCodeAt(Zn) ? (n = Dn, Zn++) : (n = null, 0 === ar && b(qn)), null !== n ? (t.length > Zn ? (r = t.charAt(Zn), Zn++) : (r = null, 0 === ar && b(Hn)), null !== r ? (Qn = e, n = Fe(r), null === n ? (Zn = e, e = n) : e = n) : (Zn = e, e = kt)) : (Zn = e, e = kt), e;\n\t\t\t\t}var yt,\n\t\t\t\t    bt = arguments.length > 1 ? arguments[1] : {},\n\t\t\t\t    wt = { regexp: C },\n\t\t\t\t    Ct = C,\n\t\t\t\t    kt = null,\n\t\t\t\t    Et = \"\",\n\t\t\t\t    Rt = \"|\",\n\t\t\t\t    At = '\"|\"',\n\t\t\t\t    _t = function _t(t, e) {\n\t\t\t\t\treturn e ? new r(t, e[1]) : t;\n\t\t\t\t},\n\t\t\t\t    Mt = function Mt(t, e, n) {\n\t\t\t\t\treturn new a([t].concat(e).concat([n]));\n\t\t\t\t},\n\t\t\t\t    Pt = \"^\",\n\t\t\t\t    Tt = '\"^\"',\n\t\t\t\t    Ht = function Ht() {\n\t\t\t\t\treturn new n(\"start\");\n\t\t\t\t},\n\t\t\t\t    St = \"$\",\n\t\t\t\t    Dt = '\"$\"',\n\t\t\t\t    qt = function qt() {\n\t\t\t\t\treturn new n(\"end\");\n\t\t\t\t},\n\t\t\t\t    Ft = function Ft(t, e) {\n\t\t\t\t\treturn new i(t, e);\n\t\t\t\t},\n\t\t\t\t    Lt = \"Quantifier\",\n\t\t\t\t    Ot = function Ot(t, e) {\n\t\t\t\t\treturn e && (t.greedy = !1), t;\n\t\t\t\t},\n\t\t\t\t    It = \"{\",\n\t\t\t\t    jt = '\"{\"',\n\t\t\t\t    Nt = \",\",\n\t\t\t\t    zt = '\",\"',\n\t\t\t\t    Ut = \"}\",\n\t\t\t\t    Bt = '\"}\"',\n\t\t\t\t    Gt = function Gt(t, e) {\n\t\t\t\t\treturn new l(t, e);\n\t\t\t\t},\n\t\t\t\t    Xt = \",}\",\n\t\t\t\t    Kt = '\",}\"',\n\t\t\t\t    Wt = function Wt(t) {\n\t\t\t\t\treturn new l(t, 1 / 0);\n\t\t\t\t},\n\t\t\t\t    Yt = function Yt(t) {\n\t\t\t\t\treturn new l(t, t);\n\t\t\t\t},\n\t\t\t\t    $t = \"+\",\n\t\t\t\t    Jt = '\"+\"',\n\t\t\t\t    Vt = function Vt() {\n\t\t\t\t\treturn new l(1, 1 / 0);\n\t\t\t\t},\n\t\t\t\t    Zt = \"*\",\n\t\t\t\t    Qt = '\"*\"',\n\t\t\t\t    te = function te() {\n\t\t\t\t\treturn new l(0, 1 / 0);\n\t\t\t\t},\n\t\t\t\t    ee = \"?\",\n\t\t\t\t    ne = '\"?\"',\n\t\t\t\t    re = function re() {\n\t\t\t\t\treturn new l(0, 1);\n\t\t\t\t},\n\t\t\t\t    ae = /^[0-9]/,\n\t\t\t\t    oe = \"[0-9]\",\n\t\t\t\t    ue = function ue(t) {\n\t\t\t\t\treturn +t.join(\"\");\n\t\t\t\t},\n\t\t\t\t    ie = \"(\",\n\t\t\t\t    le = '\"(\"',\n\t\t\t\t    se = \")\",\n\t\t\t\t    ce = '\")\"',\n\t\t\t\t    he = function he(t) {\n\t\t\t\t\treturn t;\n\t\t\t\t},\n\t\t\t\t    pe = function pe(t) {\n\t\t\t\t\treturn new u(t);\n\t\t\t\t},\n\t\t\t\t    fe = \"?:\",\n\t\t\t\t    de = '\"?:\"',\n\t\t\t\t    me = function me(t) {\n\t\t\t\t\treturn new o(\"non-capture-group\", t);\n\t\t\t\t},\n\t\t\t\t    ge = \"?=\",\n\t\t\t\t    ve = '\"?=\"',\n\t\t\t\t    xe = function xe(t) {\n\t\t\t\t\treturn new o(\"positive-lookahead\", t);\n\t\t\t\t},\n\t\t\t\t    ye = \"?!\",\n\t\t\t\t    be = '\"?!\"',\n\t\t\t\t    we = function we(t) {\n\t\t\t\t\treturn new o(\"negative-lookahead\", t);\n\t\t\t\t},\n\t\t\t\t    Ce = \"CharacterSet\",\n\t\t\t\t    ke = \"[\",\n\t\t\t\t    Ee = '\"[\"',\n\t\t\t\t    Re = \"]\",\n\t\t\t\t    Ae = '\"]\"',\n\t\t\t\t    _e = function _e(t, e) {\n\t\t\t\t\treturn new s(!!t, e);\n\t\t\t\t},\n\t\t\t\t    Me = \"CharacterRange\",\n\t\t\t\t    Pe = \"-\",\n\t\t\t\t    Te = '\"-\"',\n\t\t\t\t    He = function He(t, e) {\n\t\t\t\t\treturn new c(t, e);\n\t\t\t\t},\n\t\t\t\t    Se = \"Character\",\n\t\t\t\t    De = /^[^\\\\\\]]/,\n\t\t\t\t    qe = \"[^\\\\\\\\\\\\]]\",\n\t\t\t\t    Fe = function Fe(t) {\n\t\t\t\t\treturn new h(t);\n\t\t\t\t},\n\t\t\t\t    Le = \".\",\n\t\t\t\t    Oe = '\".\"',\n\t\t\t\t    Ie = function Ie() {\n\t\t\t\t\treturn new n(\"any-character\");\n\t\t\t\t},\n\t\t\t\t    je = \"Literal\",\n\t\t\t\t    Ne = /^[^|\\\\\\/.[()?+*$\\^]/,\n\t\t\t\t    ze = \"[^|\\\\\\\\\\\\/.[()?+*$\\\\^]\",\n\t\t\t\t    Ue = \"\\\\b\",\n\t\t\t\t    Be = '\"\\\\\\\\b\"',\n\t\t\t\t    Ge = function Ge() {\n\t\t\t\t\treturn new n(\"backspace\");\n\t\t\t\t},\n\t\t\t\t    Xe = function Xe() {\n\t\t\t\t\treturn new n(\"word-boundary\");\n\t\t\t\t},\n\t\t\t\t    Ke = \"\\\\B\",\n\t\t\t\t    We = '\"\\\\\\\\B\"',\n\t\t\t\t    Ye = function Ye() {\n\t\t\t\t\treturn new n(\"non-word-boundary\");\n\t\t\t\t},\n\t\t\t\t    $e = \"\\\\d\",\n\t\t\t\t    Je = '\"\\\\\\\\d\"',\n\t\t\t\t    Ve = function Ve() {\n\t\t\t\t\treturn new n(\"digit\");\n\t\t\t\t},\n\t\t\t\t    Ze = \"\\\\D\",\n\t\t\t\t    Qe = '\"\\\\\\\\D\"',\n\t\t\t\t    tn = function tn() {\n\t\t\t\t\treturn new n(\"non-digit\");\n\t\t\t\t},\n\t\t\t\t    en = \"\\\\f\",\n\t\t\t\t    nn = '\"\\\\\\\\f\"',\n\t\t\t\t    rn = function rn() {\n\t\t\t\t\treturn new n(\"form-feed\");\n\t\t\t\t},\n\t\t\t\t    an = \"\\\\n\",\n\t\t\t\t    on = '\"\\\\\\\\n\"',\n\t\t\t\t    un = function un() {\n\t\t\t\t\treturn new n(\"line-feed\");\n\t\t\t\t},\n\t\t\t\t    ln = \"\\\\r\",\n\t\t\t\t    sn = '\"\\\\\\\\r\"',\n\t\t\t\t    cn = function cn() {\n\t\t\t\t\treturn new n(\"carriage-return\");\n\t\t\t\t},\n\t\t\t\t    hn = \"\\\\s\",\n\t\t\t\t    pn = '\"\\\\\\\\s\"',\n\t\t\t\t    fn = function fn() {\n\t\t\t\t\treturn new n(\"white-space\");\n\t\t\t\t},\n\t\t\t\t    dn = \"\\\\S\",\n\t\t\t\t    mn = '\"\\\\\\\\S\"',\n\t\t\t\t    gn = function gn() {\n\t\t\t\t\treturn new n(\"non-white-space\");\n\t\t\t\t},\n\t\t\t\t    vn = \"\\\\t\",\n\t\t\t\t    xn = '\"\\\\\\\\t\"',\n\t\t\t\t    yn = function yn() {\n\t\t\t\t\treturn new n(\"tab\");\n\t\t\t\t},\n\t\t\t\t    bn = \"\\\\v\",\n\t\t\t\t    wn = '\"\\\\\\\\v\"',\n\t\t\t\t    Cn = function Cn() {\n\t\t\t\t\treturn new n(\"vertical-tab\");\n\t\t\t\t},\n\t\t\t\t    kn = \"\\\\w\",\n\t\t\t\t    En = '\"\\\\\\\\w\"',\n\t\t\t\t    Rn = function Rn() {\n\t\t\t\t\treturn new n(\"word\");\n\t\t\t\t},\n\t\t\t\t    An = \"\\\\W\",\n\t\t\t\t    _n = '\"\\\\\\\\W\"',\n\t\t\t\t    Mn = function Mn() {\n\t\t\t\t\treturn new n(\"non-word\");\n\t\t\t\t},\n\t\t\t\t    Pn = \"\\\\c\",\n\t\t\t\t    Tn = '\"\\\\\\\\c\"',\n\t\t\t\t    Hn = \"any character\",\n\t\t\t\t    Sn = function Sn(t) {\n\t\t\t\t\treturn new g(t);\n\t\t\t\t},\n\t\t\t\t    Dn = \"\\\\\",\n\t\t\t\t    qn = '\"\\\\\\\\\"',\n\t\t\t\t    Fn = /^[1-9]/,\n\t\t\t\t    Ln = \"[1-9]\",\n\t\t\t\t    On = function On(t) {\n\t\t\t\t\treturn new m(t);\n\t\t\t\t},\n\t\t\t\t    In = \"\\\\0\",\n\t\t\t\t    jn = '\"\\\\\\\\0\"',\n\t\t\t\t    Nn = /^[0-7]/,\n\t\t\t\t    zn = \"[0-7]\",\n\t\t\t\t    Un = function Un(t) {\n\t\t\t\t\treturn new d(t.join(\"\"));\n\t\t\t\t},\n\t\t\t\t    Bn = \"\\\\x\",\n\t\t\t\t    Gn = '\"\\\\\\\\x\"',\n\t\t\t\t    Xn = /^[0-9a-fA-F]/,\n\t\t\t\t    Kn = \"[0-9a-fA-F]\",\n\t\t\t\t    Wn = function Wn(t) {\n\t\t\t\t\treturn new f(t.join(\"\"));\n\t\t\t\t},\n\t\t\t\t    Yn = \"\\\\u\",\n\t\t\t\t    $n = \"\\\"\\\\\\\\u\\\"\",\n\t\t\t\t    Jn = function Jn(t) {\n\t\t\t\t\treturn new p(t.join(\"\"));\n\t\t\t\t},\n\t\t\t\t    Vn = function Vn() {\n\t\t\t\t\treturn new n(\"null-character\");\n\t\t\t\t},\n\t\t\t\t    Zn = 0,\n\t\t\t\t    Qn = 0,\n\t\t\t\t    tr = 0,\n\t\t\t\t    er = { line: 1, column: 1, seenCR: !1 },\n\t\t\t\t    nr = 0,\n\t\t\t\t    rr = [],\n\t\t\t\t    ar = 0;if (\"startRule\" in bt) {\n\t\t\t\t\tif (!(bt.startRule in wt)) throw new Error(\"Can't start parsing from rule \\\"\" + bt.startRule + '\".');Ct = wt[bt.startRule];\n\t\t\t\t}if (n.offset = x, n.text = v, yt = Ct(), null !== yt && Zn === t.length) return yt;throw w(rr), Qn = Math.max(Zn, nr), new e(rr, Qn < t.length ? t.charAt(Qn) : null, Qn, y(Qn).line, y(Qn).column);\n\t\t\t}return t(e, Error), { SyntaxError: e, parse: v };\n\t\t}(),\n\t\t    x = 1,\n\t\t    y = {};t.exports = v;\n\t}, function (t, e, n) {\n\t\tfunction r(t, e) {\n\t\t\tfor (var n = \"\", r = t; e >= r; r++) {\n\t\t\t\tn += String.fromCharCode(r);\n\t\t\t}return n;\n\t\t}var a = n(3),\n\t\t    o = n(5),\n\t\t    u = { extend: a.extend },\n\t\t    i = r(97, 122),\n\t\t    l = r(65, 90),\n\t\t    s = r(48, 57),\n\t\t    c = r(32, 47) + r(58, 64) + r(91, 96) + r(123, 126),\n\t\t    h = r(32, 126),\n\t\t    p = \" \\f\\n\\r\\t\\x0B\\xA0\\u2028\\u2029\",\n\t\t    f = { \"\\\\w\": i + l + s + \"_\", \"\\\\W\": c.replace(\"_\", \"\"), \"\\\\s\": p, \"\\\\S\": function () {\n\t\t\t\tfor (var t = h, e = 0; e < p.length; e++) {\n\t\t\t\t\tt = t.replace(p[e], \"\");\n\t\t\t\t}return t;\n\t\t\t}(), \"\\\\d\": s, \"\\\\D\": i + l + c };u.gen = function (t, e, n) {\n\t\t\treturn n = n || { guid: 1 }, u[t.type] ? u[t.type](t, e, n) : u.token(t, e, n);\n\t\t}, u.extend({ token: function token(t, e, n) {\n\t\t\t\tswitch (t.type) {case \"start\":case \"end\":\n\t\t\t\t\t\treturn \"\";case \"any-character\":\n\t\t\t\t\t\treturn o.character();case \"backspace\":\n\t\t\t\t\t\treturn \"\";case \"word-boundary\":\n\t\t\t\t\t\treturn \"\";case \"non-word-boundary\":\n\t\t\t\t\t\tbreak;case \"digit\":\n\t\t\t\t\t\treturn o.pick(s.split(\"\"));case \"non-digit\":\n\t\t\t\t\t\treturn o.pick((i + l + c).split(\"\"));case \"form-feed\":\n\t\t\t\t\t\tbreak;case \"line-feed\":\n\t\t\t\t\t\treturn t.body || t.text;case \"carriage-return\":\n\t\t\t\t\t\tbreak;case \"white-space\":\n\t\t\t\t\t\treturn o.pick(p.split(\"\"));case \"non-white-space\":\n\t\t\t\t\t\treturn o.pick((i + l + s).split(\"\"));case \"tab\":\n\t\t\t\t\t\tbreak;case \"vertical-tab\":\n\t\t\t\t\t\tbreak;case \"word\":\n\t\t\t\t\t\treturn o.pick((i + l + s).split(\"\"));case \"non-word\":\n\t\t\t\t\t\treturn o.pick(c.replace(\"_\", \"\").split(\"\"));case \"null-character\":}return t.body || t.text;\n\t\t\t}, alternate: function alternate(t, e, n) {\n\t\t\t\treturn this.gen(o[\"boolean\"]() ? t.left : t.right, e, n);\n\t\t\t}, match: function match(t, e, n) {\n\t\t\t\te = \"\";for (var r = 0; r < t.body.length; r++) {\n\t\t\t\t\te += this.gen(t.body[r], e, n);\n\t\t\t\t}return e;\n\t\t\t}, \"capture-group\": function captureGroup(t, e, n) {\n\t\t\t\treturn e = this.gen(t.body, e, n), n[n.guid++] = e, e;\n\t\t\t}, \"non-capture-group\": function nonCaptureGroup(t, e, n) {\n\t\t\t\treturn this.gen(t.body, e, n);\n\t\t\t}, \"positive-lookahead\": function positiveLookahead(t, e, n) {\n\t\t\t\treturn this.gen(t.body, e, n);\n\t\t\t}, \"negative-lookahead\": function negativeLookahead(t, e, n) {\n\t\t\t\treturn \"\";\n\t\t\t}, quantified: function quantified(t, e, n) {\n\t\t\t\te = \"\";for (var r = this.quantifier(t.quantifier), a = 0; r > a; a++) {\n\t\t\t\t\te += this.gen(t.body, e, n);\n\t\t\t\t}return e;\n\t\t\t}, quantifier: function quantifier(t, e, n) {\n\t\t\t\tvar r = Math.max(t.min, 0),\n\t\t\t\t    a = isFinite(t.max) ? t.max : r + o.integer(3, 7);return o.integer(r, a);\n\t\t\t}, charset: function charset(t, e, n) {\n\t\t\t\tif (t.invert) return this[\"invert-charset\"](t, e, n);var r = o.pick(t.body);return this.gen(r, e, n);\n\t\t\t}, \"invert-charset\": function invertCharset(t, e, n) {\n\t\t\t\tfor (var r, a = h, u = 0; u < t.body.length; u++) {\n\t\t\t\t\tswitch (r = t.body[u], r.type) {case \"literal\":\n\t\t\t\t\t\t\ta = a.replace(r.body, \"\");break;case \"range\":\n\t\t\t\t\t\t\tfor (var i = this.gen(r.start, e, n).charCodeAt(), l = this.gen(r.end, e, n).charCodeAt(), s = i; l >= s; s++) {\n\t\t\t\t\t\t\t\ta = a.replace(String.fromCharCode(s), \"\");\n\t\t\t\t\t\t\t}default:\n\t\t\t\t\t\t\tvar c = f[r.text];if (c) for (var p = 0; p <= c.length; p++) {\n\t\t\t\t\t\t\t\ta = a.replace(c[p], \"\");\n\t\t\t\t\t\t\t}}\n\t\t\t\t}return o.pick(a.split(\"\"));\n\t\t\t}, range: function range(t, e, n) {\n\t\t\t\tvar r = this.gen(t.start, e, n).charCodeAt(),\n\t\t\t\t    a = this.gen(t.end, e, n).charCodeAt();return String.fromCharCode(o.integer(r, a));\n\t\t\t}, literal: function literal(t, e, n) {\n\t\t\t\treturn t.escaped ? t.body : t.text;\n\t\t\t}, unicode: function unicode(t, e, n) {\n\t\t\t\treturn String.fromCharCode(parseInt(t.code, 16));\n\t\t\t}, hex: function hex(t, e, n) {\n\t\t\t\treturn String.fromCharCode(parseInt(t.code, 16));\n\t\t\t}, octal: function octal(t, e, n) {\n\t\t\t\treturn String.fromCharCode(parseInt(t.code, 8));\n\t\t\t}, \"back-reference\": function backReference(t, e, n) {\n\t\t\t\treturn n[t.code] || \"\";\n\t\t\t}, CONTROL_CHARACTER_MAP: function () {\n\t\t\t\tfor (var t = \"@ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\\\ ] ^ _\".split(\" \"), e = \"\\x00 \u0001 \u0002 \u0003 \u0004 \u0005 \u0006 \u0007 \\b \t \\n \\x0B \\f \\r \u000e \u000f \u0010 \u0011 \u0012 \u0013 \u0014 \u0015 \u0016 \u0017 \u0018 \u0019 \u001a \u001b \u001c \u001d \u001e \u001f\".split(\" \"), n = {}, r = 0; r < t.length; r++) {\n\t\t\t\t\tn[t[r]] = e[r];\n\t\t\t\t}return n;\n\t\t\t}(), \"control-character\": function controlCharacter(t, e, n) {\n\t\t\t\treturn this.CONTROL_CHARACTER_MAP[t.code];\n\t\t\t} }), t.exports = u;\n\t}, function (t, e, n) {\n\t\tt.exports = n(24);\n\t}, function (t, e, n) {\n\t\tfunction r(t, e, n) {\n\t\t\tn = n || [];var i = { name: \"string\" == typeof e ? e.replace(a.RE_KEY, \"$1\") : e, template: t, type: o.type(t), rule: u.parse(e) };switch (i.path = n.slice(0), i.path.push(void 0 === e ? \"ROOT\" : i.name), i.type) {case \"array\":\n\t\t\t\t\ti.items = [], o.each(t, function (t, e) {\n\t\t\t\t\t\ti.items.push(r(t, e, i.path));\n\t\t\t\t\t});break;case \"object\":\n\t\t\t\t\ti.properties = [], o.each(t, function (t, e) {\n\t\t\t\t\t\ti.properties.push(r(t, e, i.path));\n\t\t\t\t\t});}return i;\n\t\t}var a = n(2),\n\t\t    o = n(3),\n\t\t    u = n(4);t.exports = r;\n\t}, function (t, e, n) {\n\t\tt.exports = n(26);\n\t}, function (t, e, n) {\n\t\tfunction r(t, e) {\n\t\t\tfor (var n = u(t), r = i.diff(n, e), a = 0; a < r.length; a++) {}return r;\n\t\t}var a = n(2),\n\t\t    o = n(3),\n\t\t    u = n(23),\n\t\t    i = { diff: function diff(t, e, n) {\n\t\t\t\tvar r = [];return this.name(t, e, n, r) && this.type(t, e, n, r) && (this.value(t, e, n, r), this.properties(t, e, n, r), this.items(t, e, n, r)), r;\n\t\t\t}, name: function name(t, e, n, r) {\n\t\t\t\tvar a = r.length;return l.equal(\"name\", t.path, n + \"\", t.name + \"\", r), r.length === a;\n\t\t\t}, type: function type(t, e, n, r) {\n\t\t\t\tvar u = r.length;switch (t.type) {case \"string\":\n\t\t\t\t\t\tif (t.template.match(a.RE_PLACEHOLDER)) return !0;break;case \"array\":\n\t\t\t\t\t\tif (t.rule.parameters) {\n\t\t\t\t\t\t\tif (void 0 !== t.rule.min && void 0 === t.rule.max && 1 === t.rule.count) return !0;if (t.rule.parameters[2]) return !0;\n\t\t\t\t\t\t}break;case \"function\":\n\t\t\t\t\t\treturn !0;}return l.equal(\"type\", t.path, o.type(e), t.type, r), r.length === u;\n\t\t\t}, value: function value(t, e, n, r) {\n\t\t\t\tvar o = r.length,\n\t\t\t\t    u = t.rule,\n\t\t\t\t    i = t.type;if (\"object\" === i || \"array\" === i || \"function\" === i) return !0;if (!u.parameters) {\n\t\t\t\t\tswitch (i) {case \"regexp\":\n\t\t\t\t\t\t\treturn l.match(\"value\", t.path, e, t.template, r), r.length === o;case \"string\":\n\t\t\t\t\t\t\tif (t.template.match(a.RE_PLACEHOLDER)) return r.length === o;}return l.equal(\"value\", t.path, e, t.template, r), r.length === o;\n\t\t\t\t}var s;switch (i) {case \"number\":\n\t\t\t\t\t\tvar c = (e + \"\").split(\".\");c[0] = +c[0], void 0 !== u.min && void 0 !== u.max && (l.greaterThanOrEqualTo(\"value\", t.path, c[0], Math.min(u.min, u.max), r), l.lessThanOrEqualTo(\"value\", t.path, c[0], Math.max(u.min, u.max), r)), void 0 !== u.min && void 0 === u.max && l.equal(\"value\", t.path, c[0], u.min, r, \"[value] \" + n), u.decimal && (void 0 !== u.dmin && void 0 !== u.dmax && (l.greaterThanOrEqualTo(\"value\", t.path, c[1].length, u.dmin, r), l.lessThanOrEqualTo(\"value\", t.path, c[1].length, u.dmax, r)), void 0 !== u.dmin && void 0 === u.dmax && l.equal(\"value\", t.path, c[1].length, u.dmin, r));break;case \"boolean\":\n\t\t\t\t\t\tbreak;case \"string\":\n\t\t\t\t\t\ts = e.match(new RegExp(t.template, \"g\")), s = s ? s.length : 0, void 0 !== u.min && void 0 !== u.max && (l.greaterThanOrEqualTo(\"repeat count\", t.path, s, u.min, r), l.lessThanOrEqualTo(\"repeat count\", t.path, s, u.max, r)), void 0 !== u.min && void 0 === u.max && l.equal(\"repeat count\", t.path, s, u.min, r);break;case \"regexp\":\n\t\t\t\t\t\ts = e.match(new RegExp(t.template.source.replace(/^\\^|\\$$/g, \"\"), \"g\")), s = s ? s.length : 0, void 0 !== u.min && void 0 !== u.max && (l.greaterThanOrEqualTo(\"repeat count\", t.path, s, u.min, r), l.lessThanOrEqualTo(\"repeat count\", t.path, s, u.max, r)), void 0 !== u.min && void 0 === u.max && l.equal(\"repeat count\", t.path, s, u.min, r);}return r.length === o;\n\t\t\t}, properties: function properties(t, e, n, r) {\n\t\t\t\tvar a = r.length,\n\t\t\t\t    u = t.rule,\n\t\t\t\t    i = o.keys(e);if (t.properties) {\n\t\t\t\t\tif (t.rule.parameters ? (void 0 !== u.min && void 0 !== u.max && (l.greaterThanOrEqualTo(\"properties length\", t.path, i.length, Math.min(u.min, u.max), r), l.lessThanOrEqualTo(\"properties length\", t.path, i.length, Math.max(u.min, u.max), r)), void 0 !== u.min && void 0 === u.max && 1 !== u.count && l.equal(\"properties length\", t.path, i.length, u.min, r)) : l.equal(\"properties length\", t.path, i.length, t.properties.length, r), r.length !== a) return !1;for (var s = 0; s < i.length; s++) {\n\t\t\t\t\t\tr.push.apply(r, this.diff(function () {\n\t\t\t\t\t\t\tvar e;return o.each(t.properties, function (t) {\n\t\t\t\t\t\t\t\tt.name === i[s] && (e = t);\n\t\t\t\t\t\t\t}), e || t.properties[s];\n\t\t\t\t\t\t}(), e[i[s]], i[s]));\n\t\t\t\t\t}return r.length === a;\n\t\t\t\t}\n\t\t\t}, items: function items(t, e, n, r) {\n\t\t\t\tvar a = r.length;if (t.items) {\n\t\t\t\t\tvar o = t.rule;if (t.rule.parameters) {\n\t\t\t\t\t\tif (void 0 !== o.min && void 0 !== o.max && (l.greaterThanOrEqualTo(\"items\", t.path, e.length, Math.min(o.min, o.max) * t.items.length, r, \"[{utype}] array is too short: {path} must have at least {expected} elements but instance has {actual} elements\"), l.lessThanOrEqualTo(\"items\", t.path, e.length, Math.max(o.min, o.max) * t.items.length, r, \"[{utype}] array is too long: {path} must have at most {expected} elements but instance has {actual} elements\")), void 0 !== o.min && void 0 === o.max) {\n\t\t\t\t\t\t\tif (1 === o.count) return r.length === a;l.equal(\"items length\", t.path, e.length, o.min * t.items.length, r);\n\t\t\t\t\t\t}if (o.parameters[2]) return r.length === a;\n\t\t\t\t\t} else l.equal(\"items length\", t.path, e.length, t.items.length, r);if (r.length !== a) return !1;for (var u = 0; u < e.length; u++) {\n\t\t\t\t\t\tr.push.apply(r, this.diff(t.items[u % t.items.length], e[u], u % t.items.length));\n\t\t\t\t\t}return r.length === a;\n\t\t\t\t}\n\t\t\t} },\n\t\t    l = { message: function message(t) {\n\t\t\t\treturn (t.message || \"[{utype}] Expect {path}'{ltype} {action} {expected}, but is {actual}\").replace(\"{utype}\", t.type.toUpperCase()).replace(\"{ltype}\", t.type.toLowerCase()).replace(\"{path}\", o.isArray(t.path) && t.path.join(\".\") || t.path).replace(\"{action}\", t.action).replace(\"{expected}\", t.expected).replace(\"{actual}\", t.actual);\n\t\t\t}, equal: function equal(t, e, n, r, a, o) {\n\t\t\t\tif (n === r) return !0;switch (t) {case \"type\":\n\t\t\t\t\t\tif (\"regexp\" === r && \"string\" === n) return !0;}var u = { path: e, type: t, actual: n, expected: r, action: \"is equal to\", message: o };return u.message = l.message(u), a.push(u), !1;\n\t\t\t}, match: function match(t, e, n, r, a, o) {\n\t\t\t\tif (r.test(n)) return !0;var u = { path: e, type: t, actual: n, expected: r, action: \"matches\", message: o };return u.message = l.message(u), a.push(u), !1;\n\t\t\t}, notEqual: function notEqual(t, e, n, r, a, o) {\n\t\t\t\tif (n !== r) return !0;var u = { path: e, type: t, actual: n, expected: r, action: \"is not equal to\", message: o };return u.message = l.message(u), a.push(u), !1;\n\t\t\t}, greaterThan: function greaterThan(t, e, n, r, a, o) {\n\t\t\t\tif (n > r) return !0;var u = { path: e, type: t, actual: n, expected: r, action: \"is greater than\", message: o };return u.message = l.message(u), a.push(u), !1;\n\t\t\t}, lessThan: function lessThan(t, e, n, r, a, o) {\n\t\t\t\tif (r > n) return !0;var u = { path: e, type: t, actual: n, expected: r, action: \"is less to\", message: o };return u.message = l.message(u), a.push(u), !1;\n\t\t\t}, greaterThanOrEqualTo: function greaterThanOrEqualTo(t, e, n, r, a, o) {\n\t\t\t\tif (n >= r) return !0;var u = { path: e, type: t, actual: n, expected: r, action: \"is greater than or equal to\", message: o };return u.message = l.message(u), a.push(u), !1;\n\t\t\t}, lessThanOrEqualTo: function lessThanOrEqualTo(t, e, n, r, a, o) {\n\t\t\t\tif (r >= n) return !0;var u = { path: e, type: t, actual: n, expected: r, action: \"is less than or equal to\", message: o };return u.message = l.message(u), a.push(u), !1;\n\t\t\t} };r.Diff = i, r.Assert = l, t.exports = r;\n\t}, function (t, e, n) {\n\t\tt.exports = n(28);\n\t}, function (t, e, n) {\n\t\tfunction r() {\n\t\t\tthis.custom = { events: {}, requestHeaders: {}, responseHeaders: {} };\n\t\t}function a() {\n\t\t\tfunction t() {\n\t\t\t\ttry {\n\t\t\t\t\treturn new window._XMLHttpRequest();\n\t\t\t\t} catch (t) {}\n\t\t\t}function e() {\n\t\t\t\ttry {\n\t\t\t\t\treturn new window._ActiveXObject(\"Microsoft.XMLHTTP\");\n\t\t\t\t} catch (t) {}\n\t\t\t}var n = function () {\n\t\t\t\tvar t = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\t\t\t\t    e = /^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,\n\t\t\t\t    n = location.href,\n\t\t\t\t    r = e.exec(n.toLowerCase()) || [];return t.test(r[1]);\n\t\t\t}();return window.ActiveXObject ? !n && t() || e() : t();\n\t\t}function o(t) {\n\t\t\tfunction e(t, e) {\n\t\t\t\treturn \"string\" === i.type(t) ? t === e : \"regexp\" === i.type(t) ? t.test(e) : void 0;\n\t\t\t}for (var n in r.Mock._mocked) {\n\t\t\t\tvar a = r.Mock._mocked[n];if ((!a.rurl || e(a.rurl, t.url)) && (!a.rtype || e(a.rtype, t.type.toLowerCase()))) return a;\n\t\t\t}\n\t\t}function u(t, e) {\n\t\t\treturn i.isFunction(t.template) ? t.template(e) : r.Mock.mock(t.template);\n\t\t}var i = n(3);window._XMLHttpRequest = window.XMLHttpRequest, window._ActiveXObject = window.ActiveXObject;try {\n\t\t\tnew window.Event(\"custom\");\n\t\t} catch (l) {\n\t\t\twindow.Event = function (t, e, n, r) {\n\t\t\t\tvar a = document.createEvent(\"CustomEvent\");return a.initCustomEvent(t, e, n, r), a;\n\t\t\t};\n\t\t}var s = { UNSENT: 0, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: 4 },\n\t\t    c = \"readystatechange loadstart progress abort error load timeout loadend\".split(\" \"),\n\t\t    h = \"timeout withCredentials\".split(\" \"),\n\t\t    p = \"readyState responseURL status statusText responseType response responseText responseXML\".split(\" \"),\n\t\t    f = { 100: \"Continue\", 101: \"Switching Protocols\", 200: \"OK\", 201: \"Created\", 202: \"Accepted\", 203: \"Non-Authoritative Information\", 204: \"No Content\", 205: \"Reset Content\", 206: \"Partial Content\", 300: \"Multiple Choice\", 301: \"Moved Permanently\", 302: \"Found\", 303: \"See Other\", 304: \"Not Modified\", 305: \"Use Proxy\", 307: \"Temporary Redirect\", 400: \"Bad Request\", 401: \"Unauthorized\", 402: \"Payment Required\", 403: \"Forbidden\", 404: \"Not Found\", 405: \"Method Not Allowed\", 406: \"Not Acceptable\", 407: \"Proxy Authentication Required\", 408: \"Request Timeout\", 409: \"Conflict\", 410: \"Gone\", 411: \"Length Required\", 412: \"Precondition Failed\", 413: \"Request Entity Too Large\", 414: \"Request-URI Too Long\", 415: \"Unsupported Media Type\", 416: \"Requested Range Not Satisfiable\", 417: \"Expectation Failed\", 422: \"Unprocessable Entity\", 500: \"Internal Server Error\", 501: \"Not Implemented\", 502: \"Bad Gateway\", 503: \"Service Unavailable\", 504: \"Gateway Timeout\", 505: \"HTTP Version Not Supported\" };r._settings = { timeout: \"10-100\" }, r.setup = function (t) {\n\t\t\treturn i.extend(r._settings, t), r._settings;\n\t\t}, i.extend(r, s), i.extend(r.prototype, s), r.prototype.mock = !0, r.prototype.match = !1, i.extend(r.prototype, { open: function open(t, e, n, u, l) {\n\t\t\t\tfunction s(t) {\n\t\t\t\t\tfor (var e = 0; e < p.length; e++) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tf[p[e]] = m[p[e]];\n\t\t\t\t\t\t} catch (n) {}\n\t\t\t\t\t}f.dispatchEvent(new Event(t.type));\n\t\t\t\t}var f = this;i.extend(this.custom, { method: t, url: e, async: \"boolean\" == typeof n ? n : !0, username: u, password: l, options: { url: e, type: t } }), this.custom.timeout = function (t) {\n\t\t\t\t\tif (\"number\" == typeof t) return t;if (\"string\" == typeof t && !~t.indexOf(\"-\")) return parseInt(t, 10);if (\"string\" == typeof t && ~t.indexOf(\"-\")) {\n\t\t\t\t\t\tvar e = t.split(\"-\"),\n\t\t\t\t\t\t    n = parseInt(e[0], 10),\n\t\t\t\t\t\t    r = parseInt(e[1], 10);return Math.round(Math.random() * (r - n)) + n;\n\t\t\t\t\t}\n\t\t\t\t}(r._settings.timeout);var d = o(this.custom.options);if (d) this.match = !0, this.custom.template = d, this.readyState = r.OPENED, this.dispatchEvent(new Event(\"readystatechange\"));else {\n\t\t\t\t\tvar m = a();this.custom.xhr = m;for (var g = 0; g < c.length; g++) {\n\t\t\t\t\t\tm.addEventListener(c[g], s);\n\t\t\t\t\t}u ? m.open(t, e, n, u, l) : m.open(t, e, n);for (var v = 0; v < h.length; v++) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tm[h[v]] = f[h[v]];\n\t\t\t\t\t\t} catch (x) {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, setRequestHeader: function setRequestHeader(t, e) {\n\t\t\t\tif (!this.match) return void this.custom.xhr.setRequestHeader(t, e);var n = this.custom.requestHeaders;n[t] ? n[t] += \",\" + e : n[t] = e;\n\t\t\t}, timeout: 0, withCredentials: !1, upload: {}, send: function send(t) {\n\t\t\t\tfunction e() {\n\t\t\t\t\tn.readyState = r.HEADERS_RECEIVED, n.dispatchEvent(new Event(\"readystatechange\")), n.readyState = r.LOADING, n.dispatchEvent(new Event(\"readystatechange\")), n.status = 200, n.statusText = f[200], n.response = n.responseText = JSON.stringify(u(n.custom.template, n.custom.options), null, 4), n.readyState = r.DONE, n.dispatchEvent(new Event(\"readystatechange\")), n.dispatchEvent(new Event(\"load\")), n.dispatchEvent(new Event(\"loadend\"));\n\t\t\t\t}var n = this;return this.custom.options.body = t, this.match ? (this.setRequestHeader(\"X-Requested-With\", \"MockXMLHttpRequest\"), this.dispatchEvent(new Event(\"loadstart\")), void (this.custom.async ? setTimeout(e, this.custom.timeout) : e())) : void this.custom.xhr.send(t);\n\t\t\t}, abort: function abort() {\n\t\t\t\treturn this.match ? (this.readyState = r.UNSENT, this.dispatchEvent(new Event(\"abort\", !1, !1, this)), void this.dispatchEvent(new Event(\"error\", !1, !1, this))) : void this.custom.xhr.abort();\n\t\t\t} }), i.extend(r.prototype, { responseURL: \"\", status: r.UNSENT, statusText: \"\", getResponseHeader: function getResponseHeader(t) {\n\t\t\t\treturn this.match ? this.custom.responseHeaders[t.toLowerCase()] : this.custom.xhr.getResponseHeader(t);\n\t\t\t}, getAllResponseHeaders: function getAllResponseHeaders() {\n\t\t\t\tif (!this.match) return this.custom.xhr.getAllResponseHeaders();var t = this.custom.responseHeaders,\n\t\t\t\t    e = \"\";for (var n in t) {\n\t\t\t\t\tt.hasOwnProperty(n) && (e += n + \": \" + t[n] + \"\\r\\n\");\n\t\t\t\t}return e;\n\t\t\t}, overrideMimeType: function overrideMimeType() {}, responseType: \"\", response: null, responseText: \"\", responseXML: null }), i.extend(r.prototype, { addEventListener: function addEventListener(t, e) {\n\t\t\t\tvar n = this.custom.events;n[t] || (n[t] = []), n[t].push(e);\n\t\t\t}, removeEventListener: function removeEventListener(t, e) {\n\t\t\t\tfor (var n = this.custom.events[t] || [], r = 0; r < n.length; r++) {\n\t\t\t\t\tn[r] === e && n.splice(r--, 1);\n\t\t\t\t}\n\t\t\t}, dispatchEvent: function dispatchEvent(t) {\n\t\t\t\tfor (var e = this.custom.events[t.type] || [], n = 0; n < e.length; n++) {\n\t\t\t\t\te[n].call(this, t);\n\t\t\t\t}var r = \"on\" + t.type;this[r] && this[r](t);\n\t\t\t} }), t.exports = r;\n\t}]);\n});\n//# sourceMappingURL=mock-min.js.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Swiper 4.1.0\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * http://www.idangero.us/swiper/\n *\n * Copyright 2014-2018 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: January 13, 2018\n */\n!function (e, t) {\n  \"object\" == ( false ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : e.Swiper = t();\n}(undefined, function () {\n  \"use strict\";\n  var e = function e(_e) {\n    for (var t = 0; t < _e.length; t += 1) {\n      this[t] = _e[t];\n    }return this.length = _e.length, this;\n  };function t(t, i) {\n    var s = [],\n        a = 0;if (t && !i && t instanceof e) return t;if (t) if (\"string\" == typeof t) {\n      var r,\n          n,\n          o = t.trim();if (o.indexOf(\"<\") >= 0 && o.indexOf(\">\") >= 0) {\n        var l = \"div\";for (0 === o.indexOf(\"<li\") && (l = \"ul\"), 0 === o.indexOf(\"<tr\") && (l = \"tbody\"), 0 !== o.indexOf(\"<td\") && 0 !== o.indexOf(\"<th\") || (l = \"tr\"), 0 === o.indexOf(\"<tbody\") && (l = \"table\"), 0 === o.indexOf(\"<option\") && (l = \"select\"), (n = document.createElement(l)).innerHTML = o, a = 0; a < n.childNodes.length; a += 1) {\n          s.push(n.childNodes[a]);\n        }\n      } else for (r = i || \"#\" !== t[0] || t.match(/[ .<>:~]/) ? (i || document).querySelectorAll(t.trim()) : [document.getElementById(t.trim().split(\"#\")[1])], a = 0; a < r.length; a += 1) {\n        r[a] && s.push(r[a]);\n      }\n    } else if (t.nodeType || t === window || t === document) s.push(t);else if (t.length > 0 && t[0].nodeType) for (a = 0; a < t.length; a += 1) {\n      s.push(t[a]);\n    }return new e(s);\n  }function i(e) {\n    for (var t = [], i = 0; i < e.length; i += 1) {\n      -1 === t.indexOf(e[i]) && t.push(e[i]);\n    }return t;\n  }t.fn = e.prototype, t.Class = e, t.Dom7 = e;\"resize scroll\".split(\" \");var s = { addClass: function addClass(e) {\n      if (void 0 === e) return this;for (var t = e.split(\" \"), i = 0; i < t.length; i += 1) {\n        for (var s = 0; s < this.length; s += 1) {\n          void 0 !== this[s].classList && this[s].classList.add(t[i]);\n        }\n      }return this;\n    }, removeClass: function removeClass(e) {\n      for (var t = e.split(\" \"), i = 0; i < t.length; i += 1) {\n        for (var s = 0; s < this.length; s += 1) {\n          void 0 !== this[s].classList && this[s].classList.remove(t[i]);\n        }\n      }return this;\n    }, hasClass: function hasClass(e) {\n      return !!this[0] && this[0].classList.contains(e);\n    }, toggleClass: function toggleClass(e) {\n      for (var t = e.split(\" \"), i = 0; i < t.length; i += 1) {\n        for (var s = 0; s < this.length; s += 1) {\n          void 0 !== this[s].classList && this[s].classList.toggle(t[i]);\n        }\n      }return this;\n    }, attr: function attr(e, t) {\n      var i = arguments;if (1 === arguments.length && \"string\" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0;for (var s = 0; s < this.length; s += 1) {\n        if (2 === i.length) this[s].setAttribute(e, t);else for (var a in e) {\n          this[s][a] = e[a], this[s].setAttribute(a, e[a]);\n        }\n      }return this;\n    }, removeAttr: function removeAttr(e) {\n      for (var t = 0; t < this.length; t += 1) {\n        this[t].removeAttribute(e);\n      }return this;\n    }, data: function data(e, t) {\n      var i;if (void 0 !== t) {\n        for (var s = 0; s < this.length; s += 1) {\n          (i = this[s]).dom7ElementDataStorage || (i.dom7ElementDataStorage = {}), i.dom7ElementDataStorage[e] = t;\n        }return this;\n      }if (i = this[0]) {\n        if (i.dom7ElementDataStorage && e in i.dom7ElementDataStorage) return i.dom7ElementDataStorage[e];var a = i.getAttribute(\"data-\" + e);return a || void 0;\n      }\n    }, transform: function transform(e) {\n      for (var t = 0; t < this.length; t += 1) {\n        var i = this[t].style;i.webkitTransform = e, i.transform = e;\n      }return this;\n    }, transition: function transition(e) {\n      \"string\" != typeof e && (e += \"ms\");for (var t = 0; t < this.length; t += 1) {\n        var i = this[t].style;i.webkitTransitionDuration = e, i.transitionDuration = e;\n      }return this;\n    }, on: function on() {\n      for (var e = [], i = arguments.length; i--;) {\n        e[i] = arguments[i];\n      }var s,\n          a = e[0],\n          r = e[1],\n          n = e[2],\n          o = e[3];function l(e) {\n        var i = e.target;if (i) {\n          var s = e.target.dom7EventData || [];if (s.unshift(e), t(i).is(r)) n.apply(i, s);else for (var a = t(i).parents(), o = 0; o < a.length; o += 1) {\n            t(a[o]).is(r) && n.apply(a[o], s);\n          }\n        }\n      }function d(e) {\n        var t = e && e.target ? e.target.dom7EventData || [] : [];t.unshift(e), n.apply(this, t);\n      }\"function\" == typeof e[1] && (a = (s = e)[0], n = s[1], o = s[2], r = void 0), o || (o = !1);for (var h, p = a.split(\" \"), c = 0; c < this.length; c += 1) {\n        var u = this[c];if (r) for (h = 0; h < p.length; h += 1) {\n          u.dom7LiveListeners || (u.dom7LiveListeners = []), u.dom7LiveListeners.push({ type: a, listener: n, proxyListener: l }), u.addEventListener(p[h], l, o);\n        } else for (h = 0; h < p.length; h += 1) {\n          u.dom7Listeners || (u.dom7Listeners = []), u.dom7Listeners.push({ type: a, listener: n, proxyListener: d }), u.addEventListener(p[h], d, o);\n        }\n      }return this;\n    }, off: function off() {\n      for (var e = [], t = arguments.length; t--;) {\n        e[t] = arguments[t];\n      }var i,\n          s = e[0],\n          a = e[1],\n          r = e[2],\n          n = e[3];\"function\" == typeof e[1] && (s = (i = e)[0], r = i[1], n = i[2], a = void 0), n || (n = !1);for (var o = s.split(\" \"), l = 0; l < o.length; l += 1) {\n        for (var d = 0; d < this.length; d += 1) {\n          var h = this[d];if (a) {\n            if (h.dom7LiveListeners) for (var p = 0; p < h.dom7LiveListeners.length; p += 1) {\n              r ? h.dom7LiveListeners[p].listener === r && h.removeEventListener(o[l], h.dom7LiveListeners[p].proxyListener, n) : h.dom7LiveListeners[p].type === o[l] && h.removeEventListener(o[l], h.dom7LiveListeners[p].proxyListener, n);\n            }\n          } else if (h.dom7Listeners) for (var c = 0; c < h.dom7Listeners.length; c += 1) {\n            r ? h.dom7Listeners[c].listener === r && h.removeEventListener(o[l], h.dom7Listeners[c].proxyListener, n) : h.dom7Listeners[c].type === o[l] && h.removeEventListener(o[l], h.dom7Listeners[c].proxyListener, n);\n          }\n        }\n      }return this;\n    }, trigger: function trigger() {\n      for (var e = [], t = arguments.length; t--;) {\n        e[t] = arguments[t];\n      }for (var i = e[0].split(\" \"), s = e[1], a = 0; a < i.length; a += 1) {\n        for (var r = 0; r < this.length; r += 1) {\n          var n = void 0;try {\n            n = new window.CustomEvent(i[a], { detail: s, bubbles: !0, cancelable: !0 });\n          } catch (e) {\n            (n = document.createEvent(\"Event\")).initEvent(i[a], !0, !0), n.detail = s;\n          }this[r].dom7EventData = e.filter(function (e, t) {\n            return t > 0;\n          }), this[r].dispatchEvent(n), this[r].dom7EventData = [], delete this[r].dom7EventData;\n        }\n      }return this;\n    }, transitionEnd: function transitionEnd(e) {\n      var t,\n          i = [\"webkitTransitionEnd\", \"transitionend\"],\n          s = this;function a(r) {\n        if (r.target === this) for (e.call(this, r), t = 0; t < i.length; t += 1) {\n          s.off(i[t], a);\n        }\n      }if (e) for (t = 0; t < i.length; t += 1) {\n        s.on(i[t], a);\n      }return this;\n    }, outerWidth: function outerWidth(e) {\n      if (this.length > 0) {\n        if (e) {\n          var t = this.styles();return this[0].offsetWidth + parseFloat(t.getPropertyValue(\"margin-right\")) + parseFloat(t.getPropertyValue(\"margin-left\"));\n        }return this[0].offsetWidth;\n      }return null;\n    }, outerHeight: function outerHeight(e) {\n      if (this.length > 0) {\n        if (e) {\n          var t = this.styles();return this[0].offsetHeight + parseFloat(t.getPropertyValue(\"margin-top\")) + parseFloat(t.getPropertyValue(\"margin-bottom\"));\n        }return this[0].offsetHeight;\n      }return null;\n    }, offset: function offset() {\n      if (this.length > 0) {\n        var e = this[0],\n            t = e.getBoundingClientRect(),\n            i = document.body,\n            s = e.clientTop || i.clientTop || 0,\n            a = e.clientLeft || i.clientLeft || 0,\n            r = e === window ? window.scrollY : e.scrollTop,\n            n = e === window ? window.scrollX : e.scrollLeft;return { top: t.top + r - s, left: t.left + n - a };\n      }return null;\n    }, css: function css(e, t) {\n      var i;if (1 === arguments.length) {\n        if (\"string\" != typeof e) {\n          for (i = 0; i < this.length; i += 1) {\n            for (var s in e) {\n              this[i].style[s] = e[s];\n            }\n          }return this;\n        }if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(e);\n      }if (2 === arguments.length && \"string\" == typeof e) {\n        for (i = 0; i < this.length; i += 1) {\n          this[i].style[e] = t;\n        }return this;\n      }return this;\n    }, each: function each(e) {\n      if (!e) return this;for (var t = 0; t < this.length; t += 1) {\n        if (!1 === e.call(this[t], t, this[t])) return this;\n      }return this;\n    }, html: function html(e) {\n      if (void 0 === e) return this[0] ? this[0].innerHTML : void 0;for (var t = 0; t < this.length; t += 1) {\n        this[t].innerHTML = e;\n      }return this;\n    }, text: function text(e) {\n      if (void 0 === e) return this[0] ? this[0].textContent.trim() : null;for (var t = 0; t < this.length; t += 1) {\n        this[t].textContent = e;\n      }return this;\n    }, is: function is(i) {\n      var s,\n          a,\n          r = this[0];if (!r || void 0 === i) return !1;if (\"string\" == typeof i) {\n        if (r.matches) return r.matches(i);if (r.webkitMatchesSelector) return r.webkitMatchesSelector(i);if (r.msMatchesSelector) return r.msMatchesSelector(i);for (s = t(i), a = 0; a < s.length; a += 1) {\n          if (s[a] === r) return !0;\n        }return !1;\n      }if (i === document) return r === document;if (i === window) return r === window;if (i.nodeType || i instanceof e) {\n        for (s = i.nodeType ? [i] : i, a = 0; a < s.length; a += 1) {\n          if (s[a] === r) return !0;\n        }return !1;\n      }return !1;\n    }, index: function index() {\n      var e,\n          t = this[0];if (t) {\n        for (e = 0; null !== (t = t.previousSibling);) {\n          1 === t.nodeType && (e += 1);\n        }return e;\n      }\n    }, eq: function eq(t) {\n      if (void 0 === t) return this;var i,\n          s = this.length;return new e(t > s - 1 ? [] : t < 0 ? (i = s + t) < 0 ? [] : [this[i]] : [this[t]]);\n    }, append: function append() {\n      for (var t, i = [], s = arguments.length; s--;) {\n        i[s] = arguments[s];\n      }for (var a = 0; a < i.length; a += 1) {\n        t = i[a];for (var r = 0; r < this.length; r += 1) {\n          if (\"string\" == typeof t) {\n            var n = document.createElement(\"div\");for (n.innerHTML = t; n.firstChild;) {\n              this[r].appendChild(n.firstChild);\n            }\n          } else if (t instanceof e) for (var o = 0; o < t.length; o += 1) {\n            this[r].appendChild(t[o]);\n          } else this[r].appendChild(t);\n        }\n      }return this;\n    }, prepend: function prepend(t) {\n      var i, s;for (i = 0; i < this.length; i += 1) {\n        if (\"string\" == typeof t) {\n          var a = document.createElement(\"div\");for (a.innerHTML = t, s = a.childNodes.length - 1; s >= 0; s -= 1) {\n            this[i].insertBefore(a.childNodes[s], this[i].childNodes[0]);\n          }\n        } else if (t instanceof e) for (s = 0; s < t.length; s += 1) {\n          this[i].insertBefore(t[s], this[i].childNodes[0]);\n        } else this[i].insertBefore(t, this[i].childNodes[0]);\n      }return this;\n    }, next: function next(i) {\n      return this.length > 0 ? i ? this[0].nextElementSibling && t(this[0].nextElementSibling).is(i) ? new e([this[0].nextElementSibling]) : new e([]) : this[0].nextElementSibling ? new e([this[0].nextElementSibling]) : new e([]) : new e([]);\n    }, nextAll: function nextAll(i) {\n      var s = [],\n          a = this[0];if (!a) return new e([]);for (; a.nextElementSibling;) {\n        var r = a.nextElementSibling;i ? t(r).is(i) && s.push(r) : s.push(r), a = r;\n      }return new e(s);\n    }, prev: function prev(i) {\n      if (this.length > 0) {\n        var s = this[0];return i ? s.previousElementSibling && t(s.previousElementSibling).is(i) ? new e([s.previousElementSibling]) : new e([]) : s.previousElementSibling ? new e([s.previousElementSibling]) : new e([]);\n      }return new e([]);\n    }, prevAll: function prevAll(i) {\n      var s = [],\n          a = this[0];if (!a) return new e([]);for (; a.previousElementSibling;) {\n        var r = a.previousElementSibling;i ? t(r).is(i) && s.push(r) : s.push(r), a = r;\n      }return new e(s);\n    }, parent: function parent(e) {\n      for (var s = [], a = 0; a < this.length; a += 1) {\n        null !== this[a].parentNode && (e ? t(this[a].parentNode).is(e) && s.push(this[a].parentNode) : s.push(this[a].parentNode));\n      }return t(i(s));\n    }, parents: function parents(e) {\n      for (var s = [], a = 0; a < this.length; a += 1) {\n        for (var r = this[a].parentNode; r;) {\n          e ? t(r).is(e) && s.push(r) : s.push(r), r = r.parentNode;\n        }\n      }return t(i(s));\n    }, closest: function closest(t) {\n      var i = this;return void 0 === t ? new e([]) : (i.is(t) || (i = i.parents(t).eq(0)), i);\n    }, find: function find(t) {\n      for (var i = [], s = 0; s < this.length; s += 1) {\n        for (var a = this[s].querySelectorAll(t), r = 0; r < a.length; r += 1) {\n          i.push(a[r]);\n        }\n      }return new e(i);\n    }, children: function children(s) {\n      for (var a = [], r = 0; r < this.length; r += 1) {\n        for (var n = this[r].childNodes, o = 0; o < n.length; o += 1) {\n          s ? 1 === n[o].nodeType && t(n[o]).is(s) && a.push(n[o]) : 1 === n[o].nodeType && a.push(n[o]);\n        }\n      }return new e(i(a));\n    }, remove: function remove() {\n      for (var e = 0; e < this.length; e += 1) {\n        this[e].parentNode && this[e].parentNode.removeChild(this[e]);\n      }return this;\n    }, add: function add() {\n      for (var e = [], i = arguments.length; i--;) {\n        e[i] = arguments[i];\n      }var s, a;for (s = 0; s < e.length; s += 1) {\n        var r = t(e[s]);for (a = 0; a < r.length; a += 1) {\n          this[this.length] = r[a], this.length += 1;\n        }\n      }return this;\n    }, styles: function styles() {\n      return this[0] ? window.getComputedStyle(this[0], null) : {};\n    } };Object.keys(s).forEach(function (e) {\n    t.fn[e] = s[e];\n  });var a,\n      r,\n      n,\n      o = \"undefined\" == typeof window ? { navigator: { userAgent: \"\" }, location: {}, history: {}, addEventListener: function addEventListener() {}, removeEventListener: function removeEventListener() {}, getComputedStyle: function getComputedStyle() {\n      return {};\n    }, Image: function Image() {}, Date: function Date() {}, screen: {} } : window,\n      l = { deleteProps: function deleteProps(e) {\n      var t = e;Object.keys(t).forEach(function (e) {\n        try {\n          t[e] = null;\n        } catch (e) {}try {\n          delete t[e];\n        } catch (e) {}\n      });\n    }, nextTick: function nextTick(e, t) {\n      return void 0 === t && (t = 0), setTimeout(e, t);\n    }, now: function now() {\n      return Date.now();\n    }, getTranslate: function getTranslate(e, t) {\n      var i, s, a;void 0 === t && (t = \"x\");var r = o.getComputedStyle(e, null);return o.WebKitCSSMatrix ? ((s = r.transform || r.webkitTransform).split(\",\").length > 6 && (s = s.split(\", \").map(function (e) {\n        return e.replace(\",\", \".\");\n      }).join(\", \")), a = new o.WebKitCSSMatrix(\"none\" === s ? \"\" : s)) : i = (a = r.MozTransform || r.OTransform || r.MsTransform || r.msTransform || r.transform || r.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\")).toString().split(\",\"), \"x\" === t && (s = o.WebKitCSSMatrix ? a.m41 : 16 === i.length ? parseFloat(i[12]) : parseFloat(i[4])), \"y\" === t && (s = o.WebKitCSSMatrix ? a.m42 : 16 === i.length ? parseFloat(i[13]) : parseFloat(i[5])), s || 0;\n    }, parseUrlQuery: function parseUrlQuery(e) {\n      var t,\n          i,\n          s,\n          a,\n          r = {},\n          n = e || o.location.href;if (\"string\" == typeof n && n.length) for (a = (i = (n = n.indexOf(\"?\") > -1 ? n.replace(/\\S*\\?/, \"\") : \"\").split(\"&\").filter(function (e) {\n        return \"\" !== e;\n      })).length, t = 0; t < a; t += 1) {\n        s = i[t].replace(/#\\S+/g, \"\").split(\"=\"), r[decodeURIComponent(s[0])] = void 0 === s[1] ? void 0 : decodeURIComponent(s[1]) || \"\";\n      }return r;\n    }, isObject: function isObject(e) {\n      return \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && null !== e && e.constructor && e.constructor === Object;\n    }, extend: function extend() {\n      for (var e = [], t = arguments.length; t--;) {\n        e[t] = arguments[t];\n      }for (var i = Object(e[0]), s = 1; s < e.length; s += 1) {\n        var a = e[s];if (void 0 !== a && null !== a) for (var r = Object.keys(Object(a)), n = 0, o = r.length; n < o; n += 1) {\n          var d = r[n],\n              h = Object.getOwnPropertyDescriptor(a, d);void 0 !== h && h.enumerable && (l.isObject(i[d]) && l.isObject(a[d]) ? l.extend(i[d], a[d]) : !l.isObject(i[d]) && l.isObject(a[d]) ? (i[d] = {}, l.extend(i[d], a[d])) : i[d] = a[d]);\n        }\n      }return i;\n    } },\n      d = \"undefined\" == typeof document ? { addEventListener: function addEventListener() {}, removeEventListener: function removeEventListener() {}, activeElement: { blur: function blur() {}, nodeName: \"\" }, querySelector: function querySelector() {\n      return {};\n    }, querySelectorAll: function querySelectorAll() {\n      return [];\n    }, createElement: function createElement() {\n      return { style: {}, setAttribute: function setAttribute() {}, getElementsByTagName: function getElementsByTagName() {\n          return [];\n        } };\n    }, location: { hash: \"\" } } : document,\n      h = (n = d.createElement(\"div\"), { touch: o.Modernizr && !0 === o.Modernizr.touch || !!(\"ontouchstart\" in o || o.DocumentTouch && d instanceof o.DocumentTouch), pointerEvents: !(!o.navigator.pointerEnabled && !o.PointerEvent), prefixedPointerEvents: !!o.navigator.msPointerEnabled, transition: (r = n.style, \"transition\" in r || \"webkitTransition\" in r || \"MozTransition\" in r), transforms3d: o.Modernizr && !0 === o.Modernizr.csstransforms3d || (a = n.style, \"webkitPerspective\" in a || \"MozPerspective\" in a || \"OPerspective\" in a || \"MsPerspective\" in a || \"perspective\" in a), flexbox: function () {\n      for (var e = n.style, t = \"alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient\".split(\" \"), i = 0; i < t.length; i += 1) {\n        if (t[i] in e) return !0;\n      }return !1;\n    }(), observer: \"MutationObserver\" in o || \"WebkitMutationObserver\" in o, passiveListener: function () {\n      var e = !1;try {\n        var t = Object.defineProperty({}, \"passive\", { get: function get() {\n            e = !0;\n          } });o.addEventListener(\"testPassiveListener\", null, t);\n      } catch (e) {}return e;\n    }(), gestures: \"ongesturestart\" in o }),\n      p = function p(e) {\n    void 0 === e && (e = {});var t = this;t.params = e, t.eventsListeners = {}, t.params && t.params.on && Object.keys(t.params.on).forEach(function (e) {\n      t.on(e, t.params.on[e]);\n    });\n  },\n      c = { components: { configurable: !0 } };p.prototype.on = function (e, t) {\n    var i = this;return \"function\" != typeof t ? i : (e.split(\" \").forEach(function (e) {\n      i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e].push(t);\n    }), i);\n  }, p.prototype.once = function (e, t) {\n    var i = this;if (\"function\" != typeof t) return i;return i.on(e, function s() {\n      for (var a = [], r = arguments.length; r--;) {\n        a[r] = arguments[r];\n      }t.apply(i, a), i.off(e, s);\n    });\n  }, p.prototype.off = function (e, t) {\n    var i = this;return e.split(\" \").forEach(function (e) {\n      void 0 === t ? i.eventsListeners[e] = [] : i.eventsListeners[e].forEach(function (s, a) {\n        s === t && i.eventsListeners[e].splice(a, 1);\n      });\n    }), i;\n  }, p.prototype.emit = function () {\n    for (var e = [], t = arguments.length; t--;) {\n      e[t] = arguments[t];\n    }var i,\n        s,\n        a,\n        r = this;return r.eventsListeners ? (\"string\" == typeof e[0] || Array.isArray(e[0]) ? (i = e[0], s = e.slice(1, e.length), a = r) : (i = e[0].events, s = e[0].data, a = e[0].context || r), (Array.isArray(i) ? i : i.split(\" \")).forEach(function (e) {\n      if (r.eventsListeners[e]) {\n        var t = [];r.eventsListeners[e].forEach(function (e) {\n          t.push(e);\n        }), t.forEach(function (e) {\n          e.apply(a, s);\n        });\n      }\n    }), r) : r;\n  }, p.prototype.useModulesParams = function (e) {\n    var t = this;t.modules && Object.keys(t.modules).forEach(function (i) {\n      var s = t.modules[i];s.params && l.extend(e, s.params);\n    });\n  }, p.prototype.useModules = function (e) {\n    void 0 === e && (e = {});var t = this;t.modules && Object.keys(t.modules).forEach(function (i) {\n      var s = t.modules[i],\n          a = e[i] || {};s.instance && Object.keys(s.instance).forEach(function (e) {\n        var i = s.instance[e];t[e] = \"function\" == typeof i ? i.bind(t) : i;\n      }), s.on && t.on && Object.keys(s.on).forEach(function (e) {\n        t.on(e, s.on[e]);\n      }), s.create && s.create.bind(t)(a);\n    });\n  }, c.components.set = function (e) {\n    this.use && this.use(e);\n  }, p.installModule = function (e) {\n    for (var t = [], i = arguments.length - 1; i-- > 0;) {\n      t[i] = arguments[i + 1];\n    }var s = this;s.prototype.modules || (s.prototype.modules = {});var a = e.name || Object.keys(s.prototype.modules).length + \"_\" + l.now();return s.prototype.modules[a] = e, e.proto && Object.keys(e.proto).forEach(function (t) {\n      s.prototype[t] = e.proto[t];\n    }), e.static && Object.keys(e.static).forEach(function (t) {\n      s[t] = e.static[t];\n    }), e.install && e.install.apply(s, t), s;\n  }, p.use = function (e) {\n    for (var t = [], i = arguments.length - 1; i-- > 0;) {\n      t[i] = arguments[i + 1];\n    }var s = this;return Array.isArray(e) ? (e.forEach(function (e) {\n      return s.installModule(e);\n    }), s) : s.installModule.apply(s, [e].concat(t));\n  }, Object.defineProperties(p, c);var u = { updateSize: function updateSize() {\n      var e,\n          t,\n          i = this.$el;e = void 0 !== this.params.width ? this.params.width : i[0].clientWidth, t = void 0 !== this.params.height ? this.params.height : i[0].clientHeight, 0 === e && this.isHorizontal() || 0 === t && this.isVertical() || (e = e - parseInt(i.css(\"padding-left\"), 10) - parseInt(i.css(\"padding-right\"), 10), t = t - parseInt(i.css(\"padding-top\"), 10) - parseInt(i.css(\"padding-bottom\"), 10), l.extend(this, { width: e, height: t, size: this.isHorizontal() ? e : t }));\n    }, updateSlides: function updateSlides() {\n      var e = this.params,\n          t = this.$wrapperEl,\n          i = this.size,\n          s = this.rtl,\n          a = this.wrongRTL,\n          r = t.children(\".\" + this.params.slideClass),\n          n = this.virtual && e.virtual.enabled ? this.virtual.slides.length : r.length,\n          o = [],\n          d = [],\n          p = [],\n          c = e.slidesOffsetBefore;\"function\" == typeof c && (c = e.slidesOffsetBefore.call(this));var u = e.slidesOffsetAfter;\"function\" == typeof u && (u = e.slidesOffsetAfter.call(this));var f = n,\n          v = this.snapGrid.length,\n          m = this.snapGrid.length,\n          g = e.spaceBetween,\n          b = -c,\n          w = 0,\n          y = 0;if (void 0 !== i) {\n        var x, T;\"string\" == typeof g && g.indexOf(\"%\") >= 0 && (g = parseFloat(g.replace(\"%\", \"\")) / 100 * i), this.virtualSize = -g, s ? r.css({ marginLeft: \"\", marginTop: \"\" }) : r.css({ marginRight: \"\", marginBottom: \"\" }), e.slidesPerColumn > 1 && (x = Math.floor(n / e.slidesPerColumn) === n / this.params.slidesPerColumn ? n : Math.ceil(n / e.slidesPerColumn) * e.slidesPerColumn, \"auto\" !== e.slidesPerView && \"row\" === e.slidesPerColumnFill && (x = Math.max(x, e.slidesPerView * e.slidesPerColumn)));for (var E, S = e.slidesPerColumn, C = x / S, M = C - (e.slidesPerColumn * C - n), z = 0; z < n; z += 1) {\n          T = 0;var P = r.eq(z);if (e.slidesPerColumn > 1) {\n            var k = void 0,\n                $ = void 0,\n                L = void 0;\"column\" === e.slidesPerColumnFill ? (L = z - ($ = Math.floor(z / S)) * S, ($ > M || $ === M && L === S - 1) && (L += 1) >= S && (L = 0, $ += 1), k = $ + L * x / S, P.css({ \"-webkit-box-ordinal-group\": k, \"-moz-box-ordinal-group\": k, \"-ms-flex-order\": k, \"-webkit-order\": k, order: k })) : $ = z - (L = Math.floor(z / C)) * C, P.css(\"margin-\" + (this.isHorizontal() ? \"top\" : \"left\"), 0 !== L && e.spaceBetween && e.spaceBetween + \"px\").attr(\"data-swiper-column\", $).attr(\"data-swiper-row\", L);\n          }\"none\" !== P.css(\"display\") && (\"auto\" === e.slidesPerView ? (T = this.isHorizontal() ? P.outerWidth(!0) : P.outerHeight(!0), e.roundLengths && (T = Math.floor(T))) : (T = (i - (e.slidesPerView - 1) * g) / e.slidesPerView, e.roundLengths && (T = Math.floor(T)), r[z] && (this.isHorizontal() ? r[z].style.width = T + \"px\" : r[z].style.height = T + \"px\")), r[z] && (r[z].swiperSlideSize = T), p.push(T), e.centeredSlides ? (b = b + T / 2 + w / 2 + g, 0 === w && 0 !== z && (b = b - i / 2 - g), 0 === z && (b = b - i / 2 - g), Math.abs(b) < .001 && (b = 0), y % e.slidesPerGroup == 0 && o.push(b), d.push(b)) : (y % e.slidesPerGroup == 0 && o.push(b), d.push(b), b = b + T + g), this.virtualSize += T + g, w = T, y += 1);\n        }if (this.virtualSize = Math.max(this.virtualSize, i) + u, s && a && (\"slide\" === e.effect || \"coverflow\" === e.effect) && t.css({ width: this.virtualSize + e.spaceBetween + \"px\" }), h.flexbox && !e.setWrapperSize || (this.isHorizontal() ? t.css({ width: this.virtualSize + e.spaceBetween + \"px\" }) : t.css({ height: this.virtualSize + e.spaceBetween + \"px\" })), e.slidesPerColumn > 1 && (this.virtualSize = (T + e.spaceBetween) * x, this.virtualSize = Math.ceil(this.virtualSize / e.slidesPerColumn) - e.spaceBetween, this.isHorizontal() ? t.css({ width: this.virtualSize + e.spaceBetween + \"px\" }) : t.css({ height: this.virtualSize + e.spaceBetween + \"px\" }), e.centeredSlides)) {\n          E = [];for (var I = 0; I < o.length; I += 1) {\n            o[I] < this.virtualSize + o[0] && E.push(o[I]);\n          }o = E;\n        }if (!e.centeredSlides) {\n          E = [];for (var D = 0; D < o.length; D += 1) {\n            o[D] <= this.virtualSize - i && E.push(o[D]);\n          }o = E, Math.floor(this.virtualSize - i) - Math.floor(o[o.length - 1]) > 1 && o.push(this.virtualSize - i);\n        }0 === o.length && (o = [0]), 0 !== e.spaceBetween && (this.isHorizontal() ? s ? r.css({ marginLeft: g + \"px\" }) : r.css({ marginRight: g + \"px\" }) : r.css({ marginBottom: g + \"px\" })), l.extend(this, { slides: r, snapGrid: o, slidesGrid: d, slidesSizesGrid: p }), n !== f && this.emit(\"slidesLengthChange\"), o.length !== v && (this.params.watchOverflow && this.checkOverflow(), this.emit(\"snapGridLengthChange\")), d.length !== m && this.emit(\"slidesGridLengthChange\"), (e.watchSlidesProgress || e.watchSlidesVisibility) && this.updateSlidesOffset();\n      }\n    }, updateAutoHeight: function updateAutoHeight() {\n      var e,\n          t = [],\n          i = 0;if (\"auto\" !== this.params.slidesPerView && this.params.slidesPerView > 1) for (e = 0; e < Math.ceil(this.params.slidesPerView); e += 1) {\n        var s = this.activeIndex + e;if (s > this.slides.length) break;t.push(this.slides.eq(s)[0]);\n      } else t.push(this.slides.eq(this.activeIndex)[0]);for (e = 0; e < t.length; e += 1) {\n        if (void 0 !== t[e]) {\n          var a = t[e].offsetHeight;i = a > i ? a : i;\n        }\n      }i && this.$wrapperEl.css(\"height\", i + \"px\");\n    }, updateSlidesOffset: function updateSlidesOffset() {\n      for (var e = this.slides, t = 0; t < e.length; t += 1) {\n        e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop;\n      }\n    }, updateSlidesProgress: function updateSlidesProgress(e) {\n      void 0 === e && (e = this.translate || 0);var t = this.params,\n          i = this.slides,\n          s = this.rtl;if (0 !== i.length) {\n        void 0 === i[0].swiperSlideOffset && this.updateSlidesOffset();var a = -e;s && (a = e), i.removeClass(t.slideVisibleClass);for (var r = 0; r < i.length; r += 1) {\n          var n = i[r],\n              o = (a + (t.centeredSlides ? this.minTranslate() : 0) - n.swiperSlideOffset) / (n.swiperSlideSize + t.spaceBetween);if (t.watchSlidesVisibility) {\n            var l = -(a - n.swiperSlideOffset),\n                d = l + this.slidesSizesGrid[r];(l >= 0 && l < this.size || d > 0 && d <= this.size || l <= 0 && d >= this.size) && i.eq(r).addClass(t.slideVisibleClass);\n          }n.progress = s ? -o : o;\n        }\n      }\n    }, updateProgress: function updateProgress(e) {\n      void 0 === e && (e = this.translate || 0);var t = this.params,\n          i = this.maxTranslate() - this.minTranslate(),\n          s = this.progress,\n          a = this.isBeginning,\n          r = this.isEnd,\n          n = a,\n          o = r;0 === i ? (s = 0, a = !0, r = !0) : (a = (s = (e - this.minTranslate()) / i) <= 0, r = s >= 1), l.extend(this, { progress: s, isBeginning: a, isEnd: r }), (t.watchSlidesProgress || t.watchSlidesVisibility) && this.updateSlidesProgress(e), a && !n && this.emit(\"reachBeginning toEdge\"), r && !o && this.emit(\"reachEnd toEdge\"), (n && !a || o && !r) && this.emit(\"fromEdge\"), this.emit(\"progress\", s);\n    }, updateSlidesClasses: function updateSlidesClasses() {\n      var e,\n          t = this.slides,\n          i = this.params,\n          s = this.$wrapperEl,\n          a = this.activeIndex,\n          r = this.realIndex,\n          n = this.virtual && i.virtual.enabled;t.removeClass(i.slideActiveClass + \" \" + i.slideNextClass + \" \" + i.slidePrevClass + \" \" + i.slideDuplicateActiveClass + \" \" + i.slideDuplicateNextClass + \" \" + i.slideDuplicatePrevClass), (e = n ? this.$wrapperEl.find(\".\" + i.slideClass + '[data-swiper-slide-index=\"' + a + '\"]') : t.eq(a)).addClass(i.slideActiveClass), i.loop && (e.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + r + '\"]').addClass(i.slideDuplicateActiveClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + r + '\"]').addClass(i.slideDuplicateActiveClass));var o = e.nextAll(\".\" + i.slideClass).eq(0).addClass(i.slideNextClass);i.loop && 0 === o.length && (o = t.eq(0)).addClass(i.slideNextClass);var l = e.prevAll(\".\" + i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop && 0 === l.length && (l = t.eq(-1)).addClass(i.slidePrevClass), i.loop && (o.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + o.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicateNextClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + o.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicateNextClass), l.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + l.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicatePrevClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + l.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicatePrevClass));\n    }, updateActiveIndex: function updateActiveIndex(e) {\n      var t,\n          i = this.rtl ? this.translate : -this.translate,\n          s = this.slidesGrid,\n          a = this.snapGrid,\n          r = this.params,\n          n = this.activeIndex,\n          o = this.realIndex,\n          d = this.snapIndex,\n          h = e;if (void 0 === h) {\n        for (var p = 0; p < s.length; p += 1) {\n          void 0 !== s[p + 1] ? i >= s[p] && i < s[p + 1] - (s[p + 1] - s[p]) / 2 ? h = p : i >= s[p] && i < s[p + 1] && (h = p + 1) : i >= s[p] && (h = p);\n        }r.normalizeSlideIndex && (h < 0 || void 0 === h) && (h = 0);\n      }if ((t = a.indexOf(i) >= 0 ? a.indexOf(i) : Math.floor(h / r.slidesPerGroup)) >= a.length && (t = a.length - 1), h !== n) {\n        var c = parseInt(this.slides.eq(h).attr(\"data-swiper-slide-index\") || h, 10);l.extend(this, { snapIndex: t, realIndex: c, previousIndex: n, activeIndex: h }), this.emit(\"activeIndexChange\"), this.emit(\"snapIndexChange\"), o !== c && this.emit(\"realIndexChange\"), this.emit(\"slideChange\");\n      } else t !== d && (this.snapIndex = t, this.emit(\"snapIndexChange\"));\n    }, updateClickedSlide: function updateClickedSlide(e) {\n      var i = this.params,\n          s = t(e.target).closest(\".\" + i.slideClass)[0],\n          a = !1;if (s) for (var r = 0; r < this.slides.length; r += 1) {\n        this.slides[r] === s && (a = !0);\n      }if (!s || !a) return this.clickedSlide = void 0, void (this.clickedIndex = void 0);this.clickedSlide = s, this.virtual && this.params.virtual.enabled ? this.clickedIndex = parseInt(t(s).attr(\"data-swiper-slide-index\"), 10) : this.clickedIndex = t(s).index(), i.slideToClickedSlide && void 0 !== this.clickedIndex && this.clickedIndex !== this.activeIndex && this.slideToClickedSlide();\n    } },\n      f = { getTranslate: function getTranslate(e) {\n      void 0 === e && (e = this.isHorizontal() ? \"x\" : \"y\");var t = this.params,\n          i = this.rtl,\n          s = this.translate,\n          a = this.$wrapperEl;if (t.virtualTranslate) return i ? -s : s;var r = l.getTranslate(a[0], e);return i && (r = -r), r || 0;\n    }, setTranslate: function setTranslate(e, t) {\n      var i = this.rtl,\n          s = this.params,\n          a = this.$wrapperEl,\n          r = this.progress,\n          n = 0,\n          o = 0;this.isHorizontal() ? n = i ? -e : e : o = e, s.roundLengths && (n = Math.floor(n), o = Math.floor(o)), s.virtualTranslate || (h.transforms3d ? a.transform(\"translate3d(\" + n + \"px, \" + o + \"px, 0px)\") : a.transform(\"translate(\" + n + \"px, \" + o + \"px)\")), this.translate = this.isHorizontal() ? n : o;var l = this.maxTranslate() - this.minTranslate();(0 === l ? 0 : (e - this.minTranslate()) / l) !== r && this.updateProgress(e), this.emit(\"setTranslate\", this.translate, t);\n    }, minTranslate: function minTranslate() {\n      return -this.snapGrid[0];\n    }, maxTranslate: function maxTranslate() {\n      return -this.snapGrid[this.snapGrid.length - 1];\n    } },\n      v = { setTransition: function setTransition(e, t) {\n      this.$wrapperEl.transition(e), this.emit(\"setTransition\", e, t);\n    }, transitionStart: function transitionStart(e) {\n      void 0 === e && (e = !0);var t = this.activeIndex,\n          i = this.params,\n          s = this.previousIndex;i.autoHeight && this.updateAutoHeight(), this.emit(\"transitionStart\"), e && t !== s && (this.emit(\"slideChangeTransitionStart\"), t > s ? this.emit(\"slideNextTransitionStart\") : this.emit(\"slidePrevTransitionStart\"));\n    }, transitionEnd: function transitionEnd(e) {\n      void 0 === e && (e = !0);var t = this.activeIndex,\n          i = this.previousIndex;this.animating = !1, this.setTransition(0), this.emit(\"transitionEnd\"), e && t !== i && (this.emit(\"slideChangeTransitionEnd\"), t > i ? this.emit(\"slideNextTransitionEnd\") : this.emit(\"slidePrevTransitionEnd\"));\n    } },\n      m = { slideTo: function slideTo(e, t, i, s) {\n      void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === i && (i = !0);var a = this,\n          r = e;r < 0 && (r = 0);var n = a.params,\n          o = a.snapGrid,\n          l = a.slidesGrid,\n          d = a.previousIndex,\n          p = a.activeIndex,\n          c = a.rtl,\n          u = a.$wrapperEl,\n          f = Math.floor(r / n.slidesPerGroup);f >= o.length && (f = o.length - 1), (p || n.initialSlide || 0) === (d || 0) && i && a.emit(\"beforeSlideChangeStart\");var v = -o[f];if (a.updateProgress(v), n.normalizeSlideIndex) for (var m = 0; m < l.length; m += 1) {\n        -Math.floor(100 * v) >= Math.floor(100 * l[m]) && (r = m);\n      }if (a.initialized) {\n        if (!a.allowSlideNext && v < a.translate && v < a.minTranslate()) return !1;if (!a.allowSlidePrev && v > a.translate && v > a.maxTranslate() && (p || 0) !== r) return !1;\n      }return c && -v === a.translate || !c && v === a.translate ? (a.updateActiveIndex(r), n.autoHeight && a.updateAutoHeight(), a.updateSlidesClasses(), \"slide\" !== n.effect && a.setTranslate(v), !1) : (0 !== t && h.transition ? (a.setTransition(t), a.setTranslate(v), a.updateActiveIndex(r), a.updateSlidesClasses(), a.emit(\"beforeTransitionStart\", t, s), a.transitionStart(i), a.animating || (a.animating = !0, u.transitionEnd(function () {\n        a && !a.destroyed && a.transitionEnd(i);\n      }))) : (a.setTransition(0), a.setTranslate(v), a.updateActiveIndex(r), a.updateSlidesClasses(), a.emit(\"beforeTransitionStart\", t, s), a.transitionStart(i), a.transitionEnd(i)), !0);\n    }, slideNext: function slideNext(e, t, i) {\n      void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);var s = this.params,\n          a = this.animating;return s.loop ? !a && (this.loopFix(), this._clientLeft = this.$wrapperEl[0].clientLeft, this.slideTo(this.activeIndex + s.slidesPerGroup, e, t, i)) : this.slideTo(this.activeIndex + s.slidesPerGroup, e, t, i);\n    }, slidePrev: function slidePrev(e, t, i) {\n      void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);var s = this.params,\n          a = this.animating;return s.loop ? !a && (this.loopFix(), this._clientLeft = this.$wrapperEl[0].clientLeft, this.slideTo(this.activeIndex - 1, e, t, i)) : this.slideTo(this.activeIndex - 1, e, t, i);\n    }, slideReset: function slideReset(e, t, i) {\n      void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);return this.slideTo(this.activeIndex, e, t, i);\n    }, slideToClickedSlide: function slideToClickedSlide() {\n      var e,\n          i = this,\n          s = i.params,\n          a = i.$wrapperEl,\n          r = \"auto\" === s.slidesPerView ? i.slidesPerViewDynamic() : s.slidesPerView,\n          n = i.clickedIndex;if (s.loop) {\n        if (i.animating) return;e = parseInt(t(i.clickedSlide).attr(\"data-swiper-slide-index\"), 10), s.centeredSlides ? n < i.loopedSlides - r / 2 || n > i.slides.length - i.loopedSlides + r / 2 ? (i.loopFix(), n = a.children(\".\" + s.slideClass + '[data-swiper-slide-index=\"' + e + '\"]:not(.' + s.slideDuplicateClass + \")\").eq(0).index(), l.nextTick(function () {\n          i.slideTo(n);\n        })) : i.slideTo(n) : n > i.slides.length - r ? (i.loopFix(), n = a.children(\".\" + s.slideClass + '[data-swiper-slide-index=\"' + e + '\"]:not(.' + s.slideDuplicateClass + \")\").eq(0).index(), l.nextTick(function () {\n          i.slideTo(n);\n        })) : i.slideTo(n);\n      } else i.slideTo(n);\n    } },\n      g = { loopCreate: function loopCreate() {\n      var e = this,\n          i = e.params,\n          s = e.$wrapperEl;s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass).remove();var a = s.children(\".\" + i.slideClass);if (i.loopFillGroupWithBlank) {\n        var r = i.slidesPerGroup - a.length % i.slidesPerGroup;if (r !== i.slidesPerGroup) {\n          for (var n = 0; n < r; n += 1) {\n            var o = t(d.createElement(\"div\")).addClass(i.slideClass + \" \" + i.slideBlankClass);s.append(o);\n          }a = s.children(\".\" + i.slideClass);\n        }\n      }\"auto\" !== i.slidesPerView || i.loopedSlides || (i.loopedSlides = a.length), e.loopedSlides = parseInt(i.loopedSlides || i.slidesPerView, 10), e.loopedSlides += i.loopAdditionalSlides, e.loopedSlides > a.length && (e.loopedSlides = a.length);var l = [],\n          h = [];a.each(function (i, s) {\n        var r = t(s);i < e.loopedSlides && h.push(s), i < a.length && i >= a.length - e.loopedSlides && l.push(s), r.attr(\"data-swiper-slide-index\", i);\n      });for (var p = 0; p < h.length; p += 1) {\n        s.append(t(h[p].cloneNode(!0)).addClass(i.slideDuplicateClass));\n      }for (var c = l.length - 1; c >= 0; c -= 1) {\n        s.prepend(t(l[c].cloneNode(!0)).addClass(i.slideDuplicateClass));\n      }\n    }, loopFix: function loopFix() {\n      var e,\n          t = this.params,\n          i = this.activeIndex,\n          s = this.slides,\n          a = this.loopedSlides,\n          r = this.allowSlidePrev,\n          n = this.allowSlideNext;this.allowSlidePrev = !0, this.allowSlideNext = !0, i < a ? (e = s.length - 3 * a + i, e += a, this.slideTo(e, 0, !1, !0)) : (\"auto\" === t.slidesPerView && i >= 2 * a || i > s.length - 2 * t.slidesPerView) && (e = -s.length + i + a, e += a, this.slideTo(e, 0, !1, !0)), this.allowSlidePrev = r, this.allowSlideNext = n;\n    }, loopDestroy: function loopDestroy() {\n      var e = this.$wrapperEl,\n          t = this.params,\n          i = this.slides;e.children(\".\" + t.slideClass + \".\" + t.slideDuplicateClass).remove(), i.removeAttr(\"data-swiper-slide-index\");\n    } },\n      b = { setGrabCursor: function setGrabCursor(e) {\n      if (!h.touch && this.params.simulateTouch) {\n        var t = this.el;t.style.cursor = \"move\", t.style.cursor = e ? \"-webkit-grabbing\" : \"-webkit-grab\", t.style.cursor = e ? \"-moz-grabbin\" : \"-moz-grab\", t.style.cursor = e ? \"grabbing\" : \"grab\";\n      }\n    }, unsetGrabCursor: function unsetGrabCursor() {\n      h.touch || (this.el.style.cursor = \"\");\n    } },\n      w = { appendSlide: function appendSlide(e) {\n      var t = this.$wrapperEl,\n          i = this.params;if (i.loop && this.loopDestroy(), \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && \"length\" in e) for (var s = 0; s < e.length; s += 1) {\n        e[s] && t.append(e[s]);\n      } else t.append(e);i.loop && this.loopCreate(), i.observer && h.observer || this.update();\n    }, prependSlide: function prependSlide(e) {\n      var t = this.params,\n          i = this.$wrapperEl,\n          s = this.activeIndex;t.loop && this.loopDestroy();var a = s + 1;if (\"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && \"length\" in e) {\n        for (var r = 0; r < e.length; r += 1) {\n          e[r] && i.prepend(e[r]);\n        }a = s + e.length;\n      } else i.prepend(e);t.loop && this.loopCreate(), t.observer && h.observer || this.update(), this.slideTo(a, 0, !1);\n    }, removeSlide: function removeSlide(e) {\n      var t = this.params,\n          i = this.$wrapperEl,\n          s = this.activeIndex;t.loop && (this.loopDestroy(), this.slides = i.children(\".\" + t.slideClass));var a,\n          r = s;if (\"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && \"length\" in e) {\n        for (var n = 0; n < e.length; n += 1) {\n          a = e[n], this.slides[a] && this.slides.eq(a).remove(), a < r && (r -= 1);\n        }r = Math.max(r, 0);\n      } else a = e, this.slides[a] && this.slides.eq(a).remove(), a < r && (r -= 1), r = Math.max(r, 0);t.loop && this.loopCreate(), t.observer && h.observer || this.update(), t.loop ? this.slideTo(r + this.loopedSlides, 0, !1) : this.slideTo(r, 0, !1);\n    }, removeAllSlides: function removeAllSlides() {\n      for (var e = [], t = 0; t < this.slides.length; t += 1) {\n        e.push(t);\n      }this.removeSlide(e);\n    } },\n      y = function () {\n    var e = o.navigator.userAgent,\n        t = { ios: !1, android: !1, androidChrome: !1, desktop: !1, windows: !1, iphone: !1, ipod: !1, ipad: !1, cordova: o.cordova || o.phonegap, phonegap: o.cordova || o.phonegap },\n        i = e.match(/(Windows Phone);?[\\s\\/]+([\\d.]+)?/),\n        s = e.match(/(Android);?[\\s\\/]+([\\d.]+)?/),\n        a = e.match(/(iPad).*OS\\s([\\d_]+)/),\n        r = e.match(/(iPod)(.*OS\\s([\\d_]+))?/),\n        n = !a && e.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);if (i && (t.os = \"windows\", t.osVersion = i[2], t.windows = !0), s && !i && (t.os = \"android\", t.osVersion = s[2], t.android = !0, t.androidChrome = e.toLowerCase().indexOf(\"chrome\") >= 0), (a || n || r) && (t.os = \"ios\", t.ios = !0), n && !r && (t.osVersion = n[2].replace(/_/g, \".\"), t.iphone = !0), a && (t.osVersion = a[2].replace(/_/g, \".\"), t.ipad = !0), r && (t.osVersion = r[3] ? r[3].replace(/_/g, \".\") : null, t.iphone = !0), t.ios && t.osVersion && e.indexOf(\"Version/\") >= 0 && \"10\" === t.osVersion.split(\".\")[0] && (t.osVersion = e.toLowerCase().split(\"version/\")[1].split(\" \")[0]), t.desktop = !(t.os || t.android || t.webView), t.webView = (n || a || r) && e.match(/.*AppleWebKit(?!.*Safari)/i), t.os && \"ios\" === t.os) {\n      var l = t.osVersion.split(\".\"),\n          h = d.querySelector('meta[name=\"viewport\"]');t.minimalUi = !t.webView && (r || n) && (1 * l[0] == 7 ? 1 * l[1] >= 1 : 1 * l[0] > 7) && h && h.getAttribute(\"content\").indexOf(\"minimal-ui\") >= 0;\n    }return t.pixelRatio = o.devicePixelRatio || 1, t;\n  }(),\n      x = function x(e) {\n    var i = this.touchEventsData,\n        s = this.params,\n        a = this.touches,\n        r = e;if (r.originalEvent && (r = r.originalEvent), i.isTouchEvent = \"touchstart\" === r.type, (i.isTouchEvent || !(\"which\" in r) || 3 !== r.which) && (!i.isTouched || !i.isMoved)) if (s.noSwiping && t(r.target).closest(\".\" + s.noSwipingClass)[0]) this.allowClick = !0;else if (!s.swipeHandler || t(r).closest(s.swipeHandler)[0]) {\n      a.currentX = \"touchstart\" === r.type ? r.targetTouches[0].pageX : r.pageX, a.currentY = \"touchstart\" === r.type ? r.targetTouches[0].pageY : r.pageY;var n = a.currentX,\n          o = a.currentY;if (!(y.ios && !y.cordova && s.iOSEdgeSwipeDetection && n <= s.iOSEdgeSwipeThreshold && n >= window.screen.width - s.iOSEdgeSwipeThreshold)) {\n        if (l.extend(i, { isTouched: !0, isMoved: !1, allowTouchCallbacks: !0, isScrolling: void 0, startMoving: void 0 }), a.startX = n, a.startY = o, i.touchStartTime = l.now(), this.allowClick = !0, this.updateSize(), this.swipeDirection = void 0, s.threshold > 0 && (i.allowThresholdMove = !1), \"touchstart\" !== r.type) {\n          var h = !0;t(r.target).is(i.formElements) && (h = !1), d.activeElement && t(d.activeElement).is(i.formElements) && d.activeElement.blur(), h && this.allowTouchMove && r.preventDefault();\n        }this.emit(\"touchStart\", r);\n      }\n    }\n  },\n      T = function T(e) {\n    var i = this.touchEventsData,\n        s = this.params,\n        a = this.touches,\n        r = this.rtl,\n        n = e;if (n.originalEvent && (n = n.originalEvent), !i.isTouchEvent || \"mousemove\" !== n.type) {\n      var o = \"touchmove\" === n.type ? n.targetTouches[0].pageX : n.pageX,\n          h = \"touchmove\" === n.type ? n.targetTouches[0].pageY : n.pageY;if (n.preventedByNestedSwiper) return a.startX = o, void (a.startY = h);if (!this.allowTouchMove) return this.allowClick = !1, void (i.isTouched && (l.extend(a, { startX: o, startY: h, currentX: o, currentY: h }), i.touchStartTime = l.now()));if (i.isTouchEvent && s.touchReleaseOnEdges && !s.loop) if (this.isVertical()) {\n        if (h < a.startY && this.translate <= this.maxTranslate() || h > a.startY && this.translate >= this.minTranslate()) return i.isTouched = !1, void (i.isMoved = !1);\n      } else if (o < a.startX && this.translate <= this.maxTranslate() || o > a.startX && this.translate >= this.minTranslate()) return;if (i.isTouchEvent && d.activeElement && n.target === d.activeElement && t(n.target).is(i.formElements)) return i.isMoved = !0, void (this.allowClick = !1);if (i.allowTouchCallbacks && this.emit(\"touchMove\", n), !(n.targetTouches && n.targetTouches.length > 1)) {\n        a.currentX = o, a.currentY = h;var p,\n            c = a.currentX - a.startX,\n            u = a.currentY - a.startY;if (void 0 === i.isScrolling) this.isHorizontal() && a.currentY === a.startY || this.isVertical() && a.currentX === a.startX ? i.isScrolling = !1 : c * c + u * u >= 25 && (p = 180 * Math.atan2(Math.abs(u), Math.abs(c)) / Math.PI, i.isScrolling = this.isHorizontal() ? p > s.touchAngle : 90 - p > s.touchAngle);if (i.isScrolling && this.emit(\"touchMoveOpposite\", n), \"undefined\" == typeof startMoving && (a.currentX === a.startX && a.currentY === a.startY || (i.startMoving = !0)), i.isTouched) if (i.isScrolling) i.isTouched = !1;else if (i.startMoving) {\n          this.allowClick = !1, n.preventDefault(), s.touchMoveStopPropagation && !s.nested && n.stopPropagation(), i.isMoved || (s.loop && this.loopFix(), i.startTranslate = this.getTranslate(), this.setTransition(0), this.animating && this.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\"), i.allowMomentumBounce = !1, !s.grabCursor || !0 !== this.allowSlideNext && !0 !== this.allowSlidePrev || this.setGrabCursor(!0), this.emit(\"sliderFirstMove\", n)), this.emit(\"sliderMove\", n), i.isMoved = !0;var f = this.isHorizontal() ? c : u;a.diff = f, f *= s.touchRatio, r && (f = -f), this.swipeDirection = f > 0 ? \"prev\" : \"next\", i.currentTranslate = f + i.startTranslate;var v = !0,\n              m = s.resistanceRatio;if (s.touchReleaseOnEdges && (m = 0), f > 0 && i.currentTranslate > this.minTranslate() ? (v = !1, s.resistance && (i.currentTranslate = this.minTranslate() - 1 + Math.pow(-this.minTranslate() + i.startTranslate + f, m))) : f < 0 && i.currentTranslate < this.maxTranslate() && (v = !1, s.resistance && (i.currentTranslate = this.maxTranslate() + 1 - Math.pow(this.maxTranslate() - i.startTranslate - f, m))), v && (n.preventedByNestedSwiper = !0), !this.allowSlideNext && \"next\" === this.swipeDirection && i.currentTranslate < i.startTranslate && (i.currentTranslate = i.startTranslate), !this.allowSlidePrev && \"prev\" === this.swipeDirection && i.currentTranslate > i.startTranslate && (i.currentTranslate = i.startTranslate), s.threshold > 0) {\n            if (!(Math.abs(f) > s.threshold || i.allowThresholdMove)) return void (i.currentTranslate = i.startTranslate);if (!i.allowThresholdMove) return i.allowThresholdMove = !0, a.startX = a.currentX, a.startY = a.currentY, i.currentTranslate = i.startTranslate, void (a.diff = this.isHorizontal() ? a.currentX - a.startX : a.currentY - a.startY);\n          }s.followFinger && ((s.freeMode || s.watchSlidesProgress || s.watchSlidesVisibility) && (this.updateActiveIndex(), this.updateSlidesClasses()), s.freeMode && (0 === i.velocities.length && i.velocities.push({ position: a[this.isHorizontal() ? \"startX\" : \"startY\"], time: i.touchStartTime }), i.velocities.push({ position: a[this.isHorizontal() ? \"currentX\" : \"currentY\"], time: l.now() })), this.updateProgress(i.currentTranslate), this.setTranslate(i.currentTranslate));\n        }\n      }\n    }\n  },\n      E = function E(e) {\n    var t = this,\n        i = t.touchEventsData,\n        s = t.params,\n        a = t.touches,\n        r = t.rtl,\n        n = t.$wrapperEl,\n        o = t.slidesGrid,\n        d = t.snapGrid,\n        h = e;if (h.originalEvent && (h = h.originalEvent), i.allowTouchCallbacks && t.emit(\"touchEnd\", h), i.allowTouchCallbacks = !1, i.isTouched) {\n      s.grabCursor && i.isMoved && i.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);var p,\n          c = l.now(),\n          u = c - i.touchStartTime;if (t.allowClick && (t.updateClickedSlide(h), t.emit(\"tap\", h), u < 300 && c - i.lastClickTime > 300 && (i.clickTimeout && clearTimeout(i.clickTimeout), i.clickTimeout = l.nextTick(function () {\n        t && !t.destroyed && t.emit(\"click\", h);\n      }, 300)), u < 300 && c - i.lastClickTime < 300 && (i.clickTimeout && clearTimeout(i.clickTimeout), t.emit(\"doubleTap\", h))), i.lastClickTime = l.now(), l.nextTick(function () {\n        t.destroyed || (t.allowClick = !0);\n      }), !i.isTouched || !i.isMoved || !t.swipeDirection || 0 === a.diff || i.currentTranslate === i.startTranslate) return i.isTouched = !1, void (i.isMoved = !1);if (i.isTouched = !1, i.isMoved = !1, p = s.followFinger ? r ? t.translate : -t.translate : -i.currentTranslate, s.freeMode) {\n        if (p < -t.minTranslate()) return void t.slideTo(t.activeIndex);if (p > -t.maxTranslate()) return void (t.slides.length < d.length ? t.slideTo(d.length - 1) : t.slideTo(t.slides.length - 1));if (s.freeModeMomentum) {\n          if (i.velocities.length > 1) {\n            var f = i.velocities.pop(),\n                v = i.velocities.pop(),\n                m = f.position - v.position,\n                g = f.time - v.time;t.velocity = m / g, t.velocity /= 2, Math.abs(t.velocity) < s.freeModeMinimumVelocity && (t.velocity = 0), (g > 150 || l.now() - f.time > 300) && (t.velocity = 0);\n          } else t.velocity = 0;t.velocity *= s.freeModeMomentumVelocityRatio, i.velocities.length = 0;var b = 1e3 * s.freeModeMomentumRatio,\n              w = t.velocity * b,\n              y = t.translate + w;r && (y = -y);var x,\n              T = !1,\n              E = 20 * Math.abs(t.velocity) * s.freeModeMomentumBounceRatio;if (y < t.maxTranslate()) s.freeModeMomentumBounce ? (y + t.maxTranslate() < -E && (y = t.maxTranslate() - E), x = t.maxTranslate(), T = !0, i.allowMomentumBounce = !0) : y = t.maxTranslate();else if (y > t.minTranslate()) s.freeModeMomentumBounce ? (y - t.minTranslate() > E && (y = t.minTranslate() + E), x = t.minTranslate(), T = !0, i.allowMomentumBounce = !0) : y = t.minTranslate();else if (s.freeModeSticky) {\n            for (var S, C = 0; C < d.length; C += 1) {\n              if (d[C] > -y) {\n                S = C;break;\n              }\n            }y = -(y = Math.abs(d[S] - y) < Math.abs(d[S - 1] - y) || \"next\" === t.swipeDirection ? d[S] : d[S - 1]);\n          }if (0 !== t.velocity) b = r ? Math.abs((-y - t.translate) / t.velocity) : Math.abs((y - t.translate) / t.velocity);else if (s.freeModeSticky) return void t.slideReset();s.freeModeMomentumBounce && T ? (t.updateProgress(x), t.setTransition(b), t.setTranslate(y), t.transitionStart(), t.animating = !0, n.transitionEnd(function () {\n            t && !t.destroyed && i.allowMomentumBounce && (t.emit(\"momentumBounce\"), t.setTransition(s.speed), t.setTranslate(x), n.transitionEnd(function () {\n              t && !t.destroyed && t.transitionEnd();\n            }));\n          })) : t.velocity ? (t.updateProgress(y), t.setTransition(b), t.setTranslate(y), t.transitionStart(), t.animating || (t.animating = !0, n.transitionEnd(function () {\n            t && !t.destroyed && t.transitionEnd();\n          }))) : t.updateProgress(y), t.updateActiveIndex(), t.updateSlidesClasses();\n        }(!s.freeModeMomentum || u >= s.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses());\n      } else {\n        for (var M = 0, z = t.slidesSizesGrid[0], P = 0; P < o.length; P += s.slidesPerGroup) {\n          void 0 !== o[P + s.slidesPerGroup] ? p >= o[P] && p < o[P + s.slidesPerGroup] && (M = P, z = o[P + s.slidesPerGroup] - o[P]) : p >= o[P] && (M = P, z = o[o.length - 1] - o[o.length - 2]);\n        }var k = (p - o[M]) / z;if (u > s.longSwipesMs) {\n          if (!s.longSwipes) return void t.slideTo(t.activeIndex);\"next\" === t.swipeDirection && (k >= s.longSwipesRatio ? t.slideTo(M + s.slidesPerGroup) : t.slideTo(M)), \"prev\" === t.swipeDirection && (k > 1 - s.longSwipesRatio ? t.slideTo(M + s.slidesPerGroup) : t.slideTo(M));\n        } else {\n          if (!s.shortSwipes) return void t.slideTo(t.activeIndex);\"next\" === t.swipeDirection && t.slideTo(M + s.slidesPerGroup), \"prev\" === t.swipeDirection && t.slideTo(M);\n        }\n      }\n    }\n  },\n      S = function S() {\n    var e = this.params,\n        t = this.el;if (!t || 0 !== t.offsetWidth) {\n      e.breakpoints && this.setBreakpoint();var i = this.allowSlideNext,\n          s = this.allowSlidePrev;if (this.allowSlideNext = !0, this.allowSlidePrev = !0, this.updateSize(), this.updateSlides(), e.freeMode) {\n        var a = Math.min(Math.max(this.translate, this.maxTranslate()), this.minTranslate());this.setTranslate(a), this.updateActiveIndex(), this.updateSlidesClasses(), e.autoHeight && this.updateAutoHeight();\n      } else this.updateSlidesClasses(), (\"auto\" === e.slidesPerView || e.slidesPerView > 1) && this.isEnd && !this.params.centeredSlides ? this.slideTo(this.slides.length - 1, 0, !1, !0) : this.slideTo(this.activeIndex, 0, !1, !0);this.allowSlidePrev = s, this.allowSlideNext = i;\n    }\n  },\n      C = function C(e) {\n    this.allowClick || (this.params.preventClicks && e.preventDefault(), this.params.preventClicksPropagation && this.animating && (e.stopPropagation(), e.stopImmediatePropagation()));\n  };var M = { init: !0, direction: \"horizontal\", touchEventsTarget: \"container\", initialSlide: 0, speed: 300, iOSEdgeSwipeDetection: !1, iOSEdgeSwipeThreshold: 20, freeMode: !1, freeModeMomentum: !0, freeModeMomentumRatio: 1, freeModeMomentumBounce: !0, freeModeMomentumBounceRatio: 1, freeModeMomentumVelocityRatio: 1, freeModeSticky: !1, freeModeMinimumVelocity: .02, autoHeight: !1, setWrapperSize: !1, virtualTranslate: !1, effect: \"slide\", breakpoints: void 0, spaceBetween: 0, slidesPerView: 1, slidesPerColumn: 1, slidesPerColumnFill: \"column\", slidesPerGroup: 1, centeredSlides: !1, slidesOffsetBefore: 0, slidesOffsetAfter: 0, normalizeSlideIndex: !0, watchOverflow: !1, roundLengths: !1, touchRatio: 1, touchAngle: 45, simulateTouch: !0, shortSwipes: !0, longSwipes: !0, longSwipesRatio: .5, longSwipesMs: 300, followFinger: !0, allowTouchMove: !0, threshold: 0, touchMoveStopPropagation: !0, touchReleaseOnEdges: !1, uniqueNavElements: !0, resistance: !0, resistanceRatio: .85, watchSlidesProgress: !1, watchSlidesVisibility: !1, grabCursor: !1, preventClicks: !0, preventClicksPropagation: !0, slideToClickedSlide: !1, preloadImages: !0, updateOnImagesReady: !0, loop: !1, loopAdditionalSlides: 0, loopedSlides: null, loopFillGroupWithBlank: !1, allowSlidePrev: !0, allowSlideNext: !0, swipeHandler: null, noSwiping: !0, noSwipingClass: \"swiper-no-swiping\", passiveListeners: !0, containerModifierClass: \"swiper-container-\", slideClass: \"swiper-slide\", slideBlankClass: \"swiper-slide-invisible-blank\", slideActiveClass: \"swiper-slide-active\", slideDuplicateActiveClass: \"swiper-slide-duplicate-active\", slideVisibleClass: \"swiper-slide-visible\", slideDuplicateClass: \"swiper-slide-duplicate\", slideNextClass: \"swiper-slide-next\", slideDuplicateNextClass: \"swiper-slide-duplicate-next\", slidePrevClass: \"swiper-slide-prev\", slideDuplicatePrevClass: \"swiper-slide-duplicate-prev\", wrapperClass: \"swiper-wrapper\", runCallbacksOnInit: !0 },\n      z = { update: u, translate: f, transition: v, slide: m, loop: g, grabCursor: b, manipulation: w, events: { attachEvents: function attachEvents() {\n        var e = this.params,\n            t = this.touchEvents,\n            i = this.el,\n            s = this.wrapperEl;this.onTouchStart = x.bind(this), this.onTouchMove = T.bind(this), this.onTouchEnd = E.bind(this), this.onClick = C.bind(this);var a = \"container\" === e.touchEventsTarget ? i : s,\n            r = !!e.nested;if (h.pointerEvents || h.prefixedPointerEvents) a.addEventListener(t.start, this.onTouchStart, !1), (h.touch ? a : d).addEventListener(t.move, this.onTouchMove, r), (h.touch ? a : d).addEventListener(t.end, this.onTouchEnd, !1);else {\n          if (h.touch) {\n            var n = !(\"touchstart\" !== t.start || !h.passiveListener || !e.passiveListeners) && { passive: !0, capture: !1 };a.addEventListener(t.start, this.onTouchStart, n), a.addEventListener(t.move, this.onTouchMove, h.passiveListener ? { passive: !1, capture: r } : r), a.addEventListener(t.end, this.onTouchEnd, n);\n          }(e.simulateTouch && !y.ios && !y.android || e.simulateTouch && !h.touch && y.ios) && (a.addEventListener(\"mousedown\", this.onTouchStart, !1), d.addEventListener(\"mousemove\", this.onTouchMove, r), d.addEventListener(\"mouseup\", this.onTouchEnd, !1));\n        }(e.preventClicks || e.preventClicksPropagation) && a.addEventListener(\"click\", this.onClick, !0), this.on(\"resize observerUpdate\", S);\n      }, detachEvents: function detachEvents() {\n        var e = this.params,\n            t = this.touchEvents,\n            i = this.el,\n            s = this.wrapperEl,\n            a = \"container\" === e.touchEventsTarget ? i : s,\n            r = !!e.nested;if (h.pointerEvents || h.prefixedPointerEvents) a.removeEventListener(t.start, this.onTouchStart, !1), (h.touch ? a : d).removeEventListener(t.move, this.onTouchMove, r), (h.touch ? a : d).removeEventListener(t.end, this.onTouchEnd, !1);else {\n          if (h.touch) {\n            var n = !(\"onTouchStart\" !== t.start || !h.passiveListener || !e.passiveListeners) && { passive: !0, capture: !1 };a.removeEventListener(t.start, this.onTouchStart, n), a.removeEventListener(t.move, this.onTouchMove, r), a.removeEventListener(t.end, this.onTouchEnd, n);\n          }(e.simulateTouch && !y.ios && !y.android || e.simulateTouch && !h.touch && y.ios) && (a.removeEventListener(\"mousedown\", this.onTouchStart, !1), d.removeEventListener(\"mousemove\", this.onTouchMove, r), d.removeEventListener(\"mouseup\", this.onTouchEnd, !1));\n        }(e.preventClicks || e.preventClicksPropagation) && a.removeEventListener(\"click\", this.onClick, !0), this.off(\"resize observerUpdate\", S);\n      } }, breakpoints: { setBreakpoint: function setBreakpoint() {\n        var e = this.activeIndex,\n            t = this.loopedSlides;void 0 === t && (t = 0);var i = this.params,\n            s = i.breakpoints;if (s && (!s || 0 !== Object.keys(s).length)) {\n          var a = this.getBreakpoint(s);if (a && this.currentBreakpoint !== a) {\n            var r = a in s ? s[a] : this.originalParams,\n                n = i.loop && r.slidesPerView !== i.slidesPerView;l.extend(this.params, r), l.extend(this, { allowTouchMove: this.params.allowTouchMove, allowSlideNext: this.params.allowSlideNext, allowSlidePrev: this.params.allowSlidePrev }), this.currentBreakpoint = a, n && (this.loopDestroy(), this.loopCreate(), this.updateSlides(), this.slideTo(e - t + this.loopedSlides, 0, !1)), this.emit(\"breakpoint\", r);\n          }\n        }\n      }, getBreakpoint: function getBreakpoint(e) {\n        if (e) {\n          var t = !1,\n              i = [];Object.keys(e).forEach(function (e) {\n            i.push(e);\n          }), i.sort(function (e, t) {\n            return parseInt(e, 10) - parseInt(t, 10);\n          });for (var s = 0; s < i.length; s += 1) {\n            var a = i[s];a >= o.innerWidth && !t && (t = a);\n          }return t || \"max\";\n        }\n      } }, checkOverflow: { checkOverflow: function checkOverflow() {\n        var e = this.isLocked;this.isLocked = 1 === this.snapGrid.length, this.allowTouchMove = !this.isLocked, e && e !== this.isLocked && (this.isEnd = !1, this.navigation.update());\n      } }, classes: { addClasses: function addClasses() {\n        var e = this.classNames,\n            t = this.params,\n            i = this.rtl,\n            s = this.$el,\n            a = [];a.push(t.direction), t.freeMode && a.push(\"free-mode\"), h.flexbox || a.push(\"no-flexbox\"), t.autoHeight && a.push(\"autoheight\"), i && a.push(\"rtl\"), t.slidesPerColumn > 1 && a.push(\"multirow\"), y.android && a.push(\"android\"), y.ios && a.push(\"ios\"), (h.pointerEvents || h.prefixedPointerEvents) && a.push(\"wp8-\" + t.direction), a.forEach(function (i) {\n          e.push(t.containerModifierClass + i);\n        }), s.addClass(e.join(\" \"));\n      }, removeClasses: function removeClasses() {\n        var e = this.$el,\n            t = this.classNames;e.removeClass(t.join(\" \"));\n      } }, images: { loadImage: function loadImage(e, t, i, s, a, r) {\n        var n;function l() {\n          r && r();\n        }e.complete && a ? l() : t ? ((n = new o.Image()).onload = l, n.onerror = l, s && (n.sizes = s), i && (n.srcset = i), t && (n.src = t)) : l();\n      }, preloadImages: function preloadImages() {\n        var e = this;function t() {\n          void 0 !== e && null !== e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit(\"imagesReady\")));\n        }e.imagesToLoad = e.$el.find(\"img\");for (var i = 0; i < e.imagesToLoad.length; i += 1) {\n          var s = e.imagesToLoad[i];e.loadImage(s, s.currentSrc || s.getAttribute(\"src\"), s.srcset || s.getAttribute(\"srcset\"), s.sizes || s.getAttribute(\"sizes\"), !0, t);\n        }\n      } } },\n      P = {},\n      k = function (e) {\n    function i() {\n      for (var s, a, r, n = [], o = arguments.length; o--;) {\n        n[o] = arguments[o];\n      }1 === n.length && n[0].constructor && n[0].constructor === Object ? a = n[0] : (s = (r = n)[0], a = r[1]);a || (a = {}), a = l.extend({}, a), s && !a.el && (a.el = s), e.call(this, a), Object.keys(z).forEach(function (e) {\n        Object.keys(z[e]).forEach(function (t) {\n          i.prototype[t] || (i.prototype[t] = z[e][t]);\n        });\n      });var d = this;void 0 === d.modules && (d.modules = {}), Object.keys(d.modules).forEach(function (e) {\n        var t = d.modules[e];if (t.params) {\n          var i = Object.keys(t.params)[0],\n              s = t.params[i];if (\"object\" != (typeof s === \"undefined\" ? \"undefined\" : _typeof(s))) return;if (!(i in a && \"enabled\" in s)) return;!0 === a[i] && (a[i] = { enabled: !0 }), \"object\" != _typeof(a[i]) || \"enabled\" in a[i] || (a[i].enabled = !0), a[i] || (a[i] = { enabled: !1 });\n        }\n      });var p = l.extend({}, M);d.useModulesParams(p), d.params = l.extend({}, p, P, a), d.originalParams = l.extend({}, d.params), d.passedParams = l.extend({}, a);var c = t(d.params.el);if (s = c[0]) {\n        if (c.length > 1) {\n          var u = [];return c.each(function (e, t) {\n            var s = l.extend({}, a, { el: t });u.push(new i(s));\n          }), u;\n        }s.swiper = d, c.data(\"swiper\", d);var f,\n            v,\n            m = c.children(\".\" + d.params.wrapperClass);return l.extend(d, { $el: c, el: s, $wrapperEl: m, wrapperEl: m[0], classNames: [], slides: t(), slidesGrid: [], snapGrid: [], slidesSizesGrid: [], isHorizontal: function isHorizontal() {\n            return \"horizontal\" === d.params.direction;\n          }, isVertical: function isVertical() {\n            return \"vertical\" === d.params.direction;\n          }, rtl: \"horizontal\" === d.params.direction && (\"rtl\" === s.dir.toLowerCase() || \"rtl\" === c.css(\"direction\")), wrongRTL: \"-webkit-box\" === m.css(\"display\"), activeIndex: 0, realIndex: 0, isBeginning: !0, isEnd: !1, translate: 0, progress: 0, velocity: 0, animating: !1, allowSlideNext: d.params.allowSlideNext, allowSlidePrev: d.params.allowSlidePrev, touchEvents: (f = [\"touchstart\", \"touchmove\", \"touchend\"], v = [\"mousedown\", \"mousemove\", \"mouseup\"], h.pointerEvents ? v = [\"pointerdown\", \"pointermove\", \"pointerup\"] : h.prefixedPointerEvents && (v = [\"MSPointerDown\", \"MSPointerMove\", \"MSPointerUp\"]), { start: h.touch || !d.params.simulateTouch ? f[0] : v[0], move: h.touch || !d.params.simulateTouch ? f[1] : v[1], end: h.touch || !d.params.simulateTouch ? f[2] : v[2] }), touchEventsData: { isTouched: void 0, isMoved: void 0, allowTouchCallbacks: void 0, touchStartTime: void 0, isScrolling: void 0, currentTranslate: void 0, startTranslate: void 0, allowThresholdMove: void 0, formElements: \"input, select, option, textarea, button, video\", lastClickTime: l.now(), clickTimeout: void 0, velocities: [], allowMomentumBounce: void 0, isTouchEvent: void 0, startMoving: void 0 }, allowClick: !0, allowTouchMove: d.params.allowTouchMove, touches: { startX: 0, startY: 0, currentX: 0, currentY: 0, diff: 0 }, imagesToLoad: [], imagesLoaded: 0 }), d.useModules(), d.params.init && d.init(), d;\n      }\n    }e && (i.__proto__ = e), i.prototype = Object.create(e && e.prototype), i.prototype.constructor = i;var s = { extendedDefaults: { configurable: !0 }, defaults: { configurable: !0 }, Class: { configurable: !0 }, $: { configurable: !0 } };return i.prototype.slidesPerViewDynamic = function () {\n      var e = this.params,\n          t = this.slides,\n          i = this.slidesGrid,\n          s = this.size,\n          a = this.activeIndex,\n          r = 1;if (e.centeredSlides) {\n        for (var n, o = t[a].swiperSlideSize, l = a + 1; l < t.length; l += 1) {\n          t[l] && !n && (r += 1, (o += t[l].swiperSlideSize) > s && (n = !0));\n        }for (var d = a - 1; d >= 0; d -= 1) {\n          t[d] && !n && (r += 1, (o += t[d].swiperSlideSize) > s && (n = !0));\n        }\n      } else for (var h = a + 1; h < t.length; h += 1) {\n        i[h] - i[a] < s && (r += 1);\n      }return r;\n    }, i.prototype.update = function () {\n      var e = this;e && !e.destroyed && (e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), e.params.freeMode ? (t(), e.params.autoHeight && e.updateAutoHeight()) : ((\"auto\" === e.params.slidesPerView || e.params.slidesPerView > 1) && e.isEnd && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0)) || t(), e.emit(\"update\"));function t() {\n        var t = e.rtl ? -1 * e.translate : e.translate,\n            i = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate());e.setTranslate(i), e.updateActiveIndex(), e.updateSlidesClasses();\n      }\n    }, i.prototype.init = function () {\n      this.initialized || (this.emit(\"beforeInit\"), this.params.breakpoints && this.setBreakpoint(), this.addClasses(), this.params.loop && this.loopCreate(), this.updateSize(), this.updateSlides(), this.params.watchOverflow && this.checkOverflow(), this.params.grabCursor && this.setGrabCursor(), this.params.preloadImages && this.preloadImages(), this.params.loop ? this.slideTo(this.params.initialSlide + this.loopedSlides, 0, this.params.runCallbacksOnInit) : this.slideTo(this.params.initialSlide, 0, this.params.runCallbacksOnInit), this.attachEvents(), this.initialized = !0, this.emit(\"init\"));\n    }, i.prototype.destroy = function (e, t) {\n      void 0 === e && (e = !0), void 0 === t && (t = !0);var i = this,\n          s = i.params,\n          a = i.$el,\n          r = i.$wrapperEl,\n          n = i.slides;i.emit(\"beforeDestroy\"), i.initialized = !1, i.detachEvents(), s.loop && i.loopDestroy(), t && (i.removeClasses(), a.removeAttr(\"style\"), r.removeAttr(\"style\"), n && n.length && n.removeClass([s.slideVisibleClass, s.slideActiveClass, s.slideNextClass, s.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\").removeAttr(\"data-swiper-column\").removeAttr(\"data-swiper-row\")), i.emit(\"destroy\"), Object.keys(i.eventsListeners).forEach(function (e) {\n        i.off(e);\n      }), !1 !== e && (i.$el[0].swiper = null, i.$el.data(\"swiper\", null), l.deleteProps(i)), i.destroyed = !0;\n    }, i.extendDefaults = function (e) {\n      l.extend(P, e);\n    }, s.extendedDefaults.get = function () {\n      return P;\n    }, s.defaults.get = function () {\n      return M;\n    }, s.Class.get = function () {\n      return e;\n    }, s.$.get = function () {\n      return t;\n    }, Object.defineProperties(i, s), i;\n  }(p),\n      $ = { name: \"device\", proto: { device: y }, static: { device: y } },\n      L = { name: \"support\", proto: { support: h }, static: { support: h } },\n      I = function () {\n    return { isSafari: (e = o.navigator.userAgent.toLowerCase(), e.indexOf(\"safari\") >= 0 && e.indexOf(\"chrome\") < 0 && e.indexOf(\"android\") < 0), isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(o.navigator.userAgent) };var e;\n  }(),\n      D = { name: \"browser\", proto: { browser: I }, static: { browser: I } },\n      O = { name: \"resize\", create: function create() {\n      var e = this;l.extend(e, { resize: { resizeHandler: function resizeHandler() {\n            e && !e.destroyed && e.initialized && (e.emit(\"beforeResize\"), e.emit(\"resize\"));\n          }, orientationChangeHandler: function orientationChangeHandler() {\n            e && !e.destroyed && e.initialized && e.emit(\"orientationchange\");\n          } } });\n    }, on: { init: function init() {\n        o.addEventListener(\"resize\", this.resize.resizeHandler), o.addEventListener(\"orientationchange\", this.resize.orientationChangeHandler);\n      }, destroy: function destroy() {\n        o.removeEventListener(\"resize\", this.resize.resizeHandler), o.removeEventListener(\"orientationchange\", this.resize.orientationChangeHandler);\n      } } },\n      A = { func: o.MutationObserver || o.WebkitMutationObserver, attach: function attach(e, t) {\n      void 0 === t && (t = {});var i = this,\n          s = new (0, A.func)(function (e) {\n        e.forEach(function (e) {\n          i.emit(\"observerUpdate\", e);\n        });\n      });s.observe(e, { attributes: void 0 === t.attributes || t.attributes, childList: void 0 === t.childList || t.childList, characterData: void 0 === t.characterData || t.characterData }), i.observer.observers.push(s);\n    }, init: function init() {\n      if (h.observer && this.params.observer) {\n        if (this.params.observeParents) for (var e = this.$el.parents(), t = 0; t < e.length; t += 1) {\n          this.observer.attach(e[t]);\n        }this.observer.attach(this.$el[0], { childList: !1 }), this.observer.attach(this.$wrapperEl[0], { attributes: !1 });\n      }\n    }, destroy: function destroy() {\n      this.observer.observers.forEach(function (e) {\n        e.disconnect();\n      }), this.observer.observers = [];\n    } },\n      H = { name: \"observer\", params: { observer: !1, observeParents: !1 }, create: function create() {\n      l.extend(this, { observer: { init: A.init.bind(this), attach: A.attach.bind(this), destroy: A.destroy.bind(this), observers: [] } });\n    }, on: { init: function init() {\n        this.observer.init();\n      }, destroy: function destroy() {\n        this.observer.destroy();\n      } } },\n      N = { update: function update(e) {\n      var t = this,\n          i = t.params,\n          s = i.slidesPerView,\n          a = i.slidesPerGroup,\n          r = i.centeredSlides,\n          n = t.virtual,\n          o = n.from,\n          d = n.to,\n          h = n.slides,\n          p = n.slidesGrid,\n          c = n.renderSlide,\n          u = n.offset;t.updateActiveIndex();var f,\n          v,\n          m,\n          g = t.activeIndex || 0;f = t.rtl && t.isHorizontal() ? \"right\" : t.isHorizontal() ? \"left\" : \"top\", r ? (v = Math.floor(s / 2) + a, m = Math.floor(s / 2) + a) : (v = s + (a - 1), m = a);var b = Math.max((g || 0) - m, 0),\n          w = Math.min((g || 0) + v, h.length - 1),\n          y = (t.slidesGrid[b] || 0) - (t.slidesGrid[0] || 0);function x() {\n        t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load();\n      }if (l.extend(t.virtual, { from: b, to: w, offset: y, slidesGrid: t.slidesGrid }), o === b && d === w && !e) return t.slidesGrid !== p && y !== u && t.slides.css(f, y + \"px\"), void t.updateProgress();if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, { offset: y, from: b, to: w, slides: function () {\n          for (var e = [], t = b; t <= w; t += 1) {\n            e.push(h[t]);\n          }return e;\n        }() }), void x();var T = [],\n          E = [];if (e) t.$wrapperEl.find(\".\" + t.params.slideClass).remove();else for (var S = o; S <= d; S += 1) {\n        (S < b || S > w) && t.$wrapperEl.find(\".\" + t.params.slideClass + '[data-swiper-slide-index=\"' + S + '\"]').remove();\n      }for (var C = 0; C < h.length; C += 1) {\n        C >= b && C <= w && (void 0 === d || e ? E.push(C) : (C > d && E.push(C), C < o && T.push(C)));\n      }E.forEach(function (e) {\n        t.$wrapperEl.append(c(h[e], e));\n      }), T.sort(function (e, t) {\n        return e < t;\n      }).forEach(function (e) {\n        t.$wrapperEl.prepend(c(h[e], e));\n      }), t.$wrapperEl.children(\".swiper-slide\").css(f, y + \"px\"), x();\n    }, renderSlide: function renderSlide(e, i) {\n      var s = this.params.virtual;if (s.cache && this.virtual.cache[i]) return this.virtual.cache[i];var a = s.renderSlide ? t(s.renderSlide.call(this, e, i)) : t('<div class=\"' + this.params.slideClass + '\" data-swiper-slide-index=\"' + i + '\">' + e + \"</div>\");return a.attr(\"data-swiper-slide-index\") || a.attr(\"data-swiper-slide-index\", i), s.cache && (this.virtual.cache[i] = a), a;\n    }, appendSlide: function appendSlide(e) {\n      this.virtual.slides.push(e), this.virtual.update(!0);\n    }, prependSlide: function prependSlide(e) {\n      if (this.virtual.slides.unshift(e), this.params.virtual.cache) {\n        var t = this.virtual.cache,\n            i = {};Object.keys(t).forEach(function (e) {\n          i[e + 1] = t[e];\n        }), this.virtual.cache = i;\n      }this.virtual.update(!0), this.slideNext(0);\n    } },\n      X = { name: \"virtual\", params: { virtual: { enabled: !1, slides: [], cache: !0, renderSlide: null, renderExternal: null } }, create: function create() {\n      l.extend(this, { virtual: { update: N.update.bind(this), appendSlide: N.appendSlide.bind(this), prependSlide: N.prependSlide.bind(this), renderSlide: N.renderSlide.bind(this), slides: this.params.virtual.slides, cache: {} } });\n    }, on: { beforeInit: function beforeInit() {\n        if (this.params.virtual.enabled) {\n          this.classNames.push(this.params.containerModifierClass + \"virtual\");var e = { watchSlidesProgress: !0 };l.extend(this.params, e), l.extend(this.originalParams, e), this.virtual.update();\n        }\n      }, setTranslate: function setTranslate() {\n        this.params.virtual.enabled && this.virtual.update();\n      } } },\n      Y = { handle: function handle(e) {\n      var t = e;t.originalEvent && (t = t.originalEvent);var i = t.keyCode || t.charCode;if (!this.allowSlideNext && (this.isHorizontal() && 39 === i || this.isVertical() && 40 === i)) return !1;if (!this.allowSlidePrev && (this.isHorizontal() && 37 === i || this.isVertical() && 38 === i)) return !1;if (!(t.shiftKey || t.altKey || t.ctrlKey || t.metaKey || d.activeElement && d.activeElement.nodeName && (\"input\" === d.activeElement.nodeName.toLowerCase() || \"textarea\" === d.activeElement.nodeName.toLowerCase()))) {\n        if (this.params.keyboard.onlyInViewport && (37 === i || 39 === i || 38 === i || 40 === i)) {\n          var s = !1;if (this.$el.parents(\".\" + this.params.slideClass).length > 0 && 0 === this.$el.parents(\".\" + this.params.slideActiveClass).length) return;var a = o.pageXOffset,\n              r = o.pageYOffset,\n              n = o.innerWidth,\n              l = o.innerHeight,\n              h = this.$el.offset();this.rtl && (h.left -= this.$el[0].scrollLeft);for (var p = [[h.left, h.top], [h.left + this.width, h.top], [h.left, h.top + this.height], [h.left + this.width, h.top + this.height]], c = 0; c < p.length; c += 1) {\n            var u = p[c];u[0] >= a && u[0] <= a + n && u[1] >= r && u[1] <= r + l && (s = !0);\n          }if (!s) return;\n        }this.isHorizontal() ? (37 !== i && 39 !== i || (t.preventDefault ? t.preventDefault() : t.returnValue = !1), (39 === i && !this.rtl || 37 === i && this.rtl) && this.slideNext(), (37 === i && !this.rtl || 39 === i && this.rtl) && this.slidePrev()) : (38 !== i && 40 !== i || (t.preventDefault ? t.preventDefault() : t.returnValue = !1), 40 === i && this.slideNext(), 38 === i && this.slidePrev()), this.emit(\"keyPress\", i);\n      }\n    }, enable: function enable() {\n      this.keyboard.enabled || (t(d).on(\"keydown\", this.keyboard.handle), this.keyboard.enabled = !0);\n    }, disable: function disable() {\n      this.keyboard.enabled && (t(d).off(\"keydown\", this.keyboard.handle), this.keyboard.enabled = !1);\n    } },\n      G = { name: \"keyboard\", params: { keyboard: { enabled: !1, onlyInViewport: !0 } }, create: function create() {\n      l.extend(this, { keyboard: { enabled: !1, enable: Y.enable.bind(this), disable: Y.disable.bind(this), handle: Y.handle.bind(this) } });\n    }, on: { init: function init() {\n        this.params.keyboard.enabled && this.keyboard.enable();\n      }, destroy: function destroy() {\n        this.keyboard.enabled && this.keyboard.disable();\n      } } };var B = { lastScrollTime: l.now(), event: o.navigator.userAgent.indexOf(\"firefox\") > -1 ? \"DOMMouseScroll\" : function () {\n      var e = \"onwheel\" in d;if (!e) {\n        var t = d.createElement(\"div\");t.setAttribute(\"onwheel\", \"return;\"), e = \"function\" == typeof t.onwheel;\n      }return !e && d.implementation && d.implementation.hasFeature && !0 !== d.implementation.hasFeature(\"\", \"\") && (e = d.implementation.hasFeature(\"Events.wheel\", \"3.0\")), e;\n    }() ? \"wheel\" : \"mousewheel\", normalize: function normalize(e) {\n      var t = 0,\n          i = 0,\n          s = 0,\n          a = 0;return \"detail\" in e && (i = e.detail), \"wheelDelta\" in e && (i = -e.wheelDelta / 120), \"wheelDeltaY\" in e && (i = -e.wheelDeltaY / 120), \"wheelDeltaX\" in e && (t = -e.wheelDeltaX / 120), \"axis\" in e && e.axis === e.HORIZONTAL_AXIS && (t = i, i = 0), s = 10 * t, a = 10 * i, \"deltaY\" in e && (a = e.deltaY), \"deltaX\" in e && (s = e.deltaX), (s || a) && e.deltaMode && (1 === e.deltaMode ? (s *= 40, a *= 40) : (s *= 800, a *= 800)), s && !t && (t = s < 1 ? -1 : 1), a && !i && (i = a < 1 ? -1 : 1), { spinX: t, spinY: i, pixelX: s, pixelY: a };\n    }, handle: function handle(e) {\n      var t = e,\n          i = this,\n          s = i.params.mousewheel;t.originalEvent && (t = t.originalEvent);var a = 0,\n          r = i.rtl ? -1 : 1,\n          n = B.normalize(t);if (s.forceToAxis) {\n        if (i.isHorizontal()) {\n          if (!(Math.abs(n.pixelX) > Math.abs(n.pixelY))) return !0;a = n.pixelX * r;\n        } else {\n          if (!(Math.abs(n.pixelY) > Math.abs(n.pixelX))) return !0;a = n.pixelY;\n        }\n      } else a = Math.abs(n.pixelX) > Math.abs(n.pixelY) ? -n.pixelX * r : -n.pixelY;if (0 === a) return !0;if (s.invert && (a = -a), i.params.freeMode) {\n        var d = i.getTranslate() + a * s.sensitivity,\n            h = i.isBeginning,\n            p = i.isEnd;if (d >= i.minTranslate() && (d = i.minTranslate()), d <= i.maxTranslate() && (d = i.maxTranslate()), i.setTransition(0), i.setTranslate(d), i.updateProgress(), i.updateActiveIndex(), i.updateSlidesClasses(), (!h && i.isBeginning || !p && i.isEnd) && i.updateSlidesClasses(), i.params.freeModeSticky && (clearTimeout(i.mousewheel.timeout), i.mousewheel.timeout = l.nextTick(function () {\n          i.slideReset();\n        }, 300)), i.emit(\"scroll\", t), i.params.autoplay && i.params.autoplayDisableOnInteraction && i.stopAutoplay(), 0 === d || d === i.maxTranslate()) return !0;\n      } else {\n        if (l.now() - i.mousewheel.lastScrollTime > 60) if (a < 0) {\n          if (i.isEnd && !i.params.loop || i.animating) {\n            if (s.releaseOnEdges) return !0;\n          } else i.slideNext(), i.emit(\"scroll\", t);\n        } else if (i.isBeginning && !i.params.loop || i.animating) {\n          if (s.releaseOnEdges) return !0;\n        } else i.slidePrev(), i.emit(\"scroll\", t);i.mousewheel.lastScrollTime = new o.Date().getTime();\n      }return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1;\n    }, enable: function enable() {\n      if (!B.event) return !1;if (this.mousewheel.enabled) return !1;var e = this.$el;return \"container\" !== this.params.mousewheel.eventsTarged && (e = t(this.params.mousewheel.eventsTarged)), e.on(B.event, this.mousewheel.handle), this.mousewheel.enabled = !0, !0;\n    }, disable: function disable() {\n      if (!B.event) return !1;if (!this.mousewheel.enabled) return !1;var e = this.$el;return \"container\" !== this.params.mousewheel.eventsTarged && (e = t(this.params.mousewheel.eventsTarged)), e.off(B.event, this.mousewheel.handle), this.mousewheel.enabled = !1, !0;\n    } },\n      V = { update: function update() {\n      var e = this.params.navigation;if (!this.params.loop) {\n        var t = this.navigation,\n            i = t.$nextEl,\n            s = t.$prevEl;s && s.length > 0 && (this.isBeginning ? s.addClass(e.disabledClass) : s.removeClass(e.disabledClass), s[this.params.watchOverflow && this.isLocked ? \"addClass\" : \"removeClass\"](e.lockClass)), i && i.length > 0 && (this.isEnd ? i.addClass(e.disabledClass) : i.removeClass(e.disabledClass), i[this.params.watchOverflow && this.isLocked ? \"addClass\" : \"removeClass\"](e.lockClass));\n      }\n    }, init: function init() {\n      var e,\n          i,\n          s = this,\n          a = s.params.navigation;(a.nextEl || a.prevEl) && (a.nextEl && (e = t(a.nextEl), s.params.uniqueNavElements && \"string\" == typeof a.nextEl && e.length > 1 && 1 === s.$el.find(a.nextEl).length && (e = s.$el.find(a.nextEl))), a.prevEl && (i = t(a.prevEl), s.params.uniqueNavElements && \"string\" == typeof a.prevEl && i.length > 1 && 1 === s.$el.find(a.prevEl).length && (i = s.$el.find(a.prevEl))), e && e.length > 0 && e.on(\"click\", function (e) {\n        e.preventDefault(), s.isEnd && !s.params.loop || s.slideNext();\n      }), i && i.length > 0 && i.on(\"click\", function (e) {\n        e.preventDefault(), s.isBeginning && !s.params.loop || s.slidePrev();\n      }), l.extend(s.navigation, { $nextEl: e, nextEl: e && e[0], $prevEl: i, prevEl: i && i[0] }));\n    }, destroy: function destroy() {\n      var e = this.navigation,\n          t = e.$nextEl,\n          i = e.$prevEl;t && t.length && (t.off(\"click\"), t.removeClass(this.params.navigation.disabledClass)), i && i.length && (i.off(\"click\"), i.removeClass(this.params.navigation.disabledClass));\n    } },\n      R = { update: function update() {\n      var e = this.rtl,\n          i = this.params.pagination;if (i.el && this.pagination.el && this.pagination.$el && 0 !== this.pagination.$el.length) {\n        var s,\n            a = this.virtual && this.params.virtual.enabled ? this.virtual.slides.length : this.slides.length,\n            r = this.pagination.$el,\n            n = this.params.loop ? Math.ceil((a - 2 * this.loopedSlides) / this.params.slidesPerGroup) : this.snapGrid.length;if (this.params.loop ? ((s = Math.ceil((this.activeIndex - this.loopedSlides) / this.params.slidesPerGroup)) > a - 1 - 2 * this.loopedSlides && (s -= a - 2 * this.loopedSlides), s > n - 1 && (s -= n), s < 0 && \"bullets\" !== this.params.paginationType && (s = n + s)) : s = void 0 !== this.snapIndex ? this.snapIndex : this.activeIndex || 0, \"bullets\" === i.type && this.pagination.bullets && this.pagination.bullets.length > 0) {\n          var o = this.pagination.bullets;if (i.dynamicBullets && (this.pagination.bulletSize = o.eq(0)[this.isHorizontal() ? \"outerWidth\" : \"outerHeight\"](!0), r.css(this.isHorizontal() ? \"width\" : \"height\", 5 * this.pagination.bulletSize + \"px\")), o.removeClass(i.bulletActiveClass + \" \" + i.bulletActiveClass + \"-next \" + i.bulletActiveClass + \"-next-next \" + i.bulletActiveClass + \"-prev \" + i.bulletActiveClass + \"-prev-prev\"), r.length > 1) o.each(function (e, a) {\n            var r = t(a);r.index() === s && (r.addClass(i.bulletActiveClass), i.dynamicBullets && (r.prev().addClass(i.bulletActiveClass + \"-prev\").prev().addClass(i.bulletActiveClass + \"-prev-prev\"), r.next().addClass(i.bulletActiveClass + \"-next\").next().addClass(i.bulletActiveClass + \"-next-next\")));\n          });else {\n            var l = o.eq(s);l.addClass(i.bulletActiveClass), i.dynamicBullets && (l.prev().addClass(i.bulletActiveClass + \"-prev\").prev().addClass(i.bulletActiveClass + \"-prev-prev\"), l.next().addClass(i.bulletActiveClass + \"-next\").next().addClass(i.bulletActiveClass + \"-next-next\"));\n          }if (i.dynamicBullets) {\n            var d = Math.min(o.length, 5),\n                h = (this.pagination.bulletSize * d - this.pagination.bulletSize) / 2 - s * this.pagination.bulletSize,\n                p = e ? \"right\" : \"left\";o.css(this.isHorizontal() ? p : \"top\", h + \"px\");\n          }\n        }if (\"fraction\" === i.type && (r.find(\".\" + i.currentClass).text(s + 1), r.find(\".\" + i.totalClass).text(n)), \"progressbar\" === i.type) {\n          var c = (s + 1) / n,\n              u = c,\n              f = 1;this.isHorizontal() || (f = c, u = 1), r.find(\".\" + i.progressbarFillClass).transform(\"translate3d(0,0,0) scaleX(\" + u + \") scaleY(\" + f + \")\").transition(this.params.speed);\n        }\"custom\" === i.type && i.renderCustom ? (r.html(i.renderCustom(this, s + 1, n)), this.emit(\"paginationRender\", this, r[0])) : this.emit(\"paginationUpdate\", this, r[0]), r[this.params.watchOverflow && this.isLocked ? \"addClass\" : \"removeClass\"](i.lockClass);\n      }\n    }, render: function render() {\n      var e = this.params.pagination;if (e.el && this.pagination.el && this.pagination.$el && 0 !== this.pagination.$el.length) {\n        var t = this.virtual && this.params.virtual.enabled ? this.virtual.slides.length : this.slides.length,\n            i = this.pagination.$el,\n            s = \"\";if (\"bullets\" === e.type) {\n          for (var a = this.params.loop ? Math.ceil((t - 2 * this.loopedSlides) / this.params.slidesPerGroup) : this.snapGrid.length, r = 0; r < a; r += 1) {\n            e.renderBullet ? s += e.renderBullet.call(this, r, e.bulletClass) : s += \"<\" + e.bulletElement + ' class=\"' + e.bulletClass + '\"></' + e.bulletElement + \">\";\n          }i.html(s), this.pagination.bullets = i.find(\".\" + e.bulletClass);\n        }\"fraction\" === e.type && (s = e.renderFraction ? e.renderFraction.call(this, e.currentClass, e.totalClass) : '<span class=\"' + e.currentClass + '\"></span> / <span class=\"' + e.totalClass + '\"></span>', i.html(s)), \"progressbar\" === e.type && (s = e.renderProgressbar ? e.renderProgressbar.call(this, e.progressbarFillClass) : '<span class=\"' + e.progressbarFillClass + '\"></span>', i.html(s)), \"custom\" !== e.type && this.emit(\"paginationRender\", this.pagination.$el[0]);\n      }\n    }, init: function init() {\n      var e = this,\n          i = e.params.pagination;if (i.el) {\n        var s = t(i.el);0 !== s.length && (e.params.uniqueNavElements && \"string\" == typeof i.el && s.length > 1 && 1 === e.$el.find(i.el).length && (s = e.$el.find(i.el)), \"bullets\" === i.type && i.clickable && s.addClass(i.clickableClass), s.addClass(i.modifierClass + i.type), \"bullets\" === i.type && i.dynamicBullets && s.addClass(\"\" + i.modifierClass + i.type + \"-dynamic\"), i.clickable && s.on(\"click\", \".\" + i.bulletClass, function (i) {\n          i.preventDefault();var s = t(this).index() * e.params.slidesPerGroup;e.params.loop && (s += e.loopedSlides), e.slideTo(s);\n        }), l.extend(e.pagination, { $el: s, el: s[0] }));\n      }\n    }, destroy: function destroy() {\n      var e = this.params.pagination;if (e.el && this.pagination.el && this.pagination.$el && 0 !== this.pagination.$el.length) {\n        var t = this.pagination.$el;t.removeClass(e.hiddenClass), t.removeClass(e.modifierClass + e.type), this.pagination.bullets && this.pagination.bullets.removeClass(e.bulletActiveClass), e.clickable && t.off(\"click\", \".\" + e.bulletClass);\n      }\n    } },\n      F = { setTranslate: function setTranslate() {\n      if (this.params.scrollbar.el && this.scrollbar.el) {\n        var e = this.scrollbar,\n            t = this.rtl,\n            i = this.progress,\n            s = e.dragSize,\n            a = e.trackSize,\n            r = e.$dragEl,\n            n = e.$el,\n            o = this.params.scrollbar,\n            l = s,\n            d = (a - s) * i;t && this.isHorizontal() ? (d = -d) > 0 ? (l = s - d, d = 0) : -d + s > a && (l = a + d) : d < 0 ? (l = s + d, d = 0) : d + s > a && (l = a - d), this.isHorizontal() ? (h.transforms3d ? r.transform(\"translate3d(\" + d + \"px, 0, 0)\") : r.transform(\"translateX(\" + d + \"px)\"), r[0].style.width = l + \"px\") : (h.transforms3d ? r.transform(\"translate3d(0px, \" + d + \"px, 0)\") : r.transform(\"translateY(\" + d + \"px)\"), r[0].style.height = l + \"px\"), o.hide && (clearTimeout(this.scrollbar.timeout), n[0].style.opacity = 1, this.scrollbar.timeout = setTimeout(function () {\n          n[0].style.opacity = 0, n.transition(400);\n        }, 1e3));\n      }\n    }, setTransition: function setTransition(e) {\n      this.params.scrollbar.el && this.scrollbar.el && this.scrollbar.$dragEl.transition(e);\n    }, updateSize: function updateSize() {\n      if (this.params.scrollbar.el && this.scrollbar.el) {\n        var e = this.scrollbar,\n            t = e.$dragEl,\n            i = e.$el;t[0].style.width = \"\", t[0].style.height = \"\";var s,\n            a = this.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight,\n            r = this.size / this.virtualSize,\n            n = r * (a / this.size);s = \"auto\" === this.params.scrollbar.dragSize ? a * r : parseInt(this.params.scrollbar.dragSize, 10), this.isHorizontal() ? t[0].style.width = s + \"px\" : t[0].style.height = s + \"px\", i[0].style.display = r >= 1 ? \"none\" : \"\", this.params.scrollbarHide && (i[0].style.opacity = 0), l.extend(e, { trackSize: a, divider: r, moveDivider: n, dragSize: s }), e.$el[this.params.watchOverflow && this.isLocked ? \"addClass\" : \"removeClass\"](this.params.scrollbar.lockClass);\n      }\n    }, setDragPosition: function setDragPosition(e) {\n      var t,\n          i = this.scrollbar,\n          s = i.$el,\n          a = i.dragSize,\n          r = i.trackSize;t = ((this.isHorizontal() ? \"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0].pageX : e.pageX || e.clientX : \"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0].pageY : e.pageY || e.clientY) - s.offset()[this.isHorizontal() ? \"left\" : \"top\"] - a / 2) / (r - a), t = Math.max(Math.min(t, 1), 0), this.rtl && (t = 1 - t);var n = this.minTranslate() + (this.maxTranslate() - this.minTranslate()) * t;this.updateProgress(n), this.setTranslate(n), this.updateActiveIndex(), this.updateSlidesClasses();\n    }, onDragStart: function onDragStart(e) {\n      var t = this.params.scrollbar,\n          i = this.scrollbar,\n          s = this.$wrapperEl,\n          a = i.$el,\n          r = i.$dragEl;this.scrollbar.isTouched = !0, e.preventDefault(), e.stopPropagation(), s.transition(100), r.transition(100), i.setDragPosition(e), clearTimeout(this.scrollbar.dragTimeout), a.transition(0), t.hide && a.css(\"opacity\", 1), this.emit(\"scrollbarDragStart\", e);\n    }, onDragMove: function onDragMove(e) {\n      var t = this.scrollbar,\n          i = this.$wrapperEl,\n          s = t.$el,\n          a = t.$dragEl;this.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, t.setDragPosition(e), i.transition(0), s.transition(0), a.transition(0), this.emit(\"scrollbarDragMove\", e));\n    }, onDragEnd: function onDragEnd(e) {\n      var t = this.params.scrollbar,\n          i = this.scrollbar.$el;this.scrollbar.isTouched && (this.scrollbar.isTouched = !1, t.hide && (clearTimeout(this.scrollbar.dragTimeout), this.scrollbar.dragTimeout = l.nextTick(function () {\n        i.css(\"opacity\", 0), i.transition(400);\n      }, 1e3)), this.emit(\"scrollbarDragEnd\", e), t.snapOnRelease && this.slideReset());\n    }, enableDraggable: function enableDraggable() {\n      if (this.params.scrollbar.el) {\n        var e = this.scrollbar.$el,\n            i = h.touch ? e[0] : document;e.on(this.scrollbar.dragEvents.start, this.scrollbar.onDragStart), t(i).on(this.scrollbar.dragEvents.move, this.scrollbar.onDragMove), t(i).on(this.scrollbar.dragEvents.end, this.scrollbar.onDragEnd);\n      }\n    }, disableDraggable: function disableDraggable() {\n      if (this.params.scrollbar.el) {\n        var e = this.scrollbar.$el,\n            i = h.touch ? e[0] : document;e.off(this.scrollbar.dragEvents.start), t(i).off(this.scrollbar.dragEvents.move), t(i).off(this.scrollbar.dragEvents.end);\n      }\n    }, init: function init() {\n      var e = this;if (e.params.scrollbar.el) {\n        var i = e.scrollbar,\n            s = e.$el,\n            a = e.touchEvents,\n            r = e.params.scrollbar,\n            n = t(r.el);e.params.uniqueNavElements && \"string\" == typeof r.el && n.length > 1 && 1 === s.find(r.el).length && (n = s.find(r.el));var o = n.find(\".swiper-scrollbar-drag\");0 === o.length && (o = t('<div class=\"swiper-scrollbar-drag\"></div>'), n.append(o)), e.scrollbar.dragEvents = !1 !== e.params.simulateTouch || h.touch ? a : { start: \"mousedown\", move: \"mousemove\", end: \"mouseup\" }, l.extend(i, { $el: n, el: n[0], $dragEl: o, dragEl: o[0] }), r.draggable && i.enableDraggable();\n      }\n    }, destroy: function destroy() {\n      this.scrollbar.disableDraggable();\n    } },\n      W = { setTransform: function setTransform(e, i) {\n      var s = this.rtl,\n          a = t(e),\n          r = s ? -1 : 1,\n          n = a.attr(\"data-swiper-parallax\") || \"0\",\n          o = a.attr(\"data-swiper-parallax-x\"),\n          l = a.attr(\"data-swiper-parallax-y\"),\n          d = a.attr(\"data-swiper-parallax-scale\"),\n          h = a.attr(\"data-swiper-parallax-opacity\");if (o || l ? (o = o || \"0\", l = l || \"0\") : this.isHorizontal() ? (o = n, l = \"0\") : (l = n, o = \"0\"), o = o.indexOf(\"%\") >= 0 ? parseInt(o, 10) * i * r + \"%\" : o * i * r + \"px\", l = l.indexOf(\"%\") >= 0 ? parseInt(l, 10) * i + \"%\" : l * i + \"px\", void 0 !== h && null !== h) {\n        var p = h - (h - 1) * (1 - Math.abs(i));a[0].style.opacity = p;\n      }if (void 0 === d || null === d) a.transform(\"translate3d(\" + o + \", \" + l + \", 0px)\");else {\n        var c = d - (d - 1) * (1 - Math.abs(i));a.transform(\"translate3d(\" + o + \", \" + l + \", 0px) scale(\" + c + \")\");\n      }\n    }, setTranslate: function setTranslate() {\n      var e = this,\n          i = e.$el,\n          s = e.slides,\n          a = e.progress,\n          r = e.snapGrid;i.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\").each(function (t, i) {\n        e.parallax.setTransform(i, a);\n      }), s.each(function (i, s) {\n        var n = s.progress;e.params.slidesPerGroup > 1 && \"auto\" !== e.params.slidesPerView && (n += Math.ceil(i / 2) - a * (r.length - 1)), n = Math.min(Math.max(n, -1), 1), t(s).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\").each(function (t, i) {\n          e.parallax.setTransform(i, n);\n        });\n      });\n    }, setTransition: function setTransition(e) {\n      void 0 === e && (e = this.params.speed);this.$el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\").each(function (i, s) {\n        var a = t(s),\n            r = parseInt(a.attr(\"data-swiper-parallax-duration\"), 10) || e;0 === e && (r = 0), a.transition(r);\n      });\n    } },\n      j = { getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {\n      if (e.targetTouches.length < 2) return 1;var t = e.targetTouches[0].pageX,\n          i = e.targetTouches[0].pageY,\n          s = e.targetTouches[1].pageX,\n          a = e.targetTouches[1].pageY;return Math.sqrt(Math.pow(s - t, 2) + Math.pow(a - i, 2));\n    }, onGestureStart: function onGestureStart(e) {\n      var i = this.params.zoom,\n          s = this.zoom,\n          a = s.gesture;if (s.fakeGestureTouched = !1, s.fakeGestureMoved = !1, !h.gestures) {\n        if (\"touchstart\" !== e.type || \"touchstart\" === e.type && e.targetTouches.length < 2) return;s.fakeGestureTouched = !0, a.scaleStart = j.getDistanceBetweenTouches(e);\n      }a.$slideEl && a.$slideEl.length || (a.$slideEl = t(this), 0 === a.$slideEl.length && (a.$slideEl = this.slides.eq(this.activeIndex)), a.$imageEl = a.$slideEl.find(\"img, svg, canvas\"), a.$imageWrapEl = a.$imageEl.parent(\".\" + i.containerClass), a.maxRatio = a.$imageWrapEl.attr(\"data-swiper-zoom\") || i.maxRatio, 0 !== a.$imageWrapEl.length) ? (a.$imageEl.transition(0), this.zoom.isScaling = !0) : a.$imageEl = void 0;\n    }, onGestureChange: function onGestureChange(e) {\n      var t = this.params.zoom,\n          i = this.zoom,\n          s = i.gesture;if (!h.gestures) {\n        if (\"touchmove\" !== e.type || \"touchmove\" === e.type && e.targetTouches.length < 2) return;i.fakeGestureMoved = !0, s.scaleMove = j.getDistanceBetweenTouches(e);\n      }s.$imageEl && 0 !== s.$imageEl.length && (h.gestures ? this.zoom.scale = e.scale * i.currentScale : i.scale = s.scaleMove / s.scaleStart * i.currentScale, i.scale > s.maxRatio && (i.scale = s.maxRatio - 1 + Math.pow(i.scale - s.maxRatio + 1, .5)), i.scale < t.minRatio && (i.scale = t.minRatio + 1 - Math.pow(t.minRatio - i.scale + 1, .5)), s.$imageEl.transform(\"translate3d(0,0,0) scale(\" + i.scale + \")\"));\n    }, onGestureEnd: function onGestureEnd(e) {\n      var t = this.params.zoom,\n          i = this.zoom,\n          s = i.gesture;if (!h.gestures) {\n        if (!i.fakeGestureTouched || !i.fakeGestureMoved) return;if (\"touchend\" !== e.type || \"touchend\" === e.type && e.changedTouches.length < 2 && !y.android) return;i.fakeGestureTouched = !1, i.fakeGestureMoved = !1;\n      }s.$imageEl && 0 !== s.$imageEl.length && (i.scale = Math.max(Math.min(i.scale, s.maxRatio), t.minRatio), s.$imageEl.transition(this.params.speed).transform(\"translate3d(0,0,0) scale(\" + i.scale + \")\"), i.currentScale = i.scale, i.isScaling = !1, 1 === i.scale && (s.$slideEl = void 0));\n    }, onTouchStart: function onTouchStart(e) {\n      var t = this.zoom,\n          i = t.gesture,\n          s = t.image;i.$imageEl && 0 !== i.$imageEl.length && (s.isTouched || (y.android && e.preventDefault(), s.isTouched = !0, s.touchesStart.x = \"touchstart\" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesStart.y = \"touchstart\" === e.type ? e.targetTouches[0].pageY : e.pageY));\n    }, onTouchMove: function onTouchMove(e) {\n      var t = this.zoom,\n          i = t.gesture,\n          s = t.image,\n          a = t.velocity;if (i.$imageEl && 0 !== i.$imageEl.length && (this.allowClick = !1, s.isTouched && i.$slideEl)) {\n        s.isMoved || (s.width = i.$imageEl[0].offsetWidth, s.height = i.$imageEl[0].offsetHeight, s.startX = l.getTranslate(i.$imageWrapEl[0], \"x\") || 0, s.startY = l.getTranslate(i.$imageWrapEl[0], \"y\") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0), this.rtl && (s.startX = -s.startX), this.rtl && (s.startY = -s.startY));var r = s.width * t.scale,\n            n = s.height * t.scale;if (!(r < i.slideWidth && n < i.slideHeight)) {\n          if (s.minX = Math.min(i.slideWidth / 2 - r / 2, 0), s.maxX = -s.minX, s.minY = Math.min(i.slideHeight / 2 - n / 2, 0), s.maxY = -s.minY, s.touchesCurrent.x = \"touchmove\" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesCurrent.y = \"touchmove\" === e.type ? e.targetTouches[0].pageY : e.pageY, !s.isMoved && !t.isScaling) {\n            if (this.isHorizontal() && (Math.floor(s.minX) === Math.floor(s.startX) && s.touchesCurrent.x < s.touchesStart.x || Math.floor(s.maxX) === Math.floor(s.startX) && s.touchesCurrent.x > s.touchesStart.x)) return void (s.isTouched = !1);if (!this.isHorizontal() && (Math.floor(s.minY) === Math.floor(s.startY) && s.touchesCurrent.y < s.touchesStart.y || Math.floor(s.maxY) === Math.floor(s.startY) && s.touchesCurrent.y > s.touchesStart.y)) return void (s.isTouched = !1);\n          }e.preventDefault(), e.stopPropagation(), s.isMoved = !0, s.currentX = s.touchesCurrent.x - s.touchesStart.x + s.startX, s.currentY = s.touchesCurrent.y - s.touchesStart.y + s.startY, s.currentX < s.minX && (s.currentX = s.minX + 1 - Math.pow(s.minX - s.currentX + 1, .8)), s.currentX > s.maxX && (s.currentX = s.maxX - 1 + Math.pow(s.currentX - s.maxX + 1, .8)), s.currentY < s.minY && (s.currentY = s.minY + 1 - Math.pow(s.minY - s.currentY + 1, .8)), s.currentY > s.maxY && (s.currentY = s.maxY - 1 + Math.pow(s.currentY - s.maxY + 1, .8)), a.prevPositionX || (a.prevPositionX = s.touchesCurrent.x), a.prevPositionY || (a.prevPositionY = s.touchesCurrent.y), a.prevTime || (a.prevTime = Date.now()), a.x = (s.touchesCurrent.x - a.prevPositionX) / (Date.now() - a.prevTime) / 2, a.y = (s.touchesCurrent.y - a.prevPositionY) / (Date.now() - a.prevTime) / 2, Math.abs(s.touchesCurrent.x - a.prevPositionX) < 2 && (a.x = 0), Math.abs(s.touchesCurrent.y - a.prevPositionY) < 2 && (a.y = 0), a.prevPositionX = s.touchesCurrent.x, a.prevPositionY = s.touchesCurrent.y, a.prevTime = Date.now(), i.$imageWrapEl.transform(\"translate3d(\" + s.currentX + \"px, \" + s.currentY + \"px,0)\");\n        }\n      }\n    }, onTouchEnd: function onTouchEnd() {\n      var e = this.zoom,\n          t = e.gesture,\n          i = e.image,\n          s = e.velocity;if (t.$imageEl && 0 !== t.$imageEl.length) {\n        if (!i.isTouched || !i.isMoved) return i.isTouched = !1, void (i.isMoved = !1);i.isTouched = !1, i.isMoved = !1;var a = 300,\n            r = 300,\n            n = s.x * a,\n            o = i.currentX + n,\n            l = s.y * r,\n            d = i.currentY + l;0 !== s.x && (a = Math.abs((o - i.currentX) / s.x)), 0 !== s.y && (r = Math.abs((d - i.currentY) / s.y));var h = Math.max(a, r);i.currentX = o, i.currentY = d;var p = i.width * e.scale,\n            c = i.height * e.scale;i.minX = Math.min(t.slideWidth / 2 - p / 2, 0), i.maxX = -i.minX, i.minY = Math.min(t.slideHeight / 2 - c / 2, 0), i.maxY = -i.minY, i.currentX = Math.max(Math.min(i.currentX, i.maxX), i.minX), i.currentY = Math.max(Math.min(i.currentY, i.maxY), i.minY), t.$imageWrapEl.transition(h).transform(\"translate3d(\" + i.currentX + \"px, \" + i.currentY + \"px,0)\");\n      }\n    }, onTransitionEnd: function onTransitionEnd() {\n      var e = this.zoom,\n          t = e.gesture;t.$slideEl && this.previousIndex !== this.activeIndex && (t.$imageEl.transform(\"translate3d(0,0,0) scale(1)\"), t.$imageWrapEl.transform(\"translate3d(0,0,0)\"), t.$slideEl = void 0, t.$imageEl = void 0, t.$imageWrapEl = void 0, e.scale = 1, e.currentScale = 1);\n    }, toggle: function toggle(e) {\n      var t = this.zoom;t.scale && 1 !== t.scale ? t.out() : t.in(e);\n    }, in: function _in(e) {\n      var i,\n          s,\n          a,\n          r,\n          n,\n          o,\n          l,\n          d,\n          h,\n          p,\n          c,\n          u,\n          f,\n          v,\n          m,\n          g,\n          b = this.zoom,\n          w = this.params.zoom,\n          y = b.gesture,\n          x = b.image;(y.$slideEl || (y.$slideEl = this.clickedSlide ? t(this.clickedSlide) : this.slides.eq(this.activeIndex), y.$imageEl = y.$slideEl.find(\"img, svg, canvas\"), y.$imageWrapEl = y.$imageEl.parent(\".\" + w.containerClass)), y.$imageEl && 0 !== y.$imageEl.length) && (y.$slideEl.addClass(\"\" + w.zoomedSlideClass), void 0 === x.touchesStart.x && e ? (i = \"touchend\" === e.type ? e.changedTouches[0].pageX : e.pageX, s = \"touchend\" === e.type ? e.changedTouches[0].pageY : e.pageY) : (i = x.touchesStart.x, s = x.touchesStart.y), b.scale = y.$imageWrapEl.attr(\"data-swiper-zoom\") || w.maxRatio, b.currentScale = y.$imageWrapEl.attr(\"data-swiper-zoom\") || w.maxRatio, e ? (m = y.$slideEl[0].offsetWidth, g = y.$slideEl[0].offsetHeight, a = y.$slideEl.offset().left + m / 2 - i, r = y.$slideEl.offset().top + g / 2 - s, l = y.$imageEl[0].offsetWidth, d = y.$imageEl[0].offsetHeight, h = l * b.scale, p = d * b.scale, f = -(c = Math.min(m / 2 - h / 2, 0)), v = -(u = Math.min(g / 2 - p / 2, 0)), n = a * b.scale, o = r * b.scale, n < c && (n = c), n > f && (n = f), o < u && (o = u), o > v && (o = v)) : (n = 0, o = 0), y.$imageWrapEl.transition(300).transform(\"translate3d(\" + n + \"px, \" + o + \"px,0)\"), y.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(\" + b.scale + \")\"));\n    }, out: function out() {\n      var e = this.zoom,\n          i = this.params.zoom,\n          s = e.gesture;s.$slideEl || (s.$slideEl = this.clickedSlide ? t(this.clickedSlide) : this.slides.eq(this.activeIndex), s.$imageEl = s.$slideEl.find(\"img, svg, canvas\"), s.$imageWrapEl = s.$imageEl.parent(\".\" + i.containerClass)), s.$imageEl && 0 !== s.$imageEl.length && (e.scale = 1, e.currentScale = 1, s.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\"), s.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\"), s.$slideEl.removeClass(\"\" + i.zoomedSlideClass), s.$slideEl = void 0);\n    }, enable: function enable() {\n      var e = this,\n          i = e.zoom;if (!i.enabled) {\n        i.enabled = !0;var s = e.slides,\n            a = !(\"touchstart\" !== e.touchEvents.start || !h.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 };h.gestures ? (s.on(\"gesturestart\", i.onGestureStart, a), s.on(\"gesturechange\", i.onGestureChange, a), s.on(\"gestureend\", i.onGestureEnd, a)) : \"touchstart\" === e.touchEvents.start && (s.on(e.touchEvents.start, i.onGestureStart, a), s.on(e.touchEvents.move, i.onGestureChange, a), s.on(e.touchEvents.end, i.onGestureEnd, a)), e.slides.each(function (s, a) {\n          var r = t(a);r.find(\".\" + e.params.zoom.containerClass).length > 0 && r.on(e.touchEvents.move, i.onTouchMove);\n        });\n      }\n    }, disable: function disable() {\n      var e = this,\n          i = e.zoom;if (i.enabled) {\n        e.zoom.enabled = !1;var s = e.slides,\n            a = !(\"touchstart\" !== e.touchEvents.start || !h.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 };h.gestures ? (s.off(\"gesturestart\", i.onGestureStart, a), s.off(\"gesturechange\", i.onGestureChange, a), s.off(\"gestureend\", i.onGestureEnd, a)) : \"touchstart\" === e.touchEvents.start && (s.off(e.touchEvents.start, i.onGestureStart, a), s.off(e.touchEvents.move, i.onGestureChange, a), s.off(e.touchEvents.end, i.onGestureEnd, a)), e.slides.each(function (s, a) {\n          var r = t(a);r.find(\".\" + e.params.zoom.containerClass).length > 0 && r.off(e.touchEvents.move, i.onTouchMove);\n        });\n      }\n    } },\n      q = { loadInSlide: function loadInSlide(e, i) {\n      void 0 === i && (i = !0);var s = this,\n          a = s.params.lazy;if (void 0 !== e && 0 !== s.slides.length) {\n        var r = s.virtual && s.params.virtual.enabled ? s.$wrapperEl.children(\".\" + s.params.slideClass + '[data-swiper-slide-index=\"' + e + '\"]') : s.slides.eq(e),\n            n = r.find(\".\" + a.elementClass + \":not(.\" + a.loadedClass + \"):not(.\" + a.loadingClass + \")\");!r.hasClass(a.elementClass) || r.hasClass(a.loadedClass) || r.hasClass(a.loadingClass) || (n = n.add(r[0])), 0 !== n.length && n.each(function (e, n) {\n          var o = t(n);o.addClass(a.loadingClass);var l = o.attr(\"data-background\"),\n              d = o.attr(\"data-src\"),\n              h = o.attr(\"data-srcset\"),\n              p = o.attr(\"data-sizes\");s.loadImage(o[0], d || l, h, p, !1, function () {\n            if (void 0 !== s && null !== s && s && (!s || s.params) && !s.destroyed) {\n              if (l ? (o.css(\"background-image\", 'url(\"' + l + '\")'), o.removeAttr(\"data-background\")) : (h && (o.attr(\"srcset\", h), o.removeAttr(\"data-srcset\")), p && (o.attr(\"sizes\", p), o.removeAttr(\"data-sizes\")), d && (o.attr(\"src\", d), o.removeAttr(\"data-src\"))), o.addClass(a.loadedClass).removeClass(a.loadingClass), r.find(\".\" + a.preloaderClass).remove(), s.params.loop && i) {\n                var e = r.attr(\"data-swiper-slide-index\");if (r.hasClass(s.params.slideDuplicateClass)) {\n                  var t = s.$wrapperEl.children('[data-swiper-slide-index=\"' + e + '\"]:not(.' + s.params.slideDuplicateClass + \")\");s.lazy.loadInSlide(t.index(), !1);\n                } else {\n                  var n = s.$wrapperEl.children(\".\" + s.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + e + '\"]');s.lazy.loadInSlide(n.index(), !1);\n                }\n              }s.emit(\"lazyImageReady\", r[0], o[0]);\n            }\n          }), s.emit(\"lazyImageLoad\", r[0], o[0]);\n        });\n      }\n    }, load: function load() {\n      var e = this,\n          i = e.$wrapperEl,\n          s = e.params,\n          a = e.slides,\n          r = e.activeIndex,\n          n = e.virtual && s.virtual.enabled,\n          o = s.lazy,\n          l = s.slidesPerView;function d(e) {\n        if (n) {\n          if (i.children(\".\" + s.slideClass + '[data-swiper-slide-index=\"' + e + '\"]').length) return !0;\n        } else if (a[e]) return !0;return !1;\n      }function h(e) {\n        return n ? t(e).attr(\"data-swiper-slide-index\") : t(e).index();\n      }if (\"auto\" === l && (l = 0), e.lazy.initialImageLoaded || (e.lazy.initialImageLoaded = !0), e.params.watchSlidesVisibility) i.children(\".\" + s.slideVisibleClass).each(function (i, s) {\n        var a = n ? t(s).attr(\"data-swiper-slide-index\") : t(s).index();e.lazy.loadInSlide(a);\n      });else if (l > 1) for (var p = r; p < r + l; p += 1) {\n        d(p) && e.lazy.loadInSlide(p);\n      } else e.lazy.loadInSlide(r);if (o.loadPrevNext) if (l > 1 || o.loadPrevNextAmount && o.loadPrevNextAmount > 1) {\n        for (var c = o.loadPrevNextAmount, u = l, f = Math.min(r + u + Math.max(c, u), a.length), v = Math.max(r - Math.max(u, c), 0), m = r + l; m < f; m += 1) {\n          d(m) && e.lazy.loadInSlide(m);\n        }for (var g = v; g < r; g += 1) {\n          d(g) && e.lazy.loadInSlide(g);\n        }\n      } else {\n        var b = i.children(\".\" + s.slideNextClass);b.length > 0 && e.lazy.loadInSlide(h(b));var w = i.children(\".\" + s.slidePrevClass);w.length > 0 && e.lazy.loadInSlide(h(w));\n      }\n    } },\n      K = { LinearSpline: function LinearSpline(e, t) {\n      var i,\n          s,\n          a,\n          r,\n          n,\n          o = function o(e, t) {\n        for (s = -1, i = e.length; i - s > 1;) {\n          e[a = i + s >> 1] <= t ? s = a : i = a;\n        }return i;\n      };return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function (e) {\n        return e ? (n = o(this.x, e), r = n - 1, (e - this.x[r]) * (this.y[n] - this.y[r]) / (this.x[n] - this.x[r]) + this.y[r]) : 0;\n      }, this;\n    }, getInterpolateFunction: function getInterpolateFunction(e) {\n      this.controller.spline || (this.controller.spline = this.params.loop ? new K.LinearSpline(this.slidesGrid, e.slidesGrid) : new K.LinearSpline(this.snapGrid, e.snapGrid));\n    }, setTranslate: function setTranslate(e, t) {\n      var i,\n          s,\n          a = this,\n          r = a.controller.control;function n(e) {\n        var t = e.rtl && \"horizontal\" === e.params.direction ? -a.translate : a.translate;\"slide\" === a.params.controller.by && (a.controller.getInterpolateFunction(e), s = -a.controller.spline.interpolate(-t)), s && \"container\" !== a.params.controller.by || (i = (e.maxTranslate() - e.minTranslate()) / (a.maxTranslate() - a.minTranslate()), s = (t - a.minTranslate()) * i + e.minTranslate()), a.params.controller.inverse && (s = e.maxTranslate() - s), e.updateProgress(s), e.setTranslate(s, a), e.updateActiveIndex(), e.updateSlidesClasses();\n      }if (Array.isArray(r)) for (var o = 0; o < r.length; o += 1) {\n        r[o] !== t && r[o] instanceof k && n(r[o]);\n      } else r instanceof k && t !== r && n(r);\n    }, setTransition: function setTransition(e, t) {\n      var i,\n          s = this,\n          a = s.controller.control;function r(t) {\n        t.setTransition(e, s), 0 !== e && (t.transitionStart(), t.$wrapperEl.transitionEnd(function () {\n          a && (t.params.loop && \"slide\" === s.params.controller.by && t.loopFix(), t.transitionEnd());\n        }));\n      }if (Array.isArray(a)) for (i = 0; i < a.length; i += 1) {\n        a[i] !== t && a[i] instanceof k && r(a[i]);\n      } else a instanceof k && t !== a && r(a);\n    } },\n      U = { makeElFocusable: function makeElFocusable(e) {\n      return e.attr(\"tabIndex\", \"0\"), e;\n    }, addElRole: function addElRole(e, t) {\n      return e.attr(\"role\", t), e;\n    }, addElLabel: function addElLabel(e, t) {\n      return e.attr(\"aria-label\", t), e;\n    }, disableEl: function disableEl(e) {\n      return e.attr(\"aria-disabled\", !0), e;\n    }, enableEl: function enableEl(e) {\n      return e.attr(\"aria-disabled\", !1), e;\n    }, onEnterKey: function onEnterKey(e) {\n      var i = this.params.a11y;if (13 === e.keyCode) {\n        var s = t(e.target);this.navigation && this.navigation.$nextEl && s.is(this.navigation.$nextEl) && (this.isEnd && !this.params.loop || this.slideNext(), this.isEnd ? this.a11y.notify(i.lastSlideMessage) : this.a11y.notify(i.nextSlideMessage)), this.navigation && this.navigation.$prevEl && s.is(this.navigation.$prevEl) && (this.isBeginning && !this.params.loop || this.slidePrev(), this.isBeginning ? this.a11y.notify(i.firstSlideMessage) : this.a11y.notify(i.prevSlideMessage)), this.pagination && s.is(\".\" + this.params.pagination.bulletClass) && s[0].click();\n      }\n    }, notify: function notify(e) {\n      var t = this.a11y.liveRegion;0 !== t.length && (t.html(\"\"), t.html(e));\n    }, updateNavigation: function updateNavigation() {\n      if (!this.params.loop) {\n        var e = this.navigation,\n            t = e.$nextEl,\n            i = e.$prevEl;i && i.length > 0 && (this.isBeginning ? this.a11y.disableEl(i) : this.a11y.enableEl(i)), t && t.length > 0 && (this.isEnd ? this.a11y.disableEl(t) : this.a11y.enableEl(t));\n      }\n    }, updatePagination: function updatePagination() {\n      var e = this,\n          i = e.params.a11y;e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.bullets.each(function (s, a) {\n        var r = t(a);e.a11y.makeElFocusable(r), e.a11y.addElRole(r, \"button\"), e.a11y.addElLabel(r, i.paginationBulletMessage.replace(/{{index}}/, r.index() + 1));\n      });\n    }, init: function init() {\n      this.$el.append(this.a11y.liveRegion);var e,\n          t,\n          i = this.params.a11y;this.navigation && this.navigation.$nextEl && (e = this.navigation.$nextEl), this.navigation && this.navigation.$prevEl && (t = this.navigation.$prevEl), e && (this.a11y.makeElFocusable(e), this.a11y.addElRole(e, \"button\"), this.a11y.addElLabel(e, i.nextSlideMessage), e.on(\"keydown\", this.a11y.onEnterKey)), t && (this.a11y.makeElFocusable(t), this.a11y.addElRole(t, \"button\"), this.a11y.addElLabel(t, i.prevSlideMessage), t.on(\"keydown\", this.a11y.onEnterKey)), this.pagination && this.params.pagination.clickable && this.pagination.bullets && this.pagination.bullets.length && this.pagination.$el.on(\"keydown\", \".\" + this.params.pagination.bulletClass, this.a11y.onEnterKey);\n    }, destroy: function destroy() {\n      var e, t;this.a11y.liveRegion && this.a11y.liveRegion.length > 0 && this.a11y.liveRegion.remove(), this.navigation && this.navigation.$nextEl && (e = this.navigation.$nextEl), this.navigation && this.navigation.$prevEl && (t = this.navigation.$prevEl), e && e.off(\"keydown\", this.a11y.onEnterKey), t && t.off(\"keydown\", this.a11y.onEnterKey), this.pagination && this.params.pagination.clickable && this.pagination.bullets && this.pagination.bullets.length && this.pagination.$el.off(\"keydown\", \".\" + this.params.pagination.bulletClass, this.a11y.onEnterKey);\n    } },\n      _ = { init: function init() {\n      if (this.params.history) {\n        if (!o.history || !o.history.pushState) return this.params.history.enabled = !1, void (this.params.hashNavigation.enabled = !0);var e = this.history;e.initialized = !0, e.paths = _.getPathValues(), (e.paths.key || e.paths.value) && (e.scrollToSlide(0, e.paths.value, this.params.runCallbacksOnInit), this.params.history.replaceState || o.addEventListener(\"popstate\", this.history.setHistoryPopState));\n      }\n    }, destroy: function destroy() {\n      this.params.history.replaceState || o.removeEventListener(\"popstate\", this.history.setHistoryPopState);\n    }, setHistoryPopState: function setHistoryPopState() {\n      this.history.paths = _.getPathValues(), this.history.scrollToSlide(this.params.speed, this.history.paths.value, !1);\n    }, getPathValues: function getPathValues() {\n      var e = o.location.pathname.slice(1).split(\"/\").filter(function (e) {\n        return \"\" !== e;\n      }),\n          t = e.length;return { key: e[t - 2], value: e[t - 1] };\n    }, setHistory: function setHistory(e, t) {\n      if (this.history.initialized && this.params.history.enabled) {\n        var i = this.slides.eq(t),\n            s = _.slugify(i.attr(\"data-history\"));o.location.pathname.includes(e) || (s = e + \"/\" + s);var a = o.history.state;a && a.value === s || (this.params.history.replaceState ? o.history.replaceState({ value: s }, null, s) : o.history.pushState({ value: s }, null, s));\n      }\n    }, slugify: function slugify(e) {\n      return e.toString().toLowerCase().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n    }, scrollToSlide: function scrollToSlide(e, t, i) {\n      if (t) for (var s = 0, a = this.slides.length; s < a; s += 1) {\n        var r = this.slides.eq(s);if (_.slugify(r.attr(\"data-history\")) === t && !r.hasClass(this.params.slideDuplicateClass)) {\n          var n = r.index();this.slideTo(n, e, i);\n        }\n      } else this.slideTo(0, e, i);\n    } },\n      Z = { onHashCange: function onHashCange() {\n      var e = d.location.hash.replace(\"#\", \"\");e !== this.slides.eq(this.activeIndex).attr(\"data-hash\") && this.slideTo(this.$wrapperEl.children(\".\" + this.params.slideClass + '[data-hash=\"' + e + '\"]').index());\n    }, setHash: function setHash() {\n      if (this.hashNavigation.initialized && this.params.hashNavigation.enabled) if (this.params.hashNavigation.replaceState && o.history && o.history.replaceState) o.history.replaceState(null, null, \"#\" + this.slides.eq(this.activeIndex).attr(\"data-hash\") || \"\");else {\n        var e = this.slides.eq(this.activeIndex),\n            t = e.attr(\"data-hash\") || e.attr(\"data-history\");d.location.hash = t || \"\";\n      }\n    }, init: function init() {\n      if (!(!this.params.hashNavigation.enabled || this.params.history && this.params.history.enabled)) {\n        this.hashNavigation.initialized = !0;var e = d.location.hash.replace(\"#\", \"\");if (e) for (var i = 0, s = this.slides.length; i < s; i += 1) {\n          var a = this.slides.eq(i);if ((a.attr(\"data-hash\") || a.attr(\"data-history\")) === e && !a.hasClass(this.params.slideDuplicateClass)) {\n            var r = a.index();this.slideTo(r, 0, this.params.runCallbacksOnInit, !0);\n          }\n        }this.params.hashNavigation.watchState && t(o).on(\"hashchange\", this.hashNavigation.onHashCange);\n      }\n    }, destroy: function destroy() {\n      this.params.hashNavigation.watchState && t(o).off(\"hashchange\", this.hashNavigation.onHashCange);\n    } },\n      Q = { run: function run() {\n      var e = this,\n          t = e.slides.eq(e.activeIndex),\n          i = e.params.autoplay.delay;t.attr(\"data-swiper-autoplay\") && (i = t.attr(\"data-swiper-autoplay\") || e.params.autoplay.delay), e.autoplay.timeout = l.nextTick(function () {\n        e.params.autoplay.reverseDirection ? e.params.loop ? (e.loopFix(), e.slidePrev(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.isBeginning ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (e.slideTo(e.slides.length - 1, e.params.speed, !0, !0), e.emit(\"autoplay\")) : (e.slidePrev(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.params.loop ? (e.loopFix(), e.slideNext(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.isEnd ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (e.slideTo(0, e.params.speed, !0, !0), e.emit(\"autoplay\")) : (e.slideNext(e.params.speed, !0, !0), e.emit(\"autoplay\"));\n      }, i);\n    }, start: function start() {\n      return void 0 === this.autoplay.timeout && !this.autoplay.running && (this.autoplay.running = !0, this.emit(\"autoplayStart\"), this.autoplay.run(), !0);\n    }, stop: function stop() {\n      return !!this.autoplay.running && void 0 !== this.autoplay.timeout && (this.autoplay.timeout && (clearTimeout(this.autoplay.timeout), this.autoplay.timeout = void 0), this.autoplay.running = !1, this.emit(\"autoplayStop\"), !0);\n    }, pause: function pause(e) {\n      var t = this;t.autoplay.running && (t.autoplay.paused || (t.autoplay.timeout && clearTimeout(t.autoplay.timeout), t.autoplay.paused = !0, 0 !== e && t.params.autoplay.waitForTransition ? t.$wrapperEl.transitionEnd(function () {\n        t && !t.destroyed && (t.autoplay.paused = !1, t.autoplay.running ? t.autoplay.run() : t.autoplay.stop());\n      }) : (t.autoplay.paused = !1, t.autoplay.run())));\n    } },\n      J = { setTranslate: function setTranslate() {\n      for (var e = this.slides, t = 0; t < e.length; t += 1) {\n        var i = this.slides.eq(t),\n            s = -i[0].swiperSlideOffset;this.params.virtualTranslate || (s -= this.translate);var a = 0;this.isHorizontal() || (a = s, s = 0);var r = this.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0);i.css({ opacity: r }).transform(\"translate3d(\" + s + \"px, \" + a + \"px, 0px)\");\n      }\n    }, setTransition: function setTransition(e) {\n      var t = this,\n          i = t.slides,\n          s = t.$wrapperEl;if (i.transition(e), t.params.virtualTranslate && 0 !== e) {\n        var a = !1;i.transitionEnd(function () {\n          if (!a && t && !t.destroyed) {\n            a = !0, t.animating = !1;for (var e = [\"webkitTransitionEnd\", \"transitionend\"], i = 0; i < e.length; i += 1) {\n              s.trigger(e[i]);\n            }\n          }\n        });\n      }\n    } },\n      ee = { setTranslate: function setTranslate() {\n      var e,\n          i = this.$el,\n          s = this.$wrapperEl,\n          a = this.slides,\n          r = this.width,\n          n = this.height,\n          o = this.rtl,\n          l = this.size,\n          d = this.params.cubeEffect,\n          h = this.isHorizontal(),\n          p = this.virtual && this.params.virtual.enabled,\n          c = 0;d.shadow && (h ? (0 === (e = s.find(\".swiper-cube-shadow\")).length && (e = t('<div class=\"swiper-cube-shadow\"></div>'), s.append(e)), e.css({ height: r + \"px\" })) : 0 === (e = i.find(\".swiper-cube-shadow\")).length && (e = t('<div class=\"swiper-cube-shadow\"></div>'), i.append(e)));for (var u = 0; u < a.length; u += 1) {\n        var f = a.eq(u),\n            v = u;p && (v = parseInt(f.attr(\"data-swiper-slide-index\"), 10));var m = 90 * v,\n            g = Math.floor(m / 360);o && (m = -m, g = Math.floor(-m / 360));var b = Math.max(Math.min(f[0].progress, 1), -1),\n            w = 0,\n            y = 0,\n            x = 0;v % 4 == 0 ? (w = 4 * -g * l, x = 0) : (v - 1) % 4 == 0 ? (w = 0, x = 4 * -g * l) : (v - 2) % 4 == 0 ? (w = l + 4 * g * l, x = l) : (v - 3) % 4 == 0 && (w = -l, x = 3 * l + 4 * l * g), o && (w = -w), h || (y = w, w = 0);var T = \"rotateX(\" + (h ? 0 : -m) + \"deg) rotateY(\" + (h ? m : 0) + \"deg) translate3d(\" + w + \"px, \" + y + \"px, \" + x + \"px)\";if (b <= 1 && b > -1 && (c = 90 * v + 90 * b, o && (c = 90 * -v - 90 * b)), f.transform(T), d.slideShadows) {\n          var E = h ? f.find(\".swiper-slide-shadow-left\") : f.find(\".swiper-slide-shadow-top\"),\n              S = h ? f.find(\".swiper-slide-shadow-right\") : f.find(\".swiper-slide-shadow-bottom\");0 === E.length && (E = t('<div class=\"swiper-slide-shadow-' + (h ? \"left\" : \"top\") + '\"></div>'), f.append(E)), 0 === S.length && (S = t('<div class=\"swiper-slide-shadow-' + (h ? \"right\" : \"bottom\") + '\"></div>'), f.append(S)), E.length && (E[0].style.opacity = Math.max(-b, 0)), S.length && (S[0].style.opacity = Math.max(b, 0));\n        }\n      }if (s.css({ \"-webkit-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"-moz-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"-ms-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"transform-origin\": \"50% 50% -\" + l / 2 + \"px\" }), d.shadow) if (h) e.transform(\"translate3d(0px, \" + (r / 2 + d.shadowOffset) + \"px, \" + -r / 2 + \"px) rotateX(90deg) rotateZ(0deg) scale(\" + d.shadowScale + \")\");else {\n        var C = Math.abs(c) - 90 * Math.floor(Math.abs(c) / 90),\n            M = 1.5 - (Math.sin(2 * C * Math.PI / 360) / 2 + Math.cos(2 * C * Math.PI / 360) / 2),\n            z = d.shadowScale,\n            P = d.shadowScale / M,\n            k = d.shadowOffset;e.transform(\"scale3d(\" + z + \", 1, \" + P + \") translate3d(0px, \" + (n / 2 + k) + \"px, \" + -n / 2 / P + \"px) rotateX(-90deg)\");\n      }var $ = I.isSafari || I.isUiWebView ? -l / 2 : 0;s.transform(\"translate3d(0px,0,\" + $ + \"px) rotateX(\" + (this.isHorizontal() ? 0 : c) + \"deg) rotateY(\" + (this.isHorizontal() ? -c : 0) + \"deg)\");\n    }, setTransition: function setTransition(e) {\n      var t = this.$el;this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), this.params.cubeEffect.shadow && !this.isHorizontal() && t.find(\".swiper-cube-shadow\").transition(e);\n    } },\n      te = { setTranslate: function setTranslate() {\n      for (var e = this.slides, i = 0; i < e.length; i += 1) {\n        var s = e.eq(i),\n            a = s[0].progress;this.params.flipEffect.limitRotation && (a = Math.max(Math.min(s[0].progress, 1), -1));var r = -180 * a,\n            n = 0,\n            o = -s[0].swiperSlideOffset,\n            l = 0;if (this.isHorizontal() ? this.rtl && (r = -r) : (l = o, o = 0, n = -r, r = 0), s[0].style.zIndex = -Math.abs(Math.round(a)) + e.length, this.params.flipEffect.slideShadows) {\n          var d = this.isHorizontal() ? s.find(\".swiper-slide-shadow-left\") : s.find(\".swiper-slide-shadow-top\"),\n              h = this.isHorizontal() ? s.find(\".swiper-slide-shadow-right\") : s.find(\".swiper-slide-shadow-bottom\");0 === d.length && (d = t('<div class=\"swiper-slide-shadow-' + (this.isHorizontal() ? \"left\" : \"top\") + '\"></div>'), s.append(d)), 0 === h.length && (h = t('<div class=\"swiper-slide-shadow-' + (this.isHorizontal() ? \"right\" : \"bottom\") + '\"></div>'), s.append(h)), d.length && (d[0].style.opacity = Math.max(-a, 0)), h.length && (h[0].style.opacity = Math.max(a, 0));\n        }s.transform(\"translate3d(\" + o + \"px, \" + l + \"px, 0px) rotateX(\" + n + \"deg) rotateY(\" + r + \"deg)\");\n      }\n    }, setTransition: function setTransition(e) {\n      var t = this,\n          i = t.slides,\n          s = t.activeIndex,\n          a = t.$wrapperEl;if (i.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), t.params.virtualTranslate && 0 !== e) {\n        var r = !1;i.eq(s).transitionEnd(function () {\n          if (!r && t && !t.destroyed) {\n            r = !0, t.animating = !1;for (var e = [\"webkitTransitionEnd\", \"transitionend\"], i = 0; i < e.length; i += 1) {\n              a.trigger(e[i]);\n            }\n          }\n        });\n      }\n    } },\n      ie = { setTranslate: function setTranslate() {\n      for (var e = this.width, i = this.height, s = this.slides, a = this.$wrapperEl, r = this.slidesSizesGrid, n = this.params.coverflowEffect, o = this.isHorizontal(), l = this.translate, d = o ? e / 2 - l : i / 2 - l, p = o ? n.rotate : -n.rotate, c = n.depth, u = 0, f = s.length; u < f; u += 1) {\n        var v = s.eq(u),\n            m = r[u],\n            g = (d - v[0].swiperSlideOffset - m / 2) / m * n.modifier,\n            b = o ? p * g : 0,\n            w = o ? 0 : p * g,\n            y = -c * Math.abs(g),\n            x = o ? 0 : n.stretch * g,\n            T = o ? n.stretch * g : 0;Math.abs(T) < .001 && (T = 0), Math.abs(x) < .001 && (x = 0), Math.abs(y) < .001 && (y = 0), Math.abs(b) < .001 && (b = 0), Math.abs(w) < .001 && (w = 0);var E = \"translate3d(\" + T + \"px,\" + x + \"px,\" + y + \"px)  rotateX(\" + w + \"deg) rotateY(\" + b + \"deg)\";if (v.transform(E), v[0].style.zIndex = 1 - Math.abs(Math.round(g)), n.slideShadows) {\n          var S = o ? v.find(\".swiper-slide-shadow-left\") : v.find(\".swiper-slide-shadow-top\"),\n              C = o ? v.find(\".swiper-slide-shadow-right\") : v.find(\".swiper-slide-shadow-bottom\");0 === S.length && (S = t('<div class=\"swiper-slide-shadow-' + (o ? \"left\" : \"top\") + '\"></div>'), v.append(S)), 0 === C.length && (C = t('<div class=\"swiper-slide-shadow-' + (o ? \"right\" : \"bottom\") + '\"></div>'), v.append(C)), S.length && (S[0].style.opacity = g > 0 ? g : 0), C.length && (C[0].style.opacity = -g > 0 ? -g : 0);\n        }\n      }(h.pointerEvents || h.prefixedPointerEvents) && (a[0].style.perspectiveOrigin = d + \"px 50%\");\n    }, setTransition: function setTransition(e) {\n      this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e);\n    } },\n      se = [$, L, D, O, H, X, G, { name: \"mousewheel\", params: { mousewheel: { enabled: !1, releaseOnEdges: !1, invert: !1, forceToAxis: !1, sensitivity: 1, eventsTarged: \"container\" } }, create: function create() {\n      l.extend(this, { mousewheel: { enabled: !1, enable: B.enable.bind(this), disable: B.disable.bind(this), handle: B.handle.bind(this), lastScrollTime: l.now() } });\n    }, on: { init: function init() {\n        this.params.mousewheel.enabled && this.mousewheel.enable();\n      }, destroy: function destroy() {\n        this.mousewheel.enabled && this.mousewheel.disable();\n      } } }, { name: \"navigation\", params: { navigation: { nextEl: null, prevEl: null, hideOnClick: !1, disabledClass: \"swiper-button-disabled\", hiddenClass: \"swiper-button-hidden\", lockClass: \"swiper-button-lock\" } }, create: function create() {\n      l.extend(this, { navigation: { init: V.init.bind(this), update: V.update.bind(this), destroy: V.destroy.bind(this) } });\n    }, on: { init: function init() {\n        this.navigation.init(), this.navigation.update();\n      }, toEdge: function toEdge() {\n        this.navigation.update();\n      }, fromEdge: function fromEdge() {\n        this.navigation.update();\n      }, destroy: function destroy() {\n        this.navigation.destroy();\n      }, click: function click(e) {\n        var i = this.navigation,\n            s = i.$nextEl,\n            a = i.$prevEl;!this.params.navigation.hideOnClick || t(e.target).is(a) || t(e.target).is(s) || (s && s.toggleClass(this.params.navigation.hiddenClass), a && a.toggleClass(this.params.navigation.hiddenClass));\n      } } }, { name: \"pagination\", params: { pagination: { el: null, bulletElement: \"span\", clickable: !1, hideOnClick: !1, renderBullet: null, renderProgressbar: null, renderFraction: null, renderCustom: null, type: \"bullets\", dynamicBullets: !1, bulletClass: \"swiper-pagination-bullet\", bulletActiveClass: \"swiper-pagination-bullet-active\", modifierClass: \"swiper-pagination-\", currentClass: \"swiper-pagination-current\", totalClass: \"swiper-pagination-total\", hiddenClass: \"swiper-pagination-hidden\", progressbarFillClass: \"swiper-pagination-progressbar-fill\", clickableClass: \"swiper-pagination-clickable\", lockClass: \"swiper-pagination-lock\" } }, create: function create() {\n      l.extend(this, { pagination: { init: R.init.bind(this), render: R.render.bind(this), update: R.update.bind(this), destroy: R.destroy.bind(this) } });\n    }, on: { init: function init() {\n        this.pagination.init(), this.pagination.render(), this.pagination.update();\n      }, activeIndexChange: function activeIndexChange() {\n        this.params.loop ? this.pagination.update() : void 0 === this.snapIndex && this.pagination.update();\n      }, snapIndexChange: function snapIndexChange() {\n        this.params.loop || this.pagination.update();\n      }, slidesLengthChange: function slidesLengthChange() {\n        this.params.loop && (this.pagination.render(), this.pagination.update());\n      }, snapGridLengthChange: function snapGridLengthChange() {\n        this.params.loop || (this.pagination.render(), this.pagination.update());\n      }, destroy: function destroy() {\n        this.pagination.destroy();\n      }, click: function click(e) {\n        this.params.pagination.el && this.params.pagination.hideOnClick && this.pagination.$el.length > 0 && !t(e.target).hasClass(this.params.pagination.bulletClass) && this.pagination.$el.toggleClass(this.params.pagination.hiddenClass);\n      } } }, { name: \"scrollbar\", params: { scrollbar: { el: null, dragSize: \"auto\", hide: !1, draggable: !1, snapOnRelease: !0, lockClass: \"swiper-scrollbar-lock\" } }, create: function create() {\n      l.extend(this, { scrollbar: { init: F.init.bind(this), destroy: F.destroy.bind(this), updateSize: F.updateSize.bind(this), setTranslate: F.setTranslate.bind(this), setTransition: F.setTransition.bind(this), enableDraggable: F.enableDraggable.bind(this), disableDraggable: F.disableDraggable.bind(this), setDragPosition: F.setDragPosition.bind(this), onDragStart: F.onDragStart.bind(this), onDragMove: F.onDragMove.bind(this), onDragEnd: F.onDragEnd.bind(this), isTouched: !1, timeout: null, dragTimeout: null } });\n    }, on: { init: function init() {\n        this.scrollbar.init(), this.scrollbar.updateSize(), this.scrollbar.setTranslate();\n      }, update: function update() {\n        this.scrollbar.updateSize();\n      }, resize: function resize() {\n        this.scrollbar.updateSize();\n      }, observerUpdate: function observerUpdate() {\n        this.scrollbar.updateSize();\n      }, setTranslate: function setTranslate() {\n        this.scrollbar.setTranslate();\n      }, setTransition: function setTransition(e) {\n        this.scrollbar.setTransition(e);\n      }, destroy: function destroy() {\n        this.scrollbar.destroy();\n      } } }, { name: \"parallax\", params: { parallax: { enabled: !1 } }, create: function create() {\n      l.extend(this, { parallax: { setTransform: W.setTransform.bind(this), setTranslate: W.setTranslate.bind(this), setTransition: W.setTransition.bind(this) } });\n    }, on: { beforeInit: function beforeInit() {\n        this.params.watchSlidesProgress = !0;\n      }, init: function init() {\n        this.params.parallax && this.parallax.setTranslate();\n      }, setTranslate: function setTranslate() {\n        this.params.parallax && this.parallax.setTranslate();\n      }, setTransition: function setTransition(e) {\n        this.params.parallax && this.parallax.setTransition(e);\n      } } }, { name: \"zoom\", params: { zoom: { enabled: !1, maxRatio: 3, minRatio: 1, toggle: !0, containerClass: \"swiper-zoom-container\", zoomedSlideClass: \"swiper-slide-zoomed\" } }, create: function create() {\n      var e = this,\n          t = { enabled: !1, scale: 1, currentScale: 1, isScaling: !1, gesture: { $slideEl: void 0, slideWidth: void 0, slideHeight: void 0, $imageEl: void 0, $imageWrapEl: void 0, maxRatio: 3 }, image: { isTouched: void 0, isMoved: void 0, currentX: void 0, currentY: void 0, minX: void 0, minY: void 0, maxX: void 0, maxY: void 0, width: void 0, height: void 0, startX: void 0, startY: void 0, touchesStart: {}, touchesCurrent: {} }, velocity: { x: void 0, y: void 0, prevPositionX: void 0, prevPositionY: void 0, prevTime: void 0 } };\"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out\".split(\" \").forEach(function (i) {\n        t[i] = j[i].bind(e);\n      }), l.extend(e, { zoom: t });\n    }, on: { init: function init() {\n        this.params.zoom.enabled && this.zoom.enable();\n      }, destroy: function destroy() {\n        this.zoom.disable();\n      }, touchStart: function touchStart(e) {\n        this.zoom.enabled && this.zoom.onTouchStart(e);\n      }, touchEnd: function touchEnd(e) {\n        this.zoom.enabled && this.zoom.onTouchEnd(e);\n      }, doubleTap: function doubleTap(e) {\n        this.params.zoom.enabled && this.zoom.enabled && this.params.zoom.toggle && this.zoom.toggle(e);\n      }, transitionEnd: function transitionEnd() {\n        this.zoom.enabled && this.params.zoom.enabled && this.zoom.onTransitionEnd();\n      } } }, { name: \"lazy\", params: { lazy: { enabled: !1, loadPrevNext: !1, loadPrevNextAmount: 1, loadOnTransitionStart: !1, elementClass: \"swiper-lazy\", loadingClass: \"swiper-lazy-loading\", loadedClass: \"swiper-lazy-loaded\", preloaderClass: \"swiper-lazy-preloader\" } }, create: function create() {\n      l.extend(this, { lazy: { initialImageLoaded: !1, load: q.load.bind(this), loadInSlide: q.loadInSlide.bind(this) } });\n    }, on: { beforeInit: function beforeInit() {\n        this.params.lazy.enabled && this.params.preloadImages && (this.params.preloadImages = !1);\n      }, init: function init() {\n        this.params.lazy.enabled && !this.params.loop && 0 === this.params.initialSlide && this.lazy.load();\n      }, scroll: function scroll() {\n        this.params.freeMode && !this.params.freeModeSticky && this.lazy.load();\n      }, resize: function resize() {\n        this.params.lazy.enabled && this.lazy.load();\n      }, scrollbarDragMove: function scrollbarDragMove() {\n        this.params.lazy.enabled && this.lazy.load();\n      }, transitionStart: function transitionStart() {\n        this.params.lazy.enabled && (this.params.lazy.loadOnTransitionStart || !this.params.lazy.loadOnTransitionStart && !this.lazy.initialImageLoaded) && this.lazy.load();\n      }, transitionEnd: function transitionEnd() {\n        this.params.lazy.enabled && !this.params.lazy.loadOnTransitionStart && this.lazy.load();\n      } } }, { name: \"controller\", params: { controller: { control: void 0, inverse: !1, by: \"slide\" } }, create: function create() {\n      l.extend(this, { controller: { control: this.params.controller.control, getInterpolateFunction: K.getInterpolateFunction.bind(this), setTranslate: K.setTranslate.bind(this), setTransition: K.setTransition.bind(this) } });\n    }, on: { update: function update() {\n        this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);\n      }, resize: function resize() {\n        this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);\n      }, observerUpdate: function observerUpdate() {\n        this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);\n      }, setTranslate: function setTranslate(e, t) {\n        this.controller.control && this.controller.setTranslate(e, t);\n      }, setTransition: function setTransition(e, t) {\n        this.controller.control && this.controller.setTransition(e, t);\n      } } }, { name: \"a11y\", params: { a11y: { enabled: !1, notificationClass: \"swiper-notification\", prevSlideMessage: \"Previous slide\", nextSlideMessage: \"Next slide\", firstSlideMessage: \"This is the first slide\", lastSlideMessage: \"This is the last slide\", paginationBulletMessage: \"Go to slide {{index}}\" } }, create: function create() {\n      var e = this;l.extend(e, { a11y: { liveRegion: t('<span class=\"' + e.params.a11y.notificationClass + '\" aria-live=\"assertive\" aria-atomic=\"true\"></span>') } }), Object.keys(U).forEach(function (t) {\n        e.a11y[t] = U[t].bind(e);\n      });\n    }, on: { init: function init() {\n        this.params.a11y.enabled && (this.a11y.init(), this.a11y.updateNavigation());\n      }, toEdge: function toEdge() {\n        this.params.a11y.enabled && this.a11y.updateNavigation();\n      }, fromEdge: function fromEdge() {\n        this.params.a11y.enabled && this.a11y.updateNavigation();\n      }, paginationUpdate: function paginationUpdate() {\n        this.params.a11y.enabled && this.a11y.updatePagination();\n      }, destroy: function destroy() {\n        this.params.a11y.enabled && this.a11y.destroy();\n      } } }, { name: \"history\", params: { history: { enabled: !1, replaceState: !1, key: \"slides\" } }, create: function create() {\n      l.extend(this, { history: { init: _.init.bind(this), setHistory: _.setHistory.bind(this), setHistoryPopState: _.setHistoryPopState.bind(this), scrollToSlide: _.scrollToSlide.bind(this), destroy: _.destroy.bind(this) } });\n    }, on: { init: function init() {\n        this.params.history.enabled && this.history.init();\n      }, destroy: function destroy() {\n        this.params.history.enabled && this.history.destroy();\n      }, transitionEnd: function transitionEnd() {\n        this.history.initialized && this.history.setHistory(this.params.history.key, this.activeIndex);\n      } } }, { name: \"hash-navigation\", params: { hashNavigation: { enabled: !1, replaceState: !1, watchState: !1 } }, create: function create() {\n      l.extend(this, { hashNavigation: { initialized: !1, init: Z.init.bind(this), destroy: Z.destroy.bind(this), setHash: Z.setHash.bind(this), onHashCange: Z.onHashCange.bind(this) } });\n    }, on: { init: function init() {\n        this.params.hashNavigation.enabled && this.hashNavigation.init();\n      }, destroy: function destroy() {\n        this.params.hashNavigation.enabled && this.hashNavigation.destroy();\n      }, transitionEnd: function transitionEnd() {\n        this.hashNavigation.initialized && this.hashNavigation.setHash();\n      } } }, { name: \"autoplay\", params: { autoplay: { enabled: !1, delay: 3e3, waitForTransition: !0, disableOnInteraction: !0, stopOnLastSlide: !1, reverseDirection: !1 } }, create: function create() {\n      l.extend(this, { autoplay: { running: !1, paused: !1, run: Q.run.bind(this), start: Q.start.bind(this), stop: Q.stop.bind(this), pause: Q.pause.bind(this) } });\n    }, on: { init: function init() {\n        this.params.autoplay.enabled && this.autoplay.start();\n      }, beforeTransitionStart: function beforeTransitionStart(e, t) {\n        this.autoplay.running && (t || !this.params.autoplay.disableOnInteraction ? this.autoplay.pause(e) : this.autoplay.stop());\n      }, sliderFirstMove: function sliderFirstMove() {\n        this.autoplay.running && (this.params.autoplay.disableOnInteraction ? this.autoplay.stop() : this.autoplay.pause());\n      }, destroy: function destroy() {\n        this.autoplay.running && this.autoplay.stop();\n      } } }, { name: \"effect-fade\", params: { fadeEffect: { crossFade: !1 } }, create: function create() {\n      l.extend(this, { fadeEffect: { setTranslate: J.setTranslate.bind(this), setTransition: J.setTransition.bind(this) } });\n    }, on: { beforeInit: function beforeInit() {\n        if (\"fade\" === this.params.effect) {\n          this.classNames.push(this.params.containerModifierClass + \"fade\");var e = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 };l.extend(this.params, e), l.extend(this.originalParams, e);\n        }\n      }, setTranslate: function setTranslate() {\n        \"fade\" === this.params.effect && this.fadeEffect.setTranslate();\n      }, setTransition: function setTransition(e) {\n        \"fade\" === this.params.effect && this.fadeEffect.setTransition(e);\n      } } }, { name: \"effect-cube\", params: { cubeEffect: { slideShadows: !0, shadow: !0, shadowOffset: 20, shadowScale: .94 } }, create: function create() {\n      l.extend(this, { cubeEffect: { setTranslate: ee.setTranslate.bind(this), setTransition: ee.setTransition.bind(this) } });\n    }, on: { beforeInit: function beforeInit() {\n        if (\"cube\" === this.params.effect) {\n          this.classNames.push(this.params.containerModifierClass + \"cube\"), this.classNames.push(this.params.containerModifierClass + \"3d\");var e = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, resistanceRatio: 0, spaceBetween: 0, centeredSlides: !1, virtualTranslate: !0 };l.extend(this.params, e), l.extend(this.originalParams, e);\n        }\n      }, setTranslate: function setTranslate() {\n        \"cube\" === this.params.effect && this.cubeEffect.setTranslate();\n      }, setTransition: function setTransition(e) {\n        \"cube\" === this.params.effect && this.cubeEffect.setTransition(e);\n      } } }, { name: \"effect-flip\", params: { flipEffect: { slideShadows: !0, limitRotation: !0 } }, create: function create() {\n      l.extend(this, { flipEffect: { setTranslate: te.setTranslate.bind(this), setTransition: te.setTransition.bind(this) } });\n    }, on: { beforeInit: function beforeInit() {\n        if (\"flip\" === this.params.effect) {\n          this.classNames.push(this.params.containerModifierClass + \"flip\"), this.classNames.push(this.params.containerModifierClass + \"3d\");var e = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 };l.extend(this.params, e), l.extend(this.originalParams, e);\n        }\n      }, setTranslate: function setTranslate() {\n        \"flip\" === this.params.effect && this.flipEffect.setTranslate();\n      }, setTransition: function setTransition(e) {\n        \"flip\" === this.params.effect && this.flipEffect.setTransition(e);\n      } } }, { name: \"effect-coverflow\", params: { coverflowEffect: { rotate: 50, stretch: 0, depth: 100, modifier: 1, slideShadows: !0 } }, create: function create() {\n      l.extend(this, { coverflowEffect: { setTranslate: ie.setTranslate.bind(this), setTransition: ie.setTransition.bind(this) } });\n    }, on: { beforeInit: function beforeInit() {\n        \"coverflow\" === this.params.effect && (this.classNames.push(this.params.containerModifierClass + \"coverflow\"), this.classNames.push(this.params.containerModifierClass + \"3d\"), this.params.watchSlidesProgress = !0, this.originalParams.watchSlidesProgress = !0);\n      }, setTranslate: function setTranslate() {\n        \"coverflow\" === this.params.effect && this.coverflowEffect.setTranslate();\n      }, setTransition: function setTransition(e) {\n        \"coverflow\" === this.params.effect && this.coverflowEffect.setTransition(e);\n      } } }];return void 0 === k.use && (k.use = k.Class.use, k.installModule = k.Class.installModule), k.use(se), k;\n});\n//# sourceMappingURL=swiper.min.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * jQuery JavaScript Library v1.9.1\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2013-2-4\n */\n(function (window, undefined) {\n\n\t// Can't do this because several apps including ASP.NET trace\n\t// the stack via arguments.caller.callee and Firefox dies if\n\t// you try to trace through \"use strict\" call chains. (#13335)\n\t// Support: Firefox 18+\n\t//\"use strict\";\n\tvar\n\t// The deferred used on DOM ready\n\treadyList,\n\n\n\t// A central reference to the root jQuery(document)\n\trootjQuery,\n\n\n\t// Support: IE<9\n\t// For `typeof node.method` instead of `node.method !== undefined`\n\tcore_strundefined = typeof undefined === \"undefined\" ? \"undefined\" : _typeof(undefined),\n\n\n\t// Use the correct document accordingly with window argument (sandbox)\n\tdocument = window.document,\n\t    location = window.location,\n\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$,\n\n\n\t// [[Class]] -> type pairs\n\tclass2type = {},\n\n\n\t// List of deleted data cache ids, so we can reuse them\n\tcore_deletedIds = [],\n\t    core_version = \"1.9.1\",\n\n\n\t// Save a reference to some core methods\n\tcore_concat = core_deletedIds.concat,\n\t    core_push = core_deletedIds.push,\n\t    core_slice = core_deletedIds.slice,\n\t    core_indexOf = core_deletedIds.indexOf,\n\t    core_toString = class2type.toString,\n\t    core_hasOwn = class2type.hasOwnProperty,\n\t    core_trim = core_version.trim,\n\n\n\t// Define a local copy of jQuery\n\tjQuery = function jQuery(selector, context) {\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\treturn new jQuery.fn.init(selector, context, rootjQuery);\n\t},\n\n\n\t// Used for matching numbers\n\tcore_pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n\n\n\t// Used for splitting on whitespace\n\tcore_rnotwhite = /\\S+/g,\n\n\n\t// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\n\t// Match a standalone tag\n\trsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n\n\n\t// JSON RegExp\n\trvalidchars = /^[\\],:{}\\s]*$/,\n\t    rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g,\n\t    rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n\t    rvalidtokens = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,\n\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\t    rdashAlpha = /-([\\da-z])/gi,\n\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function fcamelCase(all, letter) {\n\t\treturn letter.toUpperCase();\n\t},\n\n\n\t// The ready event handler\n\tcompleted = function completed(event) {\n\n\t\t// readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n\t\tif (document.addEventListener || event.type === \"load\" || document.readyState === \"complete\") {\n\t\t\tdetach();\n\t\t\tjQuery.ready();\n\t\t}\n\t},\n\n\t// Clean-up method for dom ready events\n\tdetach = function detach() {\n\t\tif (document.addEventListener) {\n\t\t\tdocument.removeEventListener(\"DOMContentLoaded\", completed, false);\n\t\t\twindow.removeEventListener(\"load\", completed, false);\n\t\t} else {\n\t\t\tdocument.detachEvent(\"onreadystatechange\", completed);\n\t\t\twindow.detachEvent(\"onload\", completed);\n\t\t}\n\t};\n\n\tjQuery.fn = jQuery.prototype = {\n\t\t// The current version of jQuery being used\n\t\tjquery: core_version,\n\n\t\tconstructor: jQuery,\n\t\tinit: function init(selector, context, rootjQuery) {\n\t\t\tvar match, elem;\n\n\t\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\t\tif (!selector) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// Handle HTML strings\n\t\t\tif (typeof selector === \"string\") {\n\t\t\t\tif (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\n\t\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\t\tmatch = [null, selector, null];\n\t\t\t\t} else {\n\t\t\t\t\tmatch = rquickExpr.exec(selector);\n\t\t\t\t}\n\n\t\t\t\t// Match html or make sure no context is specified for #id\n\t\t\t\tif (match && (match[1] || !context)) {\n\n\t\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\t\tif (match[1]) {\n\t\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t\t\t\t// scripts is true for back-compat\n\t\t\t\t\t\tjQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\n\n\t\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\t\tif (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n\t\t\t\t\t\t\tfor (match in context) {\n\t\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\t\tif (jQuery.isFunction(this[match])) {\n\t\t\t\t\t\t\t\t\tthis[match](context[match]);\n\n\t\t\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.attr(match, context[match]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem = document.getElementById(match[2]);\n\n\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\t\t// Handle the case where IE and Opera return items\n\t\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\t\tif (elem.id !== match[2]) {\n\t\t\t\t\t\t\t\treturn rootjQuery.find(selector);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Otherwise, we inject the element directly into the jQuery object\n\t\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\t\tthis[0] = elem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.context = document;\n\t\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t}\n\n\t\t\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t\t} else if (!context || context.jquery) {\n\t\t\t\t\treturn (context || rootjQuery).find(selector);\n\n\t\t\t\t\t// HANDLE: $(expr, context)\n\t\t\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t\t} else {\n\t\t\t\t\treturn this.constructor(context).find(selector);\n\t\t\t\t}\n\n\t\t\t\t// HANDLE: $(DOMElement)\n\t\t\t} else if (selector.nodeType) {\n\t\t\t\tthis.context = this[0] = selector;\n\t\t\t\tthis.length = 1;\n\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(function)\n\t\t\t\t// Shortcut for document ready\n\t\t\t} else if (jQuery.isFunction(selector)) {\n\t\t\t\treturn rootjQuery.ready(selector);\n\t\t\t}\n\n\t\t\tif (selector.selector !== undefined) {\n\t\t\t\tthis.selector = selector.selector;\n\t\t\t\tthis.context = selector.context;\n\t\t\t}\n\n\t\t\treturn jQuery.makeArray(selector, this);\n\t\t},\n\n\t\t// Start with an empty selector\n\t\tselector: \"\",\n\n\t\t// The default length of a jQuery object is 0\n\t\tlength: 0,\n\n\t\t// The number of elements contained in the matched element set\n\t\tsize: function size() {\n\t\t\treturn this.length;\n\t\t},\n\n\t\ttoArray: function toArray() {\n\t\t\treturn core_slice.call(this);\n\t\t},\n\n\t\t// Get the Nth element in the matched element set OR\n\t\t// Get the whole matched element set as a clean array\n\t\tget: function get(num) {\n\t\t\treturn num == null ?\n\n\t\t\t// Return a 'clean' array\n\t\t\tthis.toArray() :\n\n\t\t\t// Return just the object\n\t\t\tnum < 0 ? this[this.length + num] : this[num];\n\t\t},\n\n\t\t// Take an array of elements and push it onto the stack\n\t\t// (returning the new matched element set)\n\t\tpushStack: function pushStack(elems) {\n\n\t\t\t// Build a new jQuery matched element set\n\t\t\tvar ret = jQuery.merge(this.constructor(), elems);\n\n\t\t\t// Add the old object onto the stack (as a reference)\n\t\t\tret.prevObject = this;\n\t\t\tret.context = this.context;\n\n\t\t\t// Return the newly-formed element set\n\t\t\treturn ret;\n\t\t},\n\n\t\t// Execute a callback for every element in the matched set.\n\t\t// (You can seed the arguments with an array of args, but this is\n\t\t// only used internally.)\n\t\teach: function each(callback, args) {\n\t\t\treturn jQuery.each(this, callback, args);\n\t\t},\n\n\t\tready: function ready(fn) {\n\t\t\t// Add the callback\n\t\t\tjQuery.ready.promise().done(fn);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tslice: function slice() {\n\t\t\treturn this.pushStack(core_slice.apply(this, arguments));\n\t\t},\n\n\t\tfirst: function first() {\n\t\t\treturn this.eq(0);\n\t\t},\n\n\t\tlast: function last() {\n\t\t\treturn this.eq(-1);\n\t\t},\n\n\t\teq: function eq(i) {\n\t\t\tvar len = this.length,\n\t\t\t    j = +i + (i < 0 ? len : 0);\n\t\t\treturn this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n\t\t},\n\n\t\tmap: function map(callback) {\n\t\t\treturn this.pushStack(jQuery.map(this, function (elem, i) {\n\t\t\t\treturn callback.call(elem, i, elem);\n\t\t\t}));\n\t\t},\n\n\t\tend: function end() {\n\t\t\treturn this.prevObject || this.constructor(null);\n\t\t},\n\n\t\t// For internal use only.\n\t\t// Behaves like an Array's method, not like a jQuery method.\n\t\tpush: core_push,\n\t\tsort: [].sort,\n\t\tsplice: [].splice\n\t};\n\n\t// Give the init function the jQuery prototype for later instantiation\n\tjQuery.fn.init.prototype = jQuery.fn;\n\n\tjQuery.extend = jQuery.fn.extend = function () {\n\t\tvar src,\n\t\t    copyIsArray,\n\t\t    copy,\n\t\t    name,\n\t\t    options,\n\t\t    clone,\n\t\t    target = arguments[0] || {},\n\t\t    i = 1,\n\t\t    length = arguments.length,\n\t\t    deep = false;\n\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === \"boolean\") {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t}\n\n\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\tif ((typeof target === \"undefined\" ? \"undefined\" : _typeof(target)) !== \"object\" && !jQuery.isFunction(target)) {\n\t\t\ttarget = {};\n\t\t}\n\n\t\t// extend jQuery itself if only one argument is passed\n\t\tif (length === i) {\n\t\t\ttarget = this;\n\t\t\t--i;\n\t\t}\n\n\t\tfor (; i < length; i++) {\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif ((options = arguments[i]) != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target === copy) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = jQuery.extend(deep, clone, copy);\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (copy !== undefined) {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\n\tjQuery.extend({\n\t\tnoConflict: function noConflict(deep) {\n\t\t\tif (window.$ === jQuery) {\n\t\t\t\twindow.$ = _$;\n\t\t\t}\n\n\t\t\tif (deep && window.jQuery === jQuery) {\n\t\t\t\twindow.jQuery = _jQuery;\n\t\t\t}\n\n\t\t\treturn jQuery;\n\t\t},\n\n\t\t// Is the DOM ready to be used? Set to true once it occurs.\n\t\tisReady: false,\n\n\t\t// A counter to track how many items to wait for before\n\t\t// the ready event fires. See #6781\n\t\treadyWait: 1,\n\n\t\t// Hold (or release) the ready event\n\t\tholdReady: function holdReady(hold) {\n\t\t\tif (hold) {\n\t\t\t\tjQuery.readyWait++;\n\t\t\t} else {\n\t\t\t\tjQuery.ready(true);\n\t\t\t}\n\t\t},\n\n\t\t// Handle when the DOM is ready\n\t\tready: function ready(wait) {\n\n\t\t\t// Abort if there are pending holds or we're already ready\n\t\t\tif (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n\t\t\tif (!document.body) {\n\t\t\t\treturn setTimeout(jQuery.ready);\n\t\t\t}\n\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\n\t\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\t\tif (wait !== true && --jQuery.readyWait > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If there are functions bound, to execute\n\t\t\treadyList.resolveWith(document, [jQuery]);\n\n\t\t\t// Trigger any bound ready events\n\t\t\tif (jQuery.fn.trigger) {\n\t\t\t\tjQuery(document).trigger(\"ready\").off(\"ready\");\n\t\t\t}\n\t\t},\n\n\t\t// See test/unit/core.js for details concerning isFunction.\n\t\t// Since version 1.3, DOM methods and functions like alert\n\t\t// aren't supported. They return false on IE (#2968).\n\t\tisFunction: function isFunction(obj) {\n\t\t\treturn jQuery.type(obj) === \"function\";\n\t\t},\n\n\t\tisArray: Array.isArray || function (obj) {\n\t\t\treturn jQuery.type(obj) === \"array\";\n\t\t},\n\n\t\tisWindow: function isWindow(obj) {\n\t\t\treturn obj != null && obj == obj.window;\n\t\t},\n\n\t\tisNumeric: function isNumeric(obj) {\n\t\t\treturn !isNaN(parseFloat(obj)) && isFinite(obj);\n\t\t},\n\n\t\ttype: function type(obj) {\n\t\t\tif (obj == null) {\n\t\t\t\treturn String(obj);\n\t\t\t}\n\t\t\treturn (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\" || typeof obj === \"function\" ? class2type[core_toString.call(obj)] || \"object\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t\t},\n\n\t\tisPlainObject: function isPlainObject(obj) {\n\t\t\t// Must be an Object.\n\t\t\t// Because of IE, we also have to check the presence of the constructor property.\n\t\t\t// Make sure that DOM nodes and window objects don't pass through, as well\n\t\t\tif (!obj || jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow(obj)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Not own constructor property must be Object\n\t\t\t\tif (obj.constructor && !core_hasOwn.call(obj, \"constructor\") && !core_hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// IE8,9 Will throw exceptions on certain host objects #9897\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t\t// if last one is own, then all properties are own.\n\n\t\t\tvar key;\n\t\t\tfor (key in obj) {}\n\n\t\t\treturn key === undefined || core_hasOwn.call(obj, key);\n\t\t},\n\n\t\tisEmptyObject: function isEmptyObject(obj) {\n\t\t\tvar name;\n\t\t\tfor (name in obj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\terror: function error(msg) {\n\t\t\tthrow new Error(msg);\n\t\t},\n\n\t\t// data: string of html\n\t\t// context (optional): If specified, the fragment will be created in this context, defaults to document\n\t\t// keepScripts (optional): If true, will include scripts passed in the html string\n\t\tparseHTML: function parseHTML(data, context, keepScripts) {\n\t\t\tif (!data || typeof data !== \"string\") {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (typeof context === \"boolean\") {\n\t\t\t\tkeepScripts = context;\n\t\t\t\tcontext = false;\n\t\t\t}\n\t\t\tcontext = context || document;\n\n\t\t\tvar parsed = rsingleTag.exec(data),\n\t\t\t    scripts = !keepScripts && [];\n\n\t\t\t// Single tag\n\t\t\tif (parsed) {\n\t\t\t\treturn [context.createElement(parsed[1])];\n\t\t\t}\n\n\t\t\tparsed = jQuery.buildFragment([data], context, scripts);\n\t\t\tif (scripts) {\n\t\t\t\tjQuery(scripts).remove();\n\t\t\t}\n\t\t\treturn jQuery.merge([], parsed.childNodes);\n\t\t},\n\n\t\tparseJSON: function parseJSON(data) {\n\t\t\t// Attempt to parse using the native JSON parser first\n\t\t\tif (window.JSON && window.JSON.parse) {\n\t\t\t\treturn window.JSON.parse(data);\n\t\t\t}\n\n\t\t\tif (data === null) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (typeof data === \"string\") {\n\n\t\t\t\t// Make sure leading/trailing whitespace is removed (IE can't handle it)\n\t\t\t\tdata = jQuery.trim(data);\n\n\t\t\t\tif (data) {\n\t\t\t\t\t// Make sure the incoming data is actual JSON\n\t\t\t\t\t// Logic borrowed from http://json.org/json2.js\n\t\t\t\t\tif (rvalidchars.test(data.replace(rvalidescape, \"@\").replace(rvalidtokens, \"]\").replace(rvalidbraces, \"\"))) {\n\n\t\t\t\t\t\treturn new Function(\"return \" + data)();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjQuery.error(\"Invalid JSON: \" + data);\n\t\t},\n\n\t\t// Cross-browser xml parsing\n\t\tparseXML: function parseXML(data) {\n\t\t\tvar xml, tmp;\n\t\t\tif (!data || typeof data !== \"string\") {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (window.DOMParser) {\n\t\t\t\t\t// Standard\n\t\t\t\t\ttmp = new DOMParser();\n\t\t\t\t\txml = tmp.parseFromString(data, \"text/xml\");\n\t\t\t\t} else {\n\t\t\t\t\t// IE\n\t\t\t\t\txml = new ActiveXObject(\"Microsoft.XMLDOM\");\n\t\t\t\t\txml.async = \"false\";\n\t\t\t\t\txml.loadXML(data);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\txml = undefined;\n\t\t\t}\n\t\t\tif (!xml || !xml.documentElement || xml.getElementsByTagName(\"parsererror\").length) {\n\t\t\t\tjQuery.error(\"Invalid XML: \" + data);\n\t\t\t}\n\t\t\treturn xml;\n\t\t},\n\n\t\tnoop: function noop() {},\n\n\t\t// Evaluates a script in a global context\n\t\t// Workarounds based on findings by Jim Driscoll\n\t\t// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n\t\tglobalEval: function globalEval(data) {\n\t\t\tif (data && jQuery.trim(data)) {\n\t\t\t\t// We use execScript on Internet Explorer\n\t\t\t\t// We use an anonymous function so that context is window\n\t\t\t\t// rather than jQuery in Firefox\n\t\t\t\t(window.execScript || function (data) {\n\t\t\t\t\twindow[\"eval\"].call(window, data);\n\t\t\t\t})(data);\n\t\t\t}\n\t\t},\n\n\t\t// Convert dashed to camelCase; used by the css and data modules\n\t\t// Microsoft forgot to hump their vendor prefix (#9572)\n\t\tcamelCase: function camelCase(string) {\n\t\t\treturn string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n\t\t},\n\n\t\tnodeName: function nodeName(elem, name) {\n\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t\t},\n\n\t\t// args is for internal usage only\n\t\teach: function each(obj, callback, args) {\n\t\t\tvar value,\n\t\t\t    i = 0,\n\t\t\t    length = obj.length,\n\t\t\t    isArray = isArraylike(obj);\n\n\t\t\tif (args) {\n\t\t\t\tif (isArray) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tvalue = callback.apply(obj[i], args);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i in obj) {\n\t\t\t\t\t\tvalue = callback.apply(obj[i], args);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// A special, fast, case for the most common use of each\n\t\t\t} else {\n\t\t\t\tif (isArray) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tvalue = callback.call(obj[i], i, obj[i]);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i in obj) {\n\t\t\t\t\t\tvalue = callback.call(obj[i], i, obj[i]);\n\n\t\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t// Use native String.trim function wherever possible\n\t\ttrim: core_trim && !core_trim.call(\"\\uFEFF\\xA0\") ? function (text) {\n\t\t\treturn text == null ? \"\" : core_trim.call(text);\n\t\t} :\n\n\t\t// Otherwise use our own trimming functionality\n\t\tfunction (text) {\n\t\t\treturn text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n\t\t},\n\n\t\t// results is for internal usage only\n\t\tmakeArray: function makeArray(arr, results) {\n\t\t\tvar ret = results || [];\n\n\t\t\tif (arr != null) {\n\t\t\t\tif (isArraylike(Object(arr))) {\n\t\t\t\t\tjQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n\t\t\t\t} else {\n\t\t\t\t\tcore_push.call(ret, arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\tinArray: function inArray(elem, arr, i) {\n\t\t\tvar len;\n\n\t\t\tif (arr) {\n\t\t\t\tif (core_indexOf) {\n\t\t\t\t\treturn core_indexOf.call(arr, elem, i);\n\t\t\t\t}\n\n\t\t\t\tlen = arr.length;\n\t\t\t\ti = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t// Skip accessing in sparse arrays\n\t\t\t\t\tif (i in arr && arr[i] === elem) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t},\n\n\t\tmerge: function merge(first, second) {\n\t\t\tvar l = second.length,\n\t\t\t    i = first.length,\n\t\t\t    j = 0;\n\n\t\t\tif (typeof l === \"number\") {\n\t\t\t\tfor (; j < l; j++) {\n\t\t\t\t\tfirst[i++] = second[j];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile (second[j] !== undefined) {\n\t\t\t\t\tfirst[i++] = second[j++];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfirst.length = i;\n\n\t\t\treturn first;\n\t\t},\n\n\t\tgrep: function grep(elems, callback, inv) {\n\t\t\tvar retVal,\n\t\t\t    ret = [],\n\t\t\t    i = 0,\n\t\t\t    length = elems.length;\n\t\t\tinv = !!inv;\n\n\t\t\t// Go through the array, only saving the items\n\t\t\t// that pass the validator function\n\t\t\tfor (; i < length; i++) {\n\t\t\t\tretVal = !!callback(elems[i], i);\n\t\t\t\tif (inv !== retVal) {\n\t\t\t\t\tret.push(elems[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\t// arg is for internal usage only\n\t\tmap: function map(elems, callback, arg) {\n\t\t\tvar value,\n\t\t\t    i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    isArray = isArraylike(elems),\n\t\t\t    ret = [];\n\n\t\t\t// Go through the array, translating each of the items to their\n\t\t\tif (isArray) {\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret[ret.length] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Go through every key on the object,\n\t\t\t} else {\n\t\t\t\tfor (i in elems) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret[ret.length] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Flatten any nested arrays\n\t\t\treturn core_concat.apply([], ret);\n\t\t},\n\n\t\t// A global GUID counter for objects\n\t\tguid: 1,\n\n\t\t// Bind a function to a context, optionally partially applying any\n\t\t// arguments.\n\t\tproxy: function proxy(fn, context) {\n\t\t\tvar args, proxy, tmp;\n\n\t\t\tif (typeof context === \"string\") {\n\t\t\t\ttmp = fn[context];\n\t\t\t\tcontext = fn;\n\t\t\t\tfn = tmp;\n\t\t\t}\n\n\t\t\t// Quick check to determine if target is callable, in the spec\n\t\t\t// this throws a TypeError, but we will just return undefined.\n\t\t\tif (!jQuery.isFunction(fn)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Simulated bind\n\t\t\targs = core_slice.call(arguments, 2);\n\t\t\tproxy = function proxy() {\n\t\t\t\treturn fn.apply(context || this, args.concat(core_slice.call(arguments)));\n\t\t\t};\n\n\t\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\t\treturn proxy;\n\t\t},\n\n\t\t// Multifunctional method to get and set values of a collection\n\t\t// The value/s can optionally be executed if it's a function\n\t\taccess: function access(elems, fn, key, value, chainable, emptyGet, raw) {\n\t\t\tvar i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    bulk = key == null;\n\n\t\t\t// Sets many values\n\t\t\tif (jQuery.type(key) === \"object\") {\n\t\t\t\tchainable = true;\n\t\t\t\tfor (i in key) {\n\t\t\t\t\tjQuery.access(elems, fn, i, key[i], true, emptyGet, raw);\n\t\t\t\t}\n\n\t\t\t\t// Sets one value\n\t\t\t} else if (value !== undefined) {\n\t\t\t\tchainable = true;\n\n\t\t\t\tif (!jQuery.isFunction(value)) {\n\t\t\t\t\traw = true;\n\t\t\t\t}\n\n\t\t\t\tif (bulk) {\n\t\t\t\t\t// Bulk operations run against the entire set\n\t\t\t\t\tif (raw) {\n\t\t\t\t\t\tfn.call(elems, value);\n\t\t\t\t\t\tfn = null;\n\n\t\t\t\t\t\t// ...except when executing function values\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbulk = fn;\n\t\t\t\t\t\tfn = function fn(elem, key, value) {\n\t\t\t\t\t\t\treturn bulk.call(jQuery(elem), value);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fn) {\n\t\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\t\tfn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn chainable ? elems :\n\n\t\t\t// Gets\n\t\t\tbulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;\n\t\t},\n\n\t\tnow: function now() {\n\t\t\treturn new Date().getTime();\n\t\t}\n\t});\n\n\tjQuery.ready.promise = function (obj) {\n\t\tif (!readyList) {\n\n\t\t\treadyList = jQuery.Deferred();\n\n\t\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.\n\t\t\t// we once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\t\t\tif (document.readyState === \"complete\") {\n\t\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\t\tsetTimeout(jQuery.ready);\n\n\t\t\t\t// Standards-based browsers support DOMContentLoaded\n\t\t\t} else if (document.addEventListener) {\n\t\t\t\t// Use the handy event callback\n\t\t\t\tdocument.addEventListener(\"DOMContentLoaded\", completed, false);\n\n\t\t\t\t// A fallback to window.onload, that will always work\n\t\t\t\twindow.addEventListener(\"load\", completed, false);\n\n\t\t\t\t// If IE event model is used\n\t\t\t} else {\n\t\t\t\t// Ensure firing before onload, maybe late but safe also for iframes\n\t\t\t\tdocument.attachEvent(\"onreadystatechange\", completed);\n\n\t\t\t\t// A fallback to window.onload, that will always work\n\t\t\t\twindow.attachEvent(\"onload\", completed);\n\n\t\t\t\t// If IE and not a frame\n\t\t\t\t// continually check to see if the document is ready\n\t\t\t\tvar top = false;\n\n\t\t\t\ttry {\n\t\t\t\t\ttop = window.frameElement == null && document.documentElement;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\tif (top && top.doScroll) {\n\t\t\t\t\t(function doScrollCheck() {\n\t\t\t\t\t\tif (!jQuery.isReady) {\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t// Use the trick by Diego Perini\n\t\t\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/\n\t\t\t\t\t\t\t\ttop.doScroll(\"left\");\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn setTimeout(doScrollCheck, 50);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// detach all dom ready events\n\t\t\t\t\t\t\tdetach();\n\n\t\t\t\t\t\t\t// and execute any waiting functions\n\t\t\t\t\t\t\tjQuery.ready();\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn readyList.promise(obj);\n\t};\n\n\t// Populate the class2type map\n\tjQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (i, name) {\n\t\tclass2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n\t});\n\n\tfunction isArraylike(obj) {\n\t\tvar length = obj.length,\n\t\t    type = jQuery.type(obj);\n\n\t\tif (jQuery.isWindow(obj)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (obj.nodeType === 1 && length) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn type === \"array\" || type !== \"function\" && (length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj);\n\t}\n\n\t// All jQuery objects should point back to these\n\trootjQuery = jQuery(document);\n\t// String to Object options format cache\n\tvar optionsCache = {};\n\n\t// Convert String-formatted options into Object-formatted ones and store in cache\n\tfunction createOptions(options) {\n\t\tvar object = optionsCache[options] = {};\n\t\tjQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {\n\t\t\tobject[flag] = true;\n\t\t});\n\t\treturn object;\n\t}\n\n\t/*\n  * Create a callback list using the following parameters:\n  *\n  *\toptions: an optional list of space-separated options that will change how\n  *\t\t\tthe callback list behaves or a more traditional option object\n  *\n  * By default a callback list will act like an event callback list and can be\n  * \"fired\" multiple times.\n  *\n  * Possible options:\n  *\n  *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n  *\n  *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n  *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n  *\t\t\t\t\tvalues (like a Deferred)\n  *\n  *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n  *\n  *\tstopOnFalse:\tinterrupt callings when a callback returns false\n  *\n  */\n\tjQuery.Callbacks = function (options) {\n\n\t\t// Convert options from String-formatted to Object-formatted if needed\n\t\t// (we check in cache first)\n\t\toptions = typeof options === \"string\" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);\n\n\t\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value (for non-forgettable lists)\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\t_fired,\n\n\t\t// End of the loop when firing\n\t\tfiringLength,\n\n\t\t// Index of currently firing callback (modified by remove if needed)\n\t\tfiringIndex,\n\n\t\t// First callback to fire (used internally by add and fireWith)\n\t\tfiringStart,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Stack of fire calls for repeatable lists\n\t\tstack = !options.once && [],\n\n\t\t// Fire callbacks\n\t\tfire = function fire(data) {\n\t\t\tmemory = options.memory && data;\n\t\t\t_fired = true;\n\t\t\tfiringIndex = firingStart || 0;\n\t\t\tfiringStart = 0;\n\t\t\tfiringLength = list.length;\n\t\t\tfiring = true;\n\t\t\tfor (; list && firingIndex < firingLength; firingIndex++) {\n\t\t\t\tif (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n\t\t\t\t\tmemory = false; // To prevent further calls using add\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiring = false;\n\t\t\tif (list) {\n\t\t\t\tif (stack) {\n\t\t\t\t\tif (stack.length) {\n\t\t\t\t\t\tfire(stack.shift());\n\t\t\t\t\t}\n\t\t\t\t} else if (memory) {\n\t\t\t\t\tlist = [];\n\t\t\t\t} else {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function add() {\n\t\t\t\tif (list) {\n\t\t\t\t\t// First, we save the current length\n\t\t\t\t\tvar start = list.length;\n\t\t\t\t\t(function add(args) {\n\t\t\t\t\t\tjQuery.each(args, function (_, arg) {\n\t\t\t\t\t\t\tvar type = jQuery.type(arg);\n\t\t\t\t\t\t\tif (type === \"function\") {\n\t\t\t\t\t\t\t\tif (!options.unique || !self.has(arg)) {\n\t\t\t\t\t\t\t\t\tlist.push(arg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (arg && arg.length && type !== \"string\") {\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd(arg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(arguments);\n\t\t\t\t\t// Do we need to add the callbacks to the\n\t\t\t\t\t// current firing batch?\n\t\t\t\t\tif (firing) {\n\t\t\t\t\t\tfiringLength = list.length;\n\t\t\t\t\t\t// With memory, if we're not firing then\n\t\t\t\t\t\t// we should call right away\n\t\t\t\t\t} else if (memory) {\n\t\t\t\t\t\tfiringStart = start;\n\t\t\t\t\t\tfire(memory);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function remove() {\n\t\t\t\tif (list) {\n\t\t\t\t\tjQuery.each(arguments, function (_, arg) {\n\t\t\t\t\t\tvar index;\n\t\t\t\t\t\twhile ((index = jQuery.inArray(arg, list, index)) > -1) {\n\t\t\t\t\t\t\tlist.splice(index, 1);\n\t\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\t\tif (firing) {\n\t\t\t\t\t\t\t\tif (index <= firingLength) {\n\t\t\t\t\t\t\t\t\tfiringLength--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (index <= firingIndex) {\n\t\t\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function has(fn) {\n\t\t\t\treturn fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);\n\t\t\t},\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function empty() {\n\t\t\t\tlist = [];\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Have the list do nothing anymore\n\t\t\tdisable: function disable() {\n\t\t\t\tlist = stack = memory = undefined;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it disabled?\n\t\t\tdisabled: function disabled() {\n\t\t\t\treturn !list;\n\t\t\t},\n\t\t\t// Lock the list in its current state\n\t\t\tlock: function lock() {\n\t\t\t\tstack = undefined;\n\t\t\t\tif (!memory) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it locked?\n\t\t\tlocked: function locked() {\n\t\t\t\treturn !stack;\n\t\t\t},\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function fireWith(context, args) {\n\t\t\t\targs = args || [];\n\t\t\t\targs = [context, args.slice ? args.slice() : args];\n\t\t\t\tif (list && (!_fired || stack)) {\n\t\t\t\t\tif (firing) {\n\t\t\t\t\t\tstack.push(args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfire(args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function fire() {\n\t\t\t\tself.fireWith(this, arguments);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function fired() {\n\t\t\t\treturn !!_fired;\n\t\t\t}\n\t\t};\n\n\t\treturn self;\n\t};\n\tjQuery.extend({\n\n\t\tDeferred: function Deferred(func) {\n\t\t\tvar tuples = [\n\t\t\t// action, add listener, listener list, final state\n\t\t\t[\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", jQuery.Callbacks(\"memory\")]],\n\t\t\t    _state = \"pending\",\n\t\t\t    _promise = {\n\t\t\t\tstate: function state() {\n\t\t\t\t\treturn _state;\n\t\t\t\t},\n\t\t\t\talways: function always() {\n\t\t\t\t\tdeferred.done(arguments).fail(arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function then() /* fnDone, fnFail, fnProgress */{\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred(function (newDefer) {\n\t\t\t\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\t\t\t\tvar action = tuple[0],\n\t\t\t\t\t\t\t    fn = jQuery.isFunction(fns[i]) && fns[i];\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[tuple[1]](function () {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply(this, arguments);\n\t\t\t\t\t\t\t\tif (returned && jQuery.isFunction(returned.promise)) {\n\t\t\t\t\t\t\t\t\treturned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[action + \"With\"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function promise(obj) {\n\t\t\t\t\treturn obj != null ? jQuery.extend(obj, _promise) : _promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\t    deferred = {};\n\n\t\t\t// Keep pipe for back-compat\n\t\t\t_promise.pipe = _promise.then;\n\n\t\t\t// Add list-specific methods\n\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\tvar list = tuple[2],\n\t\t\t\t    stateString = tuple[3];\n\n\t\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\t\t_promise[tuple[1]] = list.add;\n\n\t\t\t\t// Handle state\n\t\t\t\tif (stateString) {\n\t\t\t\t\tlist.add(function () {\n\t\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\t\t_state = stateString;\n\n\t\t\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t\t}, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n\t\t\t\t}\n\n\t\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\t\tdeferred[tuple[0]] = function () {\n\t\t\t\t\tdeferred[tuple[0] + \"With\"](this === deferred ? _promise : this, arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\t\t\t\tdeferred[tuple[0] + \"With\"] = list.fireWith;\n\t\t\t});\n\n\t\t\t// Make the deferred a promise\n\t\t\t_promise.promise(deferred);\n\n\t\t\t// Call given func if any\n\t\t\tif (func) {\n\t\t\t\tfunc.call(deferred, deferred);\n\t\t\t}\n\n\t\t\t// All done!\n\t\t\treturn deferred;\n\t\t},\n\n\t\t// Deferred helper\n\t\twhen: function when(subordinate /* , ..., subordinateN */) {\n\t\t\tvar i = 0,\n\t\t\t    resolveValues = core_slice.call(arguments),\n\t\t\t    length = resolveValues.length,\n\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,\n\n\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function updateFunc(i, contexts, values) {\n\t\t\t\treturn function (value) {\n\t\t\t\t\tcontexts[i] = this;\n\t\t\t\t\tvalues[i] = arguments.length > 1 ? core_slice.call(arguments) : value;\n\t\t\t\t\tif (values === progressValues) {\n\t\t\t\t\t\tdeferred.notifyWith(contexts, values);\n\t\t\t\t\t} else if (! --remaining) {\n\t\t\t\t\t\tdeferred.resolveWith(contexts, values);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\t    progressValues,\n\t\t\t    progressContexts,\n\t\t\t    resolveContexts;\n\n\t\t\t// add listeners to Deferred subordinates; treat others as resolved\n\t\t\tif (length > 1) {\n\t\t\t\tprogressValues = new Array(length);\n\t\t\t\tprogressContexts = new Array(length);\n\t\t\t\tresolveContexts = new Array(length);\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tif (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {\n\t\t\t\t\t\tresolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t--remaining;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we're not waiting on anything, resolve the master\n\t\t\tif (!remaining) {\n\t\t\t\tdeferred.resolveWith(resolveContexts, resolveValues);\n\t\t\t}\n\n\t\t\treturn deferred.promise();\n\t\t}\n\t});\n\tjQuery.support = function () {\n\n\t\tvar support,\n\t\t    all,\n\t\t    a,\n\t\t    input,\n\t\t    select,\n\t\t    fragment,\n\t\t    opt,\n\t\t    eventName,\n\t\t    isSupported,\n\t\t    i,\n\t\t    div = document.createElement(\"div\");\n\n\t\t// Setup\n\t\tdiv.setAttribute(\"className\", \"t\");\n\t\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\n\t\t// Support tests won't run in some limited or non-browser environments\n\t\tall = div.getElementsByTagName(\"*\");\n\t\ta = div.getElementsByTagName(\"a\")[0];\n\t\tif (!all || !a || !all.length) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// First batch of tests\n\t\tselect = document.createElement(\"select\");\n\t\topt = select.appendChild(document.createElement(\"option\"));\n\t\tinput = div.getElementsByTagName(\"input\")[0];\n\n\t\ta.style.cssText = \"top:1px;float:left;opacity:.5\";\n\t\tsupport = {\n\t\t\t// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)\n\t\t\tgetSetAttribute: div.className !== \"t\",\n\n\t\t\t// IE strips leading whitespace when .innerHTML is used\n\t\t\tleadingWhitespace: div.firstChild.nodeType === 3,\n\n\t\t\t// Make sure that tbody elements aren't automatically inserted\n\t\t\t// IE will insert them into empty tables\n\t\t\ttbody: !div.getElementsByTagName(\"tbody\").length,\n\n\t\t\t// Make sure that link elements get serialized correctly by innerHTML\n\t\t\t// This requires a wrapper element in IE\n\t\t\thtmlSerialize: !!div.getElementsByTagName(\"link\").length,\n\n\t\t\t// Get the style information from getAttribute\n\t\t\t// (IE uses .cssText instead)\n\t\t\tstyle: /top/.test(a.getAttribute(\"style\")),\n\n\t\t\t// Make sure that URLs aren't manipulated\n\t\t\t// (IE normalizes it by default)\n\t\t\threfNormalized: a.getAttribute(\"href\") === \"/a\",\n\n\t\t\t// Make sure that element opacity exists\n\t\t\t// (IE uses filter instead)\n\t\t\t// Use a regex to work around a WebKit issue. See #5145\n\t\t\topacity: /^0.5/.test(a.style.opacity),\n\n\t\t\t// Verify style float existence\n\t\t\t// (IE uses styleFloat instead of cssFloat)\n\t\t\tcssFloat: !!a.style.cssFloat,\n\n\t\t\t// Check the default checkbox/radio value (\"\" on WebKit; \"on\" elsewhere)\n\t\t\tcheckOn: !!input.value,\n\n\t\t\t// Make sure that a selected-by-default option has a working selected property.\n\t\t\t// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)\n\t\t\toptSelected: opt.selected,\n\n\t\t\t// Tests for enctype support on a form (#6743)\n\t\t\tenctype: !!document.createElement(\"form\").enctype,\n\n\t\t\t// Makes sure cloning an html5 element does not cause problems\n\t\t\t// Where outerHTML is undefined, this still works\n\t\t\thtml5Clone: document.createElement(\"nav\").cloneNode(true).outerHTML !== \"<:nav></:nav>\",\n\n\t\t\t// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode\n\t\t\tboxModel: document.compatMode === \"CSS1Compat\",\n\n\t\t\t// Will be defined later\n\t\t\tdeleteExpando: true,\n\t\t\tnoCloneEvent: true,\n\t\t\tinlineBlockNeedsLayout: false,\n\t\t\tshrinkWrapBlocks: false,\n\t\t\treliableMarginRight: true,\n\t\t\tboxSizingReliable: true,\n\t\t\tpixelPosition: false\n\t\t};\n\n\t\t// Make sure checked status is properly cloned\n\t\tinput.checked = true;\n\t\tsupport.noCloneChecked = input.cloneNode(true).checked;\n\n\t\t// Make sure that the options inside disabled selects aren't marked as disabled\n\t\t// (WebKit marks them as disabled)\n\t\tselect.disabled = true;\n\t\tsupport.optDisabled = !opt.disabled;\n\n\t\t// Support: IE<9\n\t\ttry {\n\t\t\tdelete div.test;\n\t\t} catch (e) {\n\t\t\tsupport.deleteExpando = false;\n\t\t}\n\n\t\t// Check if we can trust getAttribute(\"value\")\n\t\tinput = document.createElement(\"input\");\n\t\tinput.setAttribute(\"value\", \"\");\n\t\tsupport.input = input.getAttribute(\"value\") === \"\";\n\n\t\t// Check if an input maintains its value after becoming a radio\n\t\tinput.value = \"t\";\n\t\tinput.setAttribute(\"type\", \"radio\");\n\t\tsupport.radioValue = input.value === \"t\";\n\n\t\t// #11217 - WebKit loses check when the name is after the checked attribute\n\t\tinput.setAttribute(\"checked\", \"t\");\n\t\tinput.setAttribute(\"name\", \"t\");\n\n\t\tfragment = document.createDocumentFragment();\n\t\tfragment.appendChild(input);\n\n\t\t// Check if a disconnected checkbox will retain its checked\n\t\t// value of true after appended to the DOM (IE6/7)\n\t\tsupport.appendChecked = input.checked;\n\n\t\t// WebKit doesn't clone checked state correctly in fragments\n\t\tsupport.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;\n\n\t\t// Support: IE<9\n\t\t// Opera does not clone events (and typeof div.attachEvent === undefined).\n\t\t// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()\n\t\tif (div.attachEvent) {\n\t\t\tdiv.attachEvent(\"onclick\", function () {\n\t\t\t\tsupport.noCloneEvent = false;\n\t\t\t});\n\n\t\t\tdiv.cloneNode(true).click();\n\t\t}\n\n\t\t// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)\n\t\t// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php\n\t\tfor (i in { submit: true, change: true, focusin: true }) {\n\t\t\tdiv.setAttribute(eventName = \"on\" + i, \"t\");\n\n\t\t\tsupport[i + \"Bubbles\"] = eventName in window || div.attributes[eventName].expando === false;\n\t\t}\n\n\t\tdiv.style.backgroundClip = \"content-box\";\n\t\tdiv.cloneNode(true).style.backgroundClip = \"\";\n\t\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\t\t// Run tests that need a body at doc ready\n\t\tjQuery(function () {\n\t\t\tvar container,\n\t\t\t    marginDiv,\n\t\t\t    tds,\n\t\t\t    divReset = \"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\",\n\t\t\t    body = document.getElementsByTagName(\"body\")[0];\n\n\t\t\tif (!body) {\n\t\t\t\t// Return for frameset docs that don't have a body\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontainer = document.createElement(\"div\");\n\t\t\tcontainer.style.cssText = \"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\";\n\n\t\t\tbody.appendChild(container).appendChild(div);\n\n\t\t\t// Support: IE8\n\t\t\t// Check if table cells still have offsetWidth/Height when they are set\n\t\t\t// to display:none and there are still other visible table cells in a\n\t\t\t// table row; if so, offsetWidth/Height are not reliable for use when\n\t\t\t// determining if an element has been hidden directly using\n\t\t\t// display:none (it is still safe to use offsets if a parent element is\n\t\t\t// hidden; don safety goggles and see bug #4512 for more information).\n\t\t\tdiv.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\n\t\t\ttds = div.getElementsByTagName(\"td\");\n\t\t\ttds[0].style.cssText = \"padding:0;margin:0;border:0;display:none\";\n\t\t\tisSupported = tds[0].offsetHeight === 0;\n\n\t\t\ttds[0].style.display = \"\";\n\t\t\ttds[1].style.display = \"none\";\n\n\t\t\t// Support: IE8\n\t\t\t// Check if empty table cells still have offsetWidth/Height\n\t\t\tsupport.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;\n\n\t\t\t// Check box-sizing and margin behavior\n\t\t\tdiv.innerHTML = \"\";\n\t\t\tdiv.style.cssText = \"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\";\n\t\t\tsupport.boxSizing = div.offsetWidth === 4;\n\t\t\tsupport.doesNotIncludeMarginInBodyOffset = body.offsetTop !== 1;\n\n\t\t\t// Use window.getComputedStyle because jsdom on node.js will break without it.\n\t\t\tif (window.getComputedStyle) {\n\t\t\t\tsupport.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== \"1%\";\n\t\t\t\tsupport.boxSizingReliable = (window.getComputedStyle(div, null) || { width: \"4px\" }).width === \"4px\";\n\n\t\t\t\t// Check if div with explicit width and no margin-right incorrectly\n\t\t\t\t// gets computed margin-right based on width of container. (#3333)\n\t\t\t\t// Fails in WebKit before Feb 2011 nightlies\n\t\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t\tmarginDiv = div.appendChild(document.createElement(\"div\"));\n\t\t\t\tmarginDiv.style.cssText = div.style.cssText = divReset;\n\t\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\n\t\t\t\tdiv.style.width = \"1px\";\n\n\t\t\t\tsupport.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);\n\t\t\t}\n\n\t\t\tif (_typeof(div.style.zoom) !== core_strundefined) {\n\t\t\t\t// Support: IE<8\n\t\t\t\t// Check if natively block-level elements act like inline-block\n\t\t\t\t// elements when setting their display to 'inline' and giving\n\t\t\t\t// them layout\n\t\t\t\tdiv.innerHTML = \"\";\n\t\t\t\tdiv.style.cssText = divReset + \"width:1px;padding:1px;display:inline;zoom:1\";\n\t\t\t\tsupport.inlineBlockNeedsLayout = div.offsetWidth === 3;\n\n\t\t\t\t// Support: IE6\n\t\t\t\t// Check if elements with layout shrink-wrap their children\n\t\t\t\tdiv.style.display = \"block\";\n\t\t\t\tdiv.innerHTML = \"<div></div>\";\n\t\t\t\tdiv.firstChild.style.width = \"5px\";\n\t\t\t\tsupport.shrinkWrapBlocks = div.offsetWidth !== 3;\n\n\t\t\t\tif (support.inlineBlockNeedsLayout) {\n\t\t\t\t\t// Prevent IE 6 from affecting layout for positioned elements #11048\n\t\t\t\t\t// Prevent IE from shrinking the body in IE 7 mode #12869\n\t\t\t\t\t// Support: IE<8\n\t\t\t\t\tbody.style.zoom = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbody.removeChild(container);\n\n\t\t\t// Null elements to avoid leaks in IE\n\t\t\tcontainer = div = tds = marginDiv = null;\n\t\t});\n\n\t\t// Null elements to avoid leaks in IE\n\t\tall = select = fragment = opt = a = input = null;\n\n\t\treturn support;\n\t}();\n\n\tvar rbrace = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,\n\t    rmultiDash = /([A-Z])/g;\n\n\tfunction internalData(elem, name, data, pvt /* Internal Use Only */) {\n\t\tif (!jQuery.acceptData(elem)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar thisCache,\n\t\t    ret,\n\t\t    internalKey = jQuery.expando,\n\t\t    getByName = typeof name === \"string\",\n\n\n\t\t// We have to handle DOM nodes and JS objects differently because IE6-7\n\t\t// can't GC object references properly across the DOM-JS boundary\n\t\tisNode = elem.nodeType,\n\n\n\t\t// Only DOM nodes need the global jQuery cache; JS object data is\n\t\t// attached directly to the object so GC can occur automatically\n\t\tcache = isNode ? jQuery.cache : elem,\n\n\n\t\t// Only defining an ID for JS objects if its cache already exists allows\n\t\t// the code to shortcut on the same path as a DOM node with no cache\n\t\tid = isNode ? elem[internalKey] : elem[internalKey] && internalKey;\n\n\t\t// Avoid doing any more work than we need to when trying to get data on an\n\t\t// object that has no data at all\n\t\tif ((!id || !cache[id] || !pvt && !cache[id].data) && getByName && data === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!id) {\n\t\t\t// Only DOM nodes need a new unique ID for each element since their data\n\t\t\t// ends up in the global cache\n\t\t\tif (isNode) {\n\t\t\t\telem[internalKey] = id = core_deletedIds.pop() || jQuery.guid++;\n\t\t\t} else {\n\t\t\t\tid = internalKey;\n\t\t\t}\n\t\t}\n\n\t\tif (!cache[id]) {\n\t\t\tcache[id] = {};\n\n\t\t\t// Avoids exposing jQuery metadata on plain JS objects when the object\n\t\t\t// is serialized using JSON.stringify\n\t\t\tif (!isNode) {\n\t\t\t\tcache[id].toJSON = jQuery.noop;\n\t\t\t}\n\t\t}\n\n\t\t// An object can be passed to jQuery.data instead of a key/value pair; this gets\n\t\t// shallow copied over onto the existing cache\n\t\tif ((typeof name === \"undefined\" ? \"undefined\" : _typeof(name)) === \"object\" || typeof name === \"function\") {\n\t\t\tif (pvt) {\n\t\t\t\tcache[id] = jQuery.extend(cache[id], name);\n\t\t\t} else {\n\t\t\t\tcache[id].data = jQuery.extend(cache[id].data, name);\n\t\t\t}\n\t\t}\n\n\t\tthisCache = cache[id];\n\n\t\t// jQuery data() is stored in a separate object inside the object's internal data\n\t\t// cache in order to avoid key collisions between internal data and user-defined\n\t\t// data.\n\t\tif (!pvt) {\n\t\t\tif (!thisCache.data) {\n\t\t\t\tthisCache.data = {};\n\t\t\t}\n\n\t\t\tthisCache = thisCache.data;\n\t\t}\n\n\t\tif (data !== undefined) {\n\t\t\tthisCache[jQuery.camelCase(name)] = data;\n\t\t}\n\n\t\t// Check for both converted-to-camel and non-converted data property names\n\t\t// If a data property was specified\n\t\tif (getByName) {\n\n\t\t\t// First Try to find as-is property data\n\t\t\tret = thisCache[name];\n\n\t\t\t// Test for null|undefined property data\n\t\t\tif (ret == null) {\n\n\t\t\t\t// Try to find the camelCased property\n\t\t\t\tret = thisCache[jQuery.camelCase(name)];\n\t\t\t}\n\t\t} else {\n\t\t\tret = thisCache;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tfunction internalRemoveData(elem, name, pvt) {\n\t\tif (!jQuery.acceptData(elem)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar i,\n\t\t    l,\n\t\t    thisCache,\n\t\t    isNode = elem.nodeType,\n\n\n\t\t// See jQuery.data for more information\n\t\tcache = isNode ? jQuery.cache : elem,\n\t\t    id = isNode ? elem[jQuery.expando] : jQuery.expando;\n\n\t\t// If there is already no cache entry for this object, there is no\n\t\t// purpose in continuing\n\t\tif (!cache[id]) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (name) {\n\n\t\t\tthisCache = pvt ? cache[id] : cache[id].data;\n\n\t\t\tif (thisCache) {\n\n\t\t\t\t// Support array or space separated string names for data keys\n\t\t\t\tif (!jQuery.isArray(name)) {\n\n\t\t\t\t\t// try the string as a key before any manipulation\n\t\t\t\t\tif (name in thisCache) {\n\t\t\t\t\t\tname = [name];\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// split the camel cased version by spaces unless a key with the spaces exists\n\t\t\t\t\t\tname = jQuery.camelCase(name);\n\t\t\t\t\t\tif (name in thisCache) {\n\t\t\t\t\t\t\tname = [name];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tname = name.split(\" \");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\t\tname = name.concat(jQuery.map(name, jQuery.camelCase));\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\tdelete thisCache[name[i]];\n\t\t\t\t}\n\n\t\t\t\t// If there is no data left in the cache, we want to continue\n\t\t\t\t// and let the cache object itself get destroyed\n\t\t\t\tif (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// See jQuery.data for more information\n\t\tif (!pvt) {\n\t\t\tdelete cache[id].data;\n\n\t\t\t// Don't destroy the parent cache unless the internal data object\n\t\t\t// had been the only thing left in it\n\t\t\tif (!isEmptyDataObject(cache[id])) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Destroy the cache\n\t\tif (isNode) {\n\t\t\tjQuery.cleanData([elem], true);\n\n\t\t\t// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n\t\t} else if (jQuery.support.deleteExpando || cache != cache.window) {\n\t\t\tdelete cache[id];\n\n\t\t\t// When all else fails, null\n\t\t} else {\n\t\t\tcache[id] = null;\n\t\t}\n\t}\n\n\tjQuery.extend({\n\t\tcache: {},\n\n\t\t// Unique for each copy of jQuery on the page\n\t\t// Non-digits removed to match rinlinejQuery\n\t\texpando: \"jQuery\" + (core_version + Math.random()).replace(/\\D/g, \"\"),\n\n\t\t// The following elements throw uncatchable exceptions if you\n\t\t// attempt to add expando properties to them.\n\t\tnoData: {\n\t\t\t\"embed\": true,\n\t\t\t// Ban all objects except for Flash (which handle expandos)\n\t\t\t\"object\": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",\n\t\t\t\"applet\": true\n\t\t},\n\n\t\thasData: function hasData(elem) {\n\t\t\telem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];\n\t\t\treturn !!elem && !isEmptyDataObject(elem);\n\t\t},\n\n\t\tdata: function data(elem, name, _data) {\n\t\t\treturn internalData(elem, name, _data);\n\t\t},\n\n\t\tremoveData: function removeData(elem, name) {\n\t\t\treturn internalRemoveData(elem, name);\n\t\t},\n\n\t\t// For internal use only.\n\t\t_data: function _data(elem, name, data) {\n\t\t\treturn internalData(elem, name, data, true);\n\t\t},\n\n\t\t_removeData: function _removeData(elem, name) {\n\t\t\treturn internalRemoveData(elem, name, true);\n\t\t},\n\n\t\t// A method for determining if a DOM node can handle the data expando\n\t\tacceptData: function acceptData(elem) {\n\t\t\t// Do not set data on non-element because it will not be cleared (#8335).\n\t\t\tif (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];\n\n\t\t\t// nodes accept data unless otherwise specified; rejection can be conditional\n\t\t\treturn !noData || noData !== true && elem.getAttribute(\"classid\") === noData;\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tdata: function data(key, value) {\n\t\t\tvar attrs,\n\t\t\t    name,\n\t\t\t    elem = this[0],\n\t\t\t    i = 0,\n\t\t\t    data = null;\n\n\t\t\t// Gets all values\n\t\t\tif (key === undefined) {\n\t\t\t\tif (this.length) {\n\t\t\t\t\tdata = jQuery.data(elem);\n\n\t\t\t\t\tif (elem.nodeType === 1 && !jQuery._data(elem, \"parsedAttrs\")) {\n\t\t\t\t\t\tattrs = elem.attributes;\n\t\t\t\t\t\tfor (; i < attrs.length; i++) {\n\t\t\t\t\t\t\tname = attrs[i].name;\n\n\t\t\t\t\t\t\tif (!name.indexOf(\"data-\")) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase(name.slice(5));\n\n\t\t\t\t\t\t\t\tdataAttr(elem, name, data[name]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjQuery._data(elem, \"parsedAttrs\", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Sets multiple values\n\t\t\tif ((typeof key === \"undefined\" ? \"undefined\" : _typeof(key)) === \"object\") {\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\tjQuery.data(this, key);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn jQuery.access(this, function (value) {\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\t// Try to fetch any internally stored data first\n\t\t\t\t\treturn elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;\n\t\t\t\t}\n\n\t\t\t\tthis.each(function () {\n\t\t\t\t\tjQuery.data(this, key, value);\n\t\t\t\t});\n\t\t\t}, null, value, arguments.length > 1, null, true);\n\t\t},\n\n\t\tremoveData: function removeData(key) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeData(this, key);\n\t\t\t});\n\t\t}\n\t});\n\n\tfunction dataAttr(elem, key, data) {\n\t\t// If nothing was found internally, try to fetch any\n\t\t// data from the HTML5 data-* attribute\n\t\tif (data === undefined && elem.nodeType === 1) {\n\n\t\t\tvar name = \"data-\" + key.replace(rmultiDash, \"-$1\").toLowerCase();\n\n\t\t\tdata = elem.getAttribute(name);\n\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\ttry {\n\t\t\t\t\tdata = data === \"true\" ? true : data === \"false\" ? false : data === \"null\" ? null :\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\t\tjQuery.data(elem, key, data);\n\t\t\t} else {\n\t\t\t\tdata = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// checks a cache object for emptiness\n\tfunction isEmptyDataObject(obj) {\n\t\tvar name;\n\t\tfor (name in obj) {\n\n\t\t\t// if the public data object is empty, the private is still empty\n\t\t\tif (name === \"data\" && jQuery.isEmptyObject(obj[name])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (name !== \"toJSON\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\tjQuery.extend({\n\t\tqueue: function queue(elem, type, data) {\n\t\t\tvar queue;\n\n\t\t\tif (elem) {\n\t\t\t\ttype = (type || \"fx\") + \"queue\";\n\t\t\t\tqueue = jQuery._data(elem, type);\n\n\t\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\t\tif (data) {\n\t\t\t\t\tif (!queue || jQuery.isArray(data)) {\n\t\t\t\t\t\tqueue = jQuery._data(elem, type, jQuery.makeArray(data));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqueue.push(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn queue || [];\n\t\t\t}\n\t\t},\n\n\t\tdequeue: function dequeue(elem, type) {\n\t\t\ttype = type || \"fx\";\n\n\t\t\tvar queue = jQuery.queue(elem, type),\n\t\t\t    startLength = queue.length,\n\t\t\t    fn = queue.shift(),\n\t\t\t    hooks = jQuery._queueHooks(elem, type),\n\t\t\t    next = function next() {\n\t\t\t\tjQuery.dequeue(elem, type);\n\t\t\t};\n\n\t\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\t\tif (fn === \"inprogress\") {\n\t\t\t\tfn = queue.shift();\n\t\t\t\tstartLength--;\n\t\t\t}\n\n\t\t\thooks.cur = fn;\n\t\t\tif (fn) {\n\n\t\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t\t// automatically dequeued\n\t\t\t\tif (type === \"fx\") {\n\t\t\t\t\tqueue.unshift(\"inprogress\");\n\t\t\t\t}\n\n\t\t\t\t// clear up the last queue stop function\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tfn.call(elem, next, hooks);\n\t\t\t}\n\n\t\t\tif (!startLength && hooks) {\n\t\t\t\thooks.empty.fire();\n\t\t\t}\n\t\t},\n\n\t\t// not intended for public consumption - generates a queueHooks object, or returns the current one\n\t\t_queueHooks: function _queueHooks(elem, type) {\n\t\t\tvar key = type + \"queueHooks\";\n\t\t\treturn jQuery._data(elem, key) || jQuery._data(elem, key, {\n\t\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function () {\n\t\t\t\t\tjQuery._removeData(elem, type + \"queue\");\n\t\t\t\t\tjQuery._removeData(elem, key);\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tqueue: function queue(type, data) {\n\t\t\tvar setter = 2;\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tdata = type;\n\t\t\t\ttype = \"fx\";\n\t\t\t\tsetter--;\n\t\t\t}\n\n\t\t\tif (arguments.length < setter) {\n\t\t\t\treturn jQuery.queue(this[0], type);\n\t\t\t}\n\n\t\t\treturn data === undefined ? this : this.each(function () {\n\t\t\t\tvar queue = jQuery.queue(this, type, data);\n\n\t\t\t\t// ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks(this, type);\n\n\t\t\t\tif (type === \"fx\" && queue[0] !== \"inprogress\") {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdequeue: function dequeue(type) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t});\n\t\t},\n\t\t// Based off of the plugin by Clint Helfers, with permission.\n\t\t// http://blindsignals.com/index.php/2009/07/jquery-delay/\n\t\tdelay: function delay(time, type) {\n\t\t\ttime = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n\t\t\ttype = type || \"fx\";\n\n\t\t\treturn this.queue(type, function (next, hooks) {\n\t\t\t\tvar timeout = setTimeout(next, time);\n\t\t\t\thooks.stop = function () {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t\tclearQueue: function clearQueue(type) {\n\t\t\treturn this.queue(type || \"fx\", []);\n\t\t},\n\t\t// Get a promise resolved when queues of a certain type\n\t\t// are emptied (fx is the type by default)\n\t\tpromise: function promise(type, obj) {\n\t\t\tvar tmp,\n\t\t\t    count = 1,\n\t\t\t    defer = jQuery.Deferred(),\n\t\t\t    elements = this,\n\t\t\t    i = this.length,\n\t\t\t    resolve = function resolve() {\n\t\t\t\tif (! --count) {\n\t\t\t\t\tdefer.resolveWith(elements, [elements]);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tobj = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\ttype = type || \"fx\";\n\n\t\t\twhile (i--) {\n\t\t\t\ttmp = jQuery._data(elements[i], type + \"queueHooks\");\n\t\t\t\tif (tmp && tmp.empty) {\n\t\t\t\t\tcount++;\n\t\t\t\t\ttmp.empty.add(resolve);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve();\n\t\t\treturn defer.promise(obj);\n\t\t}\n\t});\n\tvar nodeHook,\n\t    boolHook,\n\t    rclass = /[\\t\\r\\n]/g,\n\t    rreturn = /\\r/g,\n\t    rfocusable = /^(?:input|select|textarea|button|object)$/i,\n\t    rclickable = /^(?:a|area)$/i,\n\t    rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,\n\t    ruseDefault = /^(?:checked|selected)$/i,\n\t    getSetAttribute = jQuery.support.getSetAttribute,\n\t    getSetInput = jQuery.support.input;\n\n\tjQuery.fn.extend({\n\t\tattr: function attr(name, value) {\n\t\t\treturn jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveAttr: function removeAttr(name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeAttr(this, name);\n\t\t\t});\n\t\t},\n\n\t\tprop: function prop(name, value) {\n\t\t\treturn jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveProp: function removeProp(name) {\n\t\t\tname = jQuery.propFix[name] || name;\n\t\t\treturn this.each(function () {\n\t\t\t\t// try/catch handles cases where IE balks (such as removing a property on window)\n\t\t\t\ttry {\n\t\t\t\t\tthis[name] = undefined;\n\t\t\t\t\tdelete this[name];\n\t\t\t\t} catch (e) {}\n\t\t\t});\n\t\t},\n\n\t\taddClass: function addClass(value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    i = 0,\n\t\t\t    len = this.length,\n\t\t\t    proceed = typeof value === \"string\" && value;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).addClass(value.call(this, j, this.className));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (proceed) {\n\t\t\t\t// The disjunction here is for better compressibility (see removeClass)\n\t\t\t\tclasses = (value || \"\").match(core_rnotwhite) || [];\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\telem = this[i];\n\t\t\t\t\tcur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \" \");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\tif (cur.indexOf(\" \" + clazz + \" \") < 0) {\n\t\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telem.className = jQuery.trim(cur);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremoveClass: function removeClass(value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    i = 0,\n\t\t\t    len = this.length,\n\t\t\t    proceed = arguments.length === 0 || typeof value === \"string\" && value;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).removeClass(value.call(this, j, this.className));\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (proceed) {\n\t\t\t\tclasses = (value || \"\").match(core_rnotwhite) || [];\n\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\telem = this[i];\n\t\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\t\tcur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \"\");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\t\twhile (cur.indexOf(\" \" + clazz + \" \") >= 0) {\n\t\t\t\t\t\t\t\tcur = cur.replace(\" \" + clazz + \" \", \" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telem.className = value ? jQuery.trim(cur) : \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\ttoggleClass: function toggleClass(value, stateVal) {\n\t\t\tvar type = typeof value === \"undefined\" ? \"undefined\" : _typeof(value),\n\t\t\t    isBool = typeof stateVal === \"boolean\";\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (type === \"string\") {\n\t\t\t\t\t// toggle individual class names\n\t\t\t\t\tvar className,\n\t\t\t\t\t    i = 0,\n\t\t\t\t\t    self = jQuery(this),\n\t\t\t\t\t    state = stateVal,\n\t\t\t\t\t    classNames = value.match(core_rnotwhite) || [];\n\n\t\t\t\t\twhile (className = classNames[i++]) {\n\t\t\t\t\t\t// check each className given, space separated list\n\t\t\t\t\t\tstate = isBool ? state : !self.hasClass(className);\n\t\t\t\t\t\tself[state ? \"addClass\" : \"removeClass\"](className);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Toggle whole class name\n\t\t\t\t} else if (type === core_strundefined || type === \"boolean\") {\n\t\t\t\t\tif (this.className) {\n\t\t\t\t\t\t// store className if set\n\t\t\t\t\t\tjQuery._data(this, \"__className__\", this.className);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the element has a class name or if we're passed \"false\",\n\t\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\t\tthis.className = this.className || value === false ? \"\" : jQuery._data(this, \"__className__\") || \"\";\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\thasClass: function hasClass(selector) {\n\t\t\tvar className = \" \" + selector + \" \",\n\t\t\t    i = 0,\n\t\t\t    l = this.length;\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tif (this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf(className) >= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\tval: function val(value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    isFunction,\n\t\t\t    elem = this[0];\n\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (elem) {\n\t\t\t\t\thooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n\t\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\n\t\t\t\t\tret = elem.value;\n\n\t\t\t\t\treturn typeof ret === \"string\" ?\n\t\t\t\t\t// handle most common string cases\n\t\t\t\t\tret.replace(rreturn, \"\") :\n\t\t\t\t\t// handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisFunction = jQuery.isFunction(value);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tvar val,\n\t\t\t\t    self = jQuery(this);\n\n\t\t\t\tif (this.nodeType !== 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isFunction) {\n\t\t\t\t\tval = value.call(this, i, self.val());\n\t\t\t\t} else {\n\t\t\t\t\tval = value;\n\t\t\t\t}\n\n\t\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\t\tif (val == null) {\n\t\t\t\t\tval = \"\";\n\t\t\t\t} else if (typeof val === \"number\") {\n\t\t\t\t\tval += \"\";\n\t\t\t\t} else if (jQuery.isArray(val)) {\n\t\t\t\t\tval = jQuery.map(val, function (value) {\n\t\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\thooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\n\n\t\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n\t\t\t\t\tthis.value = val;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tvalHooks: {\n\t\t\toption: {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\t// attributes.value is undefined in Blackberry 4.7 but\n\t\t\t\t\t// uses .value. See #6932\n\t\t\t\t\tvar val = elem.attributes.value;\n\t\t\t\t\treturn !val || val.specified ? elem.value : elem.text;\n\t\t\t\t}\n\t\t\t},\n\t\t\tselect: {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\tvar value,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    index = elem.selectedIndex,\n\t\t\t\t\t    one = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\t    values = one ? null : [],\n\t\t\t\t\t    max = one ? index + 1 : options.length,\n\t\t\t\t\t    i = index < 0 ? max : one ? index : 0;\n\n\t\t\t\t\t// Loop through all the selected options\n\t\t\t\t\tfor (; i < max; i++) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\t// oldIE doesn't update selected after form reset (#2551)\n\t\t\t\t\t\tif ((option.selected || i === index) && (\n\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\tjQuery.support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, \"optgroup\"))) {\n\n\t\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\t\tvalue = jQuery(option).val();\n\n\t\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\t\tif (one) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn values;\n\t\t\t\t},\n\n\t\t\t\tset: function set(elem, value) {\n\t\t\t\t\tvar values = jQuery.makeArray(value);\n\n\t\t\t\t\tjQuery(elem).find(\"option\").each(function () {\n\t\t\t\t\t\tthis.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!values.length) {\n\t\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t\t}\n\t\t\t\t\treturn values;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattr: function attr(elem, name, value) {\n\t\t\tvar hooks,\n\t\t\t    notxml,\n\t\t\t    ret,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// don't get/set attributes on text, comment and attribute nodes\n\t\t\tif (!elem || nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fallback to prop when attributes are not supported\n\t\t\tif (_typeof(elem.getAttribute) === core_strundefined) {\n\t\t\t\treturn jQuery.prop(elem, name, value);\n\t\t\t}\n\n\t\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc(elem);\n\n\t\t\t// All attributes are lowercase\n\t\t\t// Grab necessary hook if one is defined\n\t\t\tif (notxml) {\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\thooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t\t} else if (hooks && notxml && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\telem.setAttribute(name, value + \"\");\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else if (hooks && notxml && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\treturn ret;\n\t\t\t} else {\n\n\t\t\t\t// In IE9+, Flash objects don't have .getAttribute (#12945)\n\t\t\t\t// Support: IE9+\n\t\t\t\tif (_typeof(elem.getAttribute) !== core_strundefined) {\n\t\t\t\t\tret = elem.getAttribute(name);\n\t\t\t\t}\n\n\t\t\t\t// Non-existent attributes return null, we normalize to undefined\n\t\t\t\treturn ret == null ? undefined : ret;\n\t\t\t}\n\t\t},\n\n\t\tremoveAttr: function removeAttr(elem, value) {\n\t\t\tvar name,\n\t\t\t    propName,\n\t\t\t    i = 0,\n\t\t\t    attrNames = value && value.match(core_rnotwhite);\n\n\t\t\tif (attrNames && elem.nodeType === 1) {\n\t\t\t\twhile (name = attrNames[i++]) {\n\t\t\t\t\tpropName = jQuery.propFix[name] || name;\n\n\t\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\t\tif (rboolean.test(name)) {\n\t\t\t\t\t\t// Set corresponding property to false for boolean attributes\n\t\t\t\t\t\t// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8\n\t\t\t\t\t\tif (!getSetAttribute && ruseDefault.test(name)) {\n\t\t\t\t\t\t\telem[jQuery.camelCase(\"default-\" + name)] = elem[propName] = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telem[propName] = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// See #9699 for explanation of this approach (setting first, then removal)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjQuery.attr(elem, name, \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\telem.removeAttribute(getSetAttribute ? name : propName);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattrHooks: {\n\t\t\ttype: {\n\t\t\t\tset: function set(elem, value) {\n\t\t\t\t\tif (!jQuery.support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\")) {\n\t\t\t\t\t\t// Setting the type on a radio button after the value resets the value in IE6-9\n\t\t\t\t\t\t// Reset value to default in case type is set after value during creation\n\t\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\t\telem.setAttribute(\"type\", value);\n\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tpropFix: {\n\t\t\ttabindex: \"tabIndex\",\n\t\t\treadonly: \"readOnly\",\n\t\t\t\"for\": \"htmlFor\",\n\t\t\t\"class\": \"className\",\n\t\t\tmaxlength: \"maxLength\",\n\t\t\tcellspacing: \"cellSpacing\",\n\t\t\tcellpadding: \"cellPadding\",\n\t\t\trowspan: \"rowSpan\",\n\t\t\tcolspan: \"colSpan\",\n\t\t\tusemap: \"useMap\",\n\t\t\tframeborder: \"frameBorder\",\n\t\t\tcontenteditable: \"contentEditable\"\n\t\t},\n\n\t\tprop: function prop(elem, name, value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    notxml,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// don't get/set properties on text, comment and attribute nodes\n\t\t\tif (!elem || nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc(elem);\n\n\t\t\tif (notxml) {\n\t\t\t\t// Fix name and attach hooks\n\t\t\t\tname = jQuery.propFix[name] || name;\n\t\t\t\thooks = jQuery.propHooks[name];\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\treturn elem[name] = value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\treturn elem[name];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tpropHooks: {\n\t\t\ttabIndex: {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\t// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set\n\t\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t\tvar attributeNode = elem.getAttributeNode(\"tabindex\");\n\n\t\t\t\t\treturn attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Hook for boolean attributes\n\tboolHook = {\n\t\tget: function get(elem, name) {\n\t\t\tvar\n\t\t\t// Use .prop to determine if this attribute is understood as boolean\n\t\t\tprop = jQuery.prop(elem, name),\n\n\n\t\t\t// Fetch it accordingly\n\t\t\tattr = typeof prop === \"boolean\" && elem.getAttribute(name),\n\t\t\t    detail = typeof prop === \"boolean\" ? getSetInput && getSetAttribute ? attr != null :\n\t\t\t// oldIE fabricates an empty string for missing boolean attributes\n\t\t\t// and conflates checked/selected into attroperties\n\t\t\truseDefault.test(name) ? elem[jQuery.camelCase(\"default-\" + name)] : !!attr :\n\n\t\t\t// fetch an attribute node for properties not recognized as boolean\n\t\t\telem.getAttributeNode(name);\n\n\t\t\treturn detail && detail.value !== false ? name.toLowerCase() : undefined;\n\t\t},\n\t\tset: function set(elem, value, name) {\n\t\t\tif (value === false) {\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t} else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {\n\t\t\t\t// IE<8 needs the *property* name\n\t\t\t\telem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);\n\n\t\t\t\t// Use defaultChecked and defaultSelected for oldIE\n\t\t\t} else {\n\t\t\t\telem[jQuery.camelCase(\"default-\" + name)] = elem[name] = true;\n\t\t\t}\n\n\t\t\treturn name;\n\t\t}\n\t};\n\n\t// fix oldIE value attroperty\n\tif (!getSetInput || !getSetAttribute) {\n\t\tjQuery.attrHooks.value = {\n\t\t\tget: function get(elem, name) {\n\t\t\t\tvar ret = elem.getAttributeNode(name);\n\t\t\t\treturn jQuery.nodeName(elem, \"input\") ?\n\n\t\t\t\t// Ignore the value *property* by using defaultValue\n\t\t\t\telem.defaultValue : ret && ret.specified ? ret.value : undefined;\n\t\t\t},\n\t\t\tset: function set(elem, value, name) {\n\t\t\t\tif (jQuery.nodeName(elem, \"input\")) {\n\t\t\t\t\t// Does not return so that setAttribute is also used\n\t\t\t\t\telem.defaultValue = value;\n\t\t\t\t} else {\n\t\t\t\t\t// Use nodeHook if defined (#1954); otherwise setAttribute is fine\n\t\t\t\t\treturn nodeHook && nodeHook.set(elem, value, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// IE6/7 do not support getting/setting some attributes with get/setAttribute\n\tif (!getSetAttribute) {\n\n\t\t// Use this for any attribute in IE6/7\n\t\t// This fixes almost every IE6/7 issue\n\t\tnodeHook = jQuery.valHooks.button = {\n\t\t\tget: function get(elem, name) {\n\t\t\t\tvar ret = elem.getAttributeNode(name);\n\t\t\t\treturn ret && (name === \"id\" || name === \"name\" || name === \"coords\" ? ret.value !== \"\" : ret.specified) ? ret.value : undefined;\n\t\t\t},\n\t\t\tset: function set(elem, value, name) {\n\t\t\t\t// Set the existing or create a new attribute node\n\t\t\t\tvar ret = elem.getAttributeNode(name);\n\t\t\t\tif (!ret) {\n\t\t\t\t\telem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));\n\t\t\t\t}\n\n\t\t\t\tret.value = value += \"\";\n\n\t\t\t\t// Break association with cloned elements by also using setAttribute (#9646)\n\t\t\t\treturn name === \"value\" || value === elem.getAttribute(name) ? value : undefined;\n\t\t\t}\n\t\t};\n\n\t\t// Set contenteditable to false on removals(#10429)\n\t\t// Setting to empty string throws an error as an invalid value\n\t\tjQuery.attrHooks.contenteditable = {\n\t\t\tget: nodeHook.get,\n\t\t\tset: function set(elem, value, name) {\n\t\t\t\tnodeHook.set(elem, value === \"\" ? false : value, name);\n\t\t\t}\n\t\t};\n\n\t\t// Set width and height to auto instead of 0 on empty string( Bug #8150 )\n\t\t// This is for removals\n\t\tjQuery.each([\"width\", \"height\"], function (i, name) {\n\t\t\tjQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {\n\t\t\t\tset: function set(elem, value) {\n\t\t\t\t\tif (value === \"\") {\n\t\t\t\t\t\telem.setAttribute(name, \"auto\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Some attributes require a special call on IE\n\t// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\tif (!jQuery.support.hrefNormalized) {\n\t\tjQuery.each([\"href\", \"src\", \"width\", \"height\"], function (i, name) {\n\t\t\tjQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\tvar ret = elem.getAttribute(name, 2);\n\t\t\t\t\treturn ret == null ? undefined : ret;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// href/src property should get the full normalized URL (#10299/#12915)\n\t\tjQuery.each([\"href\", \"src\"], function (i, name) {\n\t\t\tjQuery.propHooks[name] = {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\treturn elem.getAttribute(name, 4);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tif (!jQuery.support.style) {\n\t\tjQuery.attrHooks.style = {\n\t\t\tget: function get(elem) {\n\t\t\t\t// Return undefined in the case of empty string\n\t\t\t\t// Note: IE uppercases css property names, but if we were to .toLowerCase()\n\t\t\t\t// .cssText, that would destroy case senstitivity in URL's, like in \"background\"\n\t\t\t\treturn elem.style.cssText || undefined;\n\t\t\t},\n\t\t\tset: function set(elem, value) {\n\t\t\t\treturn elem.style.cssText = value + \"\";\n\t\t\t}\n\t\t};\n\t}\n\n\t// Safari mis-reports the default selected property of an option\n\t// Accessing the parent's selectedIndex property fixes it\n\tif (!jQuery.support.optSelected) {\n\t\tjQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {\n\t\t\tget: function get(elem) {\n\t\t\t\tvar parent = elem.parentNode;\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tparent.selectedIndex;\n\n\t\t\t\t\t// Make sure that it also works with optgroups, see #5701\n\t\t\t\t\tif (parent.parentNode) {\n\t\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t}\n\n\t// IE6/7 call enctype encoding\n\tif (!jQuery.support.enctype) {\n\t\tjQuery.propFix.enctype = \"encoding\";\n\t}\n\n\t// Radios and checkboxes getter/setter\n\tif (!jQuery.support.checkOn) {\n\t\tjQuery.each([\"radio\", \"checkbox\"], function () {\n\t\t\tjQuery.valHooks[this] = {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\t// Handle the case where in Webkit \"\" is returned instead of \"on\" if a value isn't specified\n\t\t\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\tjQuery.each([\"radio\", \"checkbox\"], function () {\n\t\tjQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {\n\t\t\tset: function set(elem, value) {\n\t\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\t\treturn elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\tvar rformElems = /^(?:input|select|textarea)$/i,\n\t    rkeyEvent = /^key/,\n\t    rmouseEvent = /^(?:mouse|contextmenu)|click/,\n\t    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\t    rtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\n\tfunction returnTrue() {\n\t\treturn true;\n\t}\n\n\tfunction returnFalse() {\n\t\treturn false;\n\t}\n\n\t/*\n  * Helper functions for managing events -- not part of the public interface.\n  * Props to Dean Edwards' addEvent library for many of the ideas.\n  */\n\tjQuery.event = {\n\n\t\tglobal: {},\n\n\t\tadd: function add(elem, types, handler, data, selector) {\n\t\t\tvar tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObjIn,\n\t\t\t    special,\n\t\t\t    eventHandle,\n\t\t\t    handleObj,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = jQuery._data(elem);\n\n\t\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\t\tif (!elemData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\t\tif (handler.handler) {\n\t\t\t\thandleObjIn = handler;\n\t\t\t\thandler = handleObjIn.handler;\n\t\t\t\tselector = handleObjIn.selector;\n\t\t\t}\n\n\t\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\t\tif (!handler.guid) {\n\t\t\t\thandler.guid = jQuery.guid++;\n\t\t\t}\n\n\t\t\t// Init the element's event structure and main handler, if this is the first\n\t\t\tif (!(events = elemData.events)) {\n\t\t\t\tevents = elemData.events = {};\n\t\t\t}\n\t\t\tif (!(eventHandle = elemData.handle)) {\n\t\t\t\teventHandle = elemData.handle = function (e) {\n\t\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\t\treturn (typeof jQuery === \"undefined\" ? \"undefined\" : _typeof(jQuery)) !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;\n\t\t\t\t};\n\t\t\t\t// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\n\t\t\t\teventHandle.elem = elem;\n\t\t\t}\n\n\t\t\t// Handle multiple events separated by a space\n\t\t\t// jQuery(...).bind(\"mouseover mouseout\", fn);\n\t\t\ttypes = (types || \"\").match(core_rnotwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\n\t\t\t\t// Update special based on newly reset type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// handleObj is passed to all event handlers\n\t\t\t\thandleObj = jQuery.extend({\n\t\t\t\t\ttype: type,\n\t\t\t\t\torigType: origType,\n\t\t\t\t\tdata: data,\n\t\t\t\t\thandler: handler,\n\t\t\t\t\tguid: handler.guid,\n\t\t\t\t\tselector: selector,\n\t\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test(selector),\n\t\t\t\t\tnamespace: namespaces.join(\".\")\n\t\t\t\t}, handleObjIn);\n\n\t\t\t\t// Init the event handler queue if we're the first\n\t\t\t\tif (!(handlers = events[type])) {\n\t\t\t\t\thandlers = events[type] = [];\n\t\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t\t// Only use addEventListener/attachEvent if the special events handler returns false\n\t\t\t\t\tif (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n\t\t\t\t\t\t// Bind the global event handler to the element\n\t\t\t\t\t\tif (elem.addEventListener) {\n\t\t\t\t\t\t\telem.addEventListener(type, eventHandle, false);\n\t\t\t\t\t\t} else if (elem.attachEvent) {\n\t\t\t\t\t\t\telem.attachEvent(\"on\" + type, eventHandle);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (special.add) {\n\t\t\t\t\tspecial.add.call(elem, handleObj);\n\n\t\t\t\t\tif (!handleObj.handler.guid) {\n\t\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add to the element's handler list, delegates in front\n\t\t\t\tif (selector) {\n\t\t\t\t\thandlers.splice(handlers.delegateCount++, 0, handleObj);\n\t\t\t\t} else {\n\t\t\t\t\thandlers.push(handleObj);\n\t\t\t\t}\n\n\t\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\t\tjQuery.event.global[type] = true;\n\t\t\t}\n\n\t\t\t// Nullify elem to prevent memory leaks in IE\n\t\t\telem = null;\n\t\t},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function remove(elem, types, handler, selector, mappedTypes) {\n\t\t\tvar j,\n\t\t\t    handleObj,\n\t\t\t    tmp,\n\t\t\t    origCount,\n\t\t\t    t,\n\t\t\t    events,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = jQuery.hasData(elem) && jQuery._data(elem);\n\n\t\t\tif (!elemData || !(events = elemData.events)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Once for each type.namespace in types; type may be omitted\n\t\t\ttypes = (types || \"\").match(core_rnotwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\t\tif (!type) {\n\t\t\t\t\tfor (type in events) {\n\t\t\t\t\t\tjQuery.event.remove(elem, type + types[t], handler, selector, true);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\t\t\t\thandlers = events[type] || [];\n\t\t\t\ttmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\");\n\n\t\t\t\t// Remove matching events\n\t\t\t\torigCount = j = handlers.length;\n\t\t\t\twhile (j--) {\n\t\t\t\t\thandleObj = handlers[j];\n\n\t\t\t\t\tif ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n\t\t\t\t\t\thandlers.splice(j, 1);\n\n\t\t\t\t\t\tif (handleObj.selector) {\n\t\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (special.remove) {\n\t\t\t\t\t\t\tspecial.remove.call(elem, handleObj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\t\tif (origCount && !handlers.length) {\n\t\t\t\t\tif (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n\t\t\t\t\t\tjQuery.removeEvent(elem, type, elemData.handle);\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete events[type];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove the expando if it's no longer used\n\t\t\tif (jQuery.isEmptyObject(events)) {\n\t\t\t\tdelete elemData.handle;\n\n\t\t\t\t// removeData also checks for emptiness and clears the expando if empty\n\t\t\t\t// so use it instead of delete\n\t\t\t\tjQuery._removeData(elem, \"events\");\n\t\t\t}\n\t\t},\n\n\t\ttrigger: function trigger(event, data, elem, onlyHandlers) {\n\t\t\tvar handle,\n\t\t\t    ontype,\n\t\t\t    cur,\n\t\t\t    bubbleType,\n\t\t\t    special,\n\t\t\t    tmp,\n\t\t\t    i,\n\t\t\t    eventPath = [elem || document],\n\t\t\t    type = core_hasOwn.call(event, \"type\") ? event.type : event,\n\t\t\t    namespaces = core_hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n\n\t\t\tcur = tmp = elem = elem || document;\n\n\t\t\t// Don't do events on text and comment nodes\n\t\t\tif (elem.nodeType === 3 || elem.nodeType === 8) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\t\tif (rfocusMorph.test(type + jQuery.event.triggered)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (type.indexOf(\".\") >= 0) {\n\t\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\t\tnamespaces = type.split(\".\");\n\t\t\t\ttype = namespaces.shift();\n\t\t\t\tnamespaces.sort();\n\t\t\t}\n\t\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n\t\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\t\tevent = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === \"undefined\" ? \"undefined\" : _typeof(event)) === \"object\" && event);\n\n\t\t\tevent.isTrigger = true;\n\t\t\tevent.namespace = namespaces.join(\".\");\n\t\t\tevent.namespace_re = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n\n\t\t\t// Clean up the event in case it is being reused\n\t\t\tevent.result = undefined;\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = elem;\n\t\t\t}\n\n\t\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\t\tdata = data == null ? [event] : jQuery.makeArray(data, [event]);\n\n\t\t\t// Allow special events to draw outside the lines\n\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\tif (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\t\tif (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n\n\t\t\t\tbubbleType = special.delegateType || type;\n\t\t\t\tif (!rfocusMorph.test(bubbleType + type)) {\n\t\t\t\t\tcur = cur.parentNode;\n\t\t\t\t}\n\t\t\t\tfor (; cur; cur = cur.parentNode) {\n\t\t\t\t\teventPath.push(cur);\n\t\t\t\t\ttmp = cur;\n\t\t\t\t}\n\n\t\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\t\tif (tmp === (elem.ownerDocument || document)) {\n\t\t\t\t\teventPath.push(tmp.defaultView || tmp.parentWindow || window);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fire handlers on the event path\n\t\t\ti = 0;\n\t\t\twhile ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n\n\t\t\t\tevent.type = i > 1 ? bubbleType : special.bindType || type;\n\n\t\t\t\t// jQuery handler\n\t\t\t\thandle = (jQuery._data(cur, \"events\") || {})[event.type] && jQuery._data(cur, \"handle\");\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.apply(cur, data);\n\t\t\t\t}\n\n\t\t\t\t// Native handler\n\t\t\t\thandle = ontype && cur[ontype];\n\t\t\t\tif (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.type = type;\n\n\t\t\t// If nobody prevented the default action, do it now\n\t\t\tif (!onlyHandlers && !event.isDefaultPrevented()) {\n\n\t\t\t\tif ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === \"click\" && jQuery.nodeName(elem, \"a\")) && jQuery.acceptData(elem)) {\n\n\t\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t\t// Can't use an .isFunction() check here because IE6/7 fails that test.\n\t\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\t\tif (ontype && elem[type] && !jQuery.isWindow(elem)) {\n\n\t\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\t\ttmp = elem[ontype];\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\telem[type]();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// IE<9 dies on focus/blur to hidden element (#1486,#12518)\n\t\t\t\t\t\t\t// only reproducible on winXP IE8 native, not IE9 in IE8 mode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\tdispatch: function dispatch(event) {\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix(event);\n\n\t\t\tvar i,\n\t\t\t    ret,\n\t\t\t    handleObj,\n\t\t\t    matched,\n\t\t\t    j,\n\t\t\t    handlerQueue = [],\n\t\t\t    args = core_slice.call(arguments),\n\t\t\t    handlers = (jQuery._data(this, \"events\") || {})[event.type] || [],\n\t\t\t    special = jQuery.event.special[event.type] || {};\n\n\t\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\t\targs[0] = event;\n\t\t\tevent.delegateTarget = this;\n\n\t\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\t\tif (special.preDispatch && special.preDispatch.call(this, event) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine handlers\n\t\t\thandlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n\t\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\t\ti = 0;\n\t\t\twhile ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n\t\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\t\tj = 0;\n\t\t\t\twhile ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n\n\t\t\t\t\t// Triggered event must either 1) have no namespace, or\n\t\t\t\t\t// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\t\tif (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {\n\n\t\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\t\tret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n\t\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\t\tif ((event.result = ret) === false) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the postDispatch hook for the mapped type\n\t\t\tif (special.postDispatch) {\n\t\t\t\tspecial.postDispatch.call(this, event);\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\thandlers: function handlers(event, _handlers) {\n\t\t\tvar sel,\n\t\t\t    handleObj,\n\t\t\t    matches,\n\t\t\t    i,\n\t\t\t    handlerQueue = [],\n\t\t\t    delegateCount = _handlers.delegateCount,\n\t\t\t    cur = event.target;\n\n\t\t\t// Find delegate handlers\n\t\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t\t// Avoid non-left-click bubbling in Firefox (#3861)\n\t\t\tif (delegateCount && cur.nodeType && (!event.button || event.type !== \"click\")) {\n\n\t\t\t\tfor (; cur != this; cur = cur.parentNode || this) {\n\n\t\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\t\tif (cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\")) {\n\t\t\t\t\t\tmatches = [];\n\t\t\t\t\t\tfor (i = 0; i < delegateCount; i++) {\n\t\t\t\t\t\t\thandleObj = _handlers[i];\n\n\t\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\t\tif (matches[sel] === undefined) {\n\t\t\t\t\t\t\t\tmatches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (matches[sel]) {\n\t\t\t\t\t\t\t\tmatches.push(handleObj);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matches.length) {\n\t\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the remaining (directly-bound) handlers\n\t\t\tif (delegateCount < _handlers.length) {\n\t\t\t\thandlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });\n\t\t\t}\n\n\t\t\treturn handlerQueue;\n\t\t},\n\n\t\tfix: function fix(event) {\n\t\t\tif (event[jQuery.expando]) {\n\t\t\t\treturn event;\n\t\t\t}\n\n\t\t\t// Create a writable copy of the event object and normalize some properties\n\t\t\tvar i,\n\t\t\t    prop,\n\t\t\t    copy,\n\t\t\t    type = event.type,\n\t\t\t    originalEvent = event,\n\t\t\t    fixHook = this.fixHooks[type];\n\n\t\t\tif (!fixHook) {\n\t\t\t\tthis.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};\n\t\t\t}\n\t\t\tcopy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\n\n\t\t\tevent = new jQuery.Event(originalEvent);\n\n\t\t\ti = copy.length;\n\t\t\twhile (i--) {\n\t\t\t\tprop = copy[i];\n\t\t\t\tevent[prop] = originalEvent[prop];\n\t\t\t}\n\n\t\t\t// Support: IE<9\n\t\t\t// Fix target property (#1925)\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = originalEvent.srcElement || document;\n\t\t\t}\n\n\t\t\t// Support: Chrome 23+, Safari?\n\t\t\t// Target should not be a text node (#504, #13143)\n\t\t\tif (event.target.nodeType === 3) {\n\t\t\t\tevent.target = event.target.parentNode;\n\t\t\t}\n\n\t\t\t// Support: IE<9\n\t\t\t// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)\n\t\t\tevent.metaKey = !!event.metaKey;\n\n\t\t\treturn fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n\t\t},\n\n\t\t// Includes some event props shared by KeyEvent and MouseEvent\n\t\tprops: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n\n\t\tfixHooks: {},\n\n\t\tkeyHooks: {\n\t\t\tprops: \"char charCode key keyCode\".split(\" \"),\n\t\t\tfilter: function filter(event, original) {\n\n\t\t\t\t// Add which for key events\n\t\t\t\tif (event.which == null) {\n\t\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t\t}\n\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\n\t\tmouseHooks: {\n\t\t\tprops: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n\t\t\tfilter: function filter(event, original) {\n\t\t\t\tvar body,\n\t\t\t\t    eventDoc,\n\t\t\t\t    doc,\n\t\t\t\t    button = original.button,\n\t\t\t\t    fromElement = original.fromElement;\n\n\t\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\t\tif (event.pageX == null && original.clientX != null) {\n\t\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\t\tevent.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n\t\t\t\t\tevent.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n\t\t\t\t}\n\n\t\t\t\t// Add relatedTarget, if necessary\n\t\t\t\tif (!event.relatedTarget && fromElement) {\n\t\t\t\t\tevent.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\n\t\t\t\t}\n\n\t\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t\t// Note: button is not normalized, so don't use it\n\t\t\t\tif (!event.which && button !== undefined) {\n\t\t\t\t\tevent.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n\t\t\t\t}\n\n\t\t\t\treturn event;\n\t\t\t}\n\t\t},\n\n\t\tspecial: {\n\t\t\tload: {\n\t\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\t\tnoBubble: true\n\t\t\t},\n\t\t\tclick: {\n\t\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (jQuery.nodeName(this, \"input\") && this.type === \"checkbox\" && this.click) {\n\t\t\t\t\t\tthis.click();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocus: {\n\t\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (this !== document.activeElement && this.focus) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.focus();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t\t// If we error on focus to hidden element (#1486, #12518),\n\t\t\t\t\t\t\t// let .trigger() run the handlers\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusin\"\n\t\t\t},\n\t\t\tblur: {\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (this === document.activeElement && this.blur) {\n\t\t\t\t\t\tthis.blur();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusout\"\n\t\t\t},\n\n\t\t\tbeforeunload: {\n\t\t\t\tpostDispatch: function postDispatch(event) {\n\n\t\t\t\t\t// Even when returnValue equals to undefined Firefox will still show alert\n\t\t\t\t\tif (event.result !== undefined) {\n\t\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsimulate: function simulate(type, elem, event, bubble) {\n\t\t\t// Piggyback on a donor event to simulate a different one.\n\t\t\t// Fake originalEvent to avoid donor's stopPropagation, but if the\n\t\t\t// simulated event prevents default then we do the same on the donor.\n\t\t\tvar e = jQuery.extend(new jQuery.Event(), event, { type: type,\n\t\t\t\tisSimulated: true,\n\t\t\t\toriginalEvent: {}\n\t\t\t});\n\t\t\tif (bubble) {\n\t\t\t\tjQuery.event.trigger(e, null, elem);\n\t\t\t} else {\n\t\t\t\tjQuery.event.dispatch.call(elem, e);\n\t\t\t}\n\t\t\tif (e.isDefaultPrevented()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {\n\t\tif (elem.removeEventListener) {\n\t\t\telem.removeEventListener(type, handle, false);\n\t\t}\n\t} : function (elem, type, handle) {\n\t\tvar name = \"on\" + type;\n\n\t\tif (elem.detachEvent) {\n\n\t\t\t// #8545, #7054, preventing memory leaks for custom events in IE6-8\n\t\t\t// detachEvent needed property on element, by name of that event, to properly expose it to GC\n\t\t\tif (_typeof(elem[name]) === core_strundefined) {\n\t\t\t\telem[name] = null;\n\t\t\t}\n\n\t\t\telem.detachEvent(name, handle);\n\t\t}\n\t};\n\n\tjQuery.Event = function (src, props) {\n\t\t// Allow instantiation without the 'new' keyword\n\t\tif (!(this instanceof jQuery.Event)) {\n\t\t\treturn new jQuery.Event(src, props);\n\t\t}\n\n\t\t// Event object\n\t\tif (src && src.type) {\n\t\t\tthis.originalEvent = src;\n\t\t\tthis.type = src.type;\n\n\t\t\t// Events bubbling up the document may have been marked as prevented\n\t\t\t// by a handler lower down the tree; reflect the correct value.\n\t\t\tthis.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;\n\n\t\t\t// Event type\n\t\t} else {\n\t\t\tthis.type = src;\n\t\t}\n\n\t\t// Put explicitly provided properties onto the event object\n\t\tif (props) {\n\t\t\tjQuery.extend(this, props);\n\t\t}\n\n\t\t// Create a timestamp if incoming event doesn't have one\n\t\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t\t// Mark it as fixed\n\t\tthis[jQuery.expando] = true;\n\t};\n\n\t// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n\t// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\tjQuery.Event.prototype = {\n\t\tisDefaultPrevented: returnFalse,\n\t\tisPropagationStopped: returnFalse,\n\t\tisImmediatePropagationStopped: returnFalse,\n\n\t\tpreventDefault: function preventDefault() {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isDefaultPrevented = returnTrue;\n\t\t\tif (!e) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If preventDefault exists, run it on the original event\n\t\t\tif (e.preventDefault) {\n\t\t\t\te.preventDefault();\n\n\t\t\t\t// Support: IE\n\t\t\t\t// Otherwise set the returnValue property of the original event to false\n\t\t\t} else {\n\t\t\t\te.returnValue = false;\n\t\t\t}\n\t\t},\n\t\tstopPropagation: function stopPropagation() {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isPropagationStopped = returnTrue;\n\t\t\tif (!e) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If stopPropagation exists, run it on the original event\n\t\t\tif (e.stopPropagation) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\n\t\t\t// Support: IE\n\t\t\t// Set the cancelBubble property of the original event to true\n\t\t\te.cancelBubble = true;\n\t\t},\n\t\tstopImmediatePropagation: function stopImmediatePropagation() {\n\t\t\tthis.isImmediatePropagationStopped = returnTrue;\n\t\t\tthis.stopPropagation();\n\t\t}\n\t};\n\n\t// Create mouseenter/leave events using mouseover/out and event-time checks\n\tjQuery.each({\n\t\tmouseenter: \"mouseover\",\n\t\tmouseleave: \"mouseout\"\n\t}, function (orig, fix) {\n\t\tjQuery.event.special[orig] = {\n\t\t\tdelegateType: fix,\n\t\t\tbindType: fix,\n\n\t\t\thandle: function handle(event) {\n\t\t\t\tvar ret,\n\t\t\t\t    target = this,\n\t\t\t\t    related = event.relatedTarget,\n\t\t\t\t    handleObj = event.handleObj;\n\n\t\t\t\t// For mousenter/leave call the handler if related is outside the target.\n\t\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\t\tif (!related || related !== target && !jQuery.contains(target, related)) {\n\t\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\t\tret = handleObj.handler.apply(this, arguments);\n\t\t\t\t\tevent.type = fix;\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t};\n\t});\n\n\t// IE submit delegation\n\tif (!jQuery.support.submitBubbles) {\n\n\t\tjQuery.event.special.submit = {\n\t\t\tsetup: function setup() {\n\t\t\t\t// Only need this for delegated form submit events\n\t\t\t\tif (jQuery.nodeName(this, \"form\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Lazy-add a submit handler when a descendant form may potentially be submitted\n\t\t\t\tjQuery.event.add(this, \"click._submit keypress._submit\", function (e) {\n\t\t\t\t\t// Node name check avoids a VML-related crash in IE (#9807)\n\t\t\t\t\tvar elem = e.target,\n\t\t\t\t\t    form = jQuery.nodeName(elem, \"input\") || jQuery.nodeName(elem, \"button\") ? elem.form : undefined;\n\t\t\t\t\tif (form && !jQuery._data(form, \"submitBubbles\")) {\n\t\t\t\t\t\tjQuery.event.add(form, \"submit._submit\", function (event) {\n\t\t\t\t\t\t\tevent._submit_bubble = true;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery._data(form, \"submitBubbles\", true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// return undefined since we don't need an event listener\n\t\t\t},\n\n\t\t\tpostDispatch: function postDispatch(event) {\n\t\t\t\t// If form was submitted by the user, bubble the event up the tree\n\t\t\t\tif (event._submit_bubble) {\n\t\t\t\t\tdelete event._submit_bubble;\n\t\t\t\t\tif (this.parentNode && !event.isTrigger) {\n\t\t\t\t\t\tjQuery.event.simulate(\"submit\", this.parentNode, event, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tteardown: function teardown() {\n\t\t\t\t// Only need this for delegated form submit events\n\t\t\t\tif (jQuery.nodeName(this, \"form\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Remove delegated handlers; cleanData eventually reaps submit handlers attached above\n\t\t\t\tjQuery.event.remove(this, \"._submit\");\n\t\t\t}\n\t\t};\n\t}\n\n\t// IE change delegation and checkbox/radio fix\n\tif (!jQuery.support.changeBubbles) {\n\n\t\tjQuery.event.special.change = {\n\n\t\t\tsetup: function setup() {\n\n\t\t\t\tif (rformElems.test(this.nodeName)) {\n\t\t\t\t\t// IE doesn't fire change on a check/radio until blur; trigger it on click\n\t\t\t\t\t// after a propertychange. Eat the blur-change in special.change.handle.\n\t\t\t\t\t// This still fires onchange a second time for check/radio after blur.\n\t\t\t\t\tif (this.type === \"checkbox\" || this.type === \"radio\") {\n\t\t\t\t\t\tjQuery.event.add(this, \"propertychange._change\", function (event) {\n\t\t\t\t\t\t\tif (event.originalEvent.propertyName === \"checked\") {\n\t\t\t\t\t\t\t\tthis._just_changed = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery.event.add(this, \"click._change\", function (event) {\n\t\t\t\t\t\t\tif (this._just_changed && !event.isTrigger) {\n\t\t\t\t\t\t\t\tthis._just_changed = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Allow triggered, simulated change events (#11500)\n\t\t\t\t\t\t\tjQuery.event.simulate(\"change\", this, event, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Delegated event; lazy-add a change handler on descendant inputs\n\t\t\t\tjQuery.event.add(this, \"beforeactivate._change\", function (e) {\n\t\t\t\t\tvar elem = e.target;\n\n\t\t\t\t\tif (rformElems.test(elem.nodeName) && !jQuery._data(elem, \"changeBubbles\")) {\n\t\t\t\t\t\tjQuery.event.add(elem, \"change._change\", function (event) {\n\t\t\t\t\t\t\tif (this.parentNode && !event.isSimulated && !event.isTrigger) {\n\t\t\t\t\t\t\t\tjQuery.event.simulate(\"change\", this.parentNode, event, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tjQuery._data(elem, \"changeBubbles\", true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\thandle: function handle(event) {\n\t\t\t\tvar elem = event.target;\n\n\t\t\t\t// Swallow native change events from checkbox/radio, we already triggered them above\n\t\t\t\tif (this !== elem || event.isSimulated || event.isTrigger || elem.type !== \"radio\" && elem.type !== \"checkbox\") {\n\t\t\t\t\treturn event.handleObj.handler.apply(this, arguments);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tteardown: function teardown() {\n\t\t\t\tjQuery.event.remove(this, \"._change\");\n\n\t\t\t\treturn !rformElems.test(this.nodeName);\n\t\t\t}\n\t\t};\n\t}\n\n\t// Create \"bubbling\" focus and blur events\n\tif (!jQuery.support.focusinBubbles) {\n\t\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function (orig, fix) {\n\n\t\t\t// Attach a single capturing handler while someone wants focusin/focusout\n\t\t\tvar attaches = 0,\n\t\t\t    handler = function handler(event) {\n\t\t\t\tjQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);\n\t\t\t};\n\n\t\t\tjQuery.event.special[fix] = {\n\t\t\t\tsetup: function setup() {\n\t\t\t\t\tif (attaches++ === 0) {\n\t\t\t\t\t\tdocument.addEventListener(orig, handler, true);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tteardown: function teardown() {\n\t\t\t\t\tif (--attaches === 0) {\n\t\t\t\t\t\tdocument.removeEventListener(orig, handler, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tjQuery.fn.extend({\n\n\t\ton: function on(types, selector, data, fn, /*INTERNAL*/one) {\n\t\t\tvar type, origFn;\n\n\t\t\t// Types can be a map of types/handlers\n\t\t\tif ((typeof types === \"undefined\" ? \"undefined\" : _typeof(types)) === \"object\") {\n\t\t\t\t// ( types-Object, selector, data )\n\t\t\t\tif (typeof selector !== \"string\") {\n\t\t\t\t\t// ( types-Object, data )\n\t\t\t\t\tdata = data || selector;\n\t\t\t\t\tselector = undefined;\n\t\t\t\t}\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.on(type, selector, data, types[type], one);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (data == null && fn == null) {\n\t\t\t\t// ( types, fn )\n\t\t\t\tfn = selector;\n\t\t\t\tdata = selector = undefined;\n\t\t\t} else if (fn == null) {\n\t\t\t\tif (typeof selector === \"string\") {\n\t\t\t\t\t// ( types, selector, fn )\n\t\t\t\t\tfn = data;\n\t\t\t\t\tdata = undefined;\n\t\t\t\t} else {\n\t\t\t\t\t// ( types, data, fn )\n\t\t\t\t\tfn = data;\n\t\t\t\t\tdata = selector;\n\t\t\t\t\tselector = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t} else if (!fn) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (one === 1) {\n\t\t\t\torigFn = fn;\n\t\t\t\tfn = function fn(event) {\n\t\t\t\t\t// Can use an empty set, since event contains the info\n\t\t\t\t\tjQuery().off(event);\n\t\t\t\t\treturn origFn.apply(this, arguments);\n\t\t\t\t};\n\t\t\t\t// Use same guid so caller can remove using origFn\n\t\t\t\tfn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.add(this, types, fn, data, selector);\n\t\t\t});\n\t\t},\n\t\tone: function one(types, selector, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn, 1);\n\t\t},\n\t\toff: function off(types, selector, fn) {\n\t\t\tvar handleObj, type;\n\t\t\tif (types && types.preventDefault && types.handleObj) {\n\t\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\t\thandleObj = types.handleObj;\n\t\t\t\tjQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif ((typeof types === \"undefined\" ? \"undefined\" : _typeof(types)) === \"object\") {\n\t\t\t\t// ( types-object [, selector] )\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.off(type, selector, types[type]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (selector === false || typeof selector === \"function\") {\n\t\t\t\t// ( types [, fn] )\n\t\t\t\tfn = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.remove(this, types, fn, selector);\n\t\t\t});\n\t\t},\n\n\t\tbind: function bind(types, data, fn) {\n\t\t\treturn this.on(types, null, data, fn);\n\t\t},\n\t\tunbind: function unbind(types, fn) {\n\t\t\treturn this.off(types, null, fn);\n\t\t},\n\n\t\tdelegate: function delegate(selector, types, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn);\n\t\t},\n\t\tundelegate: function undelegate(selector, types, fn) {\n\t\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\t\treturn arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n\t\t},\n\n\t\ttrigger: function trigger(type, data) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.trigger(type, data, this);\n\t\t\t});\n\t\t},\n\t\ttriggerHandler: function triggerHandler(type, data) {\n\t\t\tvar elem = this[0];\n\t\t\tif (elem) {\n\t\t\t\treturn jQuery.event.trigger(type, data, elem, true);\n\t\t\t}\n\t\t}\n\t});\n\t/*!\n  * Sizzle CSS Selector Engine\n  * Copyright 2012 jQuery Foundation and other contributors\n  * Released under the MIT license\n  * http://sizzlejs.com/\n  */\n\t(function (window, undefined) {\n\n\t\tvar i,\n\t\t    cachedruns,\n\t\t    Expr,\n\t\t    getText,\n\t\t    isXML,\n\t\t    compile,\n\t\t    hasDuplicate,\n\t\t    outermostContext,\n\n\n\t\t// Local document vars\n\t\tsetDocument,\n\t\t    document,\n\t\t    docElem,\n\t\t    documentIsXML,\n\t\t    rbuggyQSA,\n\t\t    rbuggyMatches,\n\t\t    matches,\n\t\t    contains,\n\t\t    sortOrder,\n\n\n\t\t// Instance-specific data\n\t\texpando = \"sizzle\" + -new Date(),\n\t\t    preferredDoc = window.document,\n\t\t    support = {},\n\t\t    dirruns = 0,\n\t\t    done = 0,\n\t\t    classCache = createCache(),\n\t\t    tokenCache = createCache(),\n\t\t    compilerCache = createCache(),\n\n\n\t\t// General-purpose constants\n\t\tstrundefined = typeof undefined === \"undefined\" ? \"undefined\" : _typeof(undefined),\n\t\t    MAX_NEGATIVE = 1 << 31,\n\n\n\t\t// Array methods\n\t\tarr = [],\n\t\t    pop = arr.pop,\n\t\t    push = arr.push,\n\t\t    slice = arr.slice,\n\n\t\t// Use a stripped-down indexOf if we can't use a native one\n\t\tindexOf = arr.indexOf || function (elem) {\n\t\t\tvar i = 0,\n\t\t\t    len = this.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (this[i] === elem) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\n\n\t\t// Regular expressions\n\n\t\t// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n\t\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t\t// http://www.w3.org/TR/css3-syntax/#characters\n\t\tcharacterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\n\t\t// Loosely modeled on CSS identifier characters\n\t\t// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n\t\t// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\t\tidentifier = characterEncoding.replace(\"w\", \"w#\"),\n\n\n\t\t// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors\n\t\toperators = \"([*^$|!~]?=)\",\n\t\t    attributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")\" + whitespace + \"*(?:\" + operators + whitespace + \"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\" + identifier + \")|)|)\" + whitespace + \"*\\\\]\",\n\n\n\t\t// Prefer arguments quoted,\n\t\t//   then not containing pseudos/brackets,\n\t\t//   then attribute selectors/non-parenthetical expressions,\n\t\t//   then anything else\n\t\t// These preferences are here to reduce the number of selectors\n\t\t//   needing tokenize in the PSEUDO preFilter\n\t\tpseudos = \":(\" + characterEncoding + \")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes.replace(3, 8) + \")*)|.*)\\\\)|)\",\n\n\n\t\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\t\trtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n\t\t    rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n\t\t    rcombinators = new RegExp(\"^\" + whitespace + \"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\" + whitespace + \"*\"),\n\t\t    rpseudo = new RegExp(pseudos),\n\t\t    ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n\t\t    matchExpr = {\n\t\t\t\"ID\": new RegExp(\"^#(\" + characterEncoding + \")\"),\n\t\t\t\"CLASS\": new RegExp(\"^\\\\.(\" + characterEncoding + \")\"),\n\t\t\t\"NAME\": new RegExp(\"^\\\\[name=['\\\"]?(\" + characterEncoding + \")['\\\"]?\\\\]\"),\n\t\t\t\"TAG\": new RegExp(\"^(\" + characterEncoding.replace(\"w\", \"w*\") + \")\"),\n\t\t\t\"ATTR\": new RegExp(\"^\" + attributes),\n\t\t\t\"PSEUDO\": new RegExp(\"^\" + pseudos),\n\t\t\t\"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n\t\t\t// For use in libraries implementing .is()\n\t\t\t// We use this for POS matching in `select`\n\t\t\t\"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n\t\t},\n\t\t    rsibling = /[\\x20\\t\\r\\n\\f]*[+~]/,\n\t\t    rnative = /^[^{]+\\{\\s*\\[native code/,\n\n\n\t\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\t\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\t\t    rinputs = /^(?:input|select|textarea|button)$/i,\n\t\t    rheader = /^h\\d$/i,\n\t\t    rescape = /'|\\\\/g,\n\t\t    rattributeQuotes = /\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,\n\n\n\t\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\t\trunescape = /\\\\([\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|.)/g,\n\t\t    funescape = function funescape(_, escaped) {\n\t\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t\t// NaN means non-codepoint\n\t\t\treturn high !== high ? escaped :\n\t\t\t// BMP codepoint\n\t\t\thigh < 0 ? String.fromCharCode(high + 0x10000) :\n\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\tString.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n\t\t};\n\n\t\t// Use a stripped-down slice if we can't use a native one\n\t\ttry {\n\t\t\tslice.call(preferredDoc.documentElement.childNodes, 0)[0].nodeType;\n\t\t} catch (e) {\n\t\t\tslice = function slice(i) {\n\t\t\t\tvar elem,\n\t\t\t\t    results = [];\n\t\t\t\twhile (elem = this[i++]) {\n\t\t\t\t\tresults.push(elem);\n\t\t\t\t}\n\t\t\t\treturn results;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * For feature detection\n   * @param {Function} fn The function to test for native support\n   */\n\t\tfunction isNative(fn) {\n\t\t\treturn rnative.test(fn + \"\");\n\t\t}\n\n\t\t/**\n   * Create key-value caches of limited size\n   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\n   *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n   *\tdeleting the oldest entry\n   */\n\t\tfunction createCache() {\n\t\t\tvar _cache,\n\t\t\t    keys = [];\n\n\t\t\treturn _cache = function cache(key, value) {\n\t\t\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\t\t\tif (keys.push(key += \" \") > Expr.cacheLength) {\n\t\t\t\t\t// Only keep the most recent entries\n\t\t\t\t\tdelete _cache[keys.shift()];\n\t\t\t\t}\n\t\t\t\treturn _cache[key] = value;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Mark a function for special use by Sizzle\n   * @param {Function} fn The function to mark\n   */\n\t\tfunction markFunction(fn) {\n\t\t\tfn[expando] = true;\n\t\t\treturn fn;\n\t\t}\n\n\t\t/**\n   * Support testing using an element\n   * @param {Function} fn Passed the created div and expects a boolean result\n   */\n\t\tfunction assert(fn) {\n\t\t\tvar div = document.createElement(\"div\");\n\n\t\t\ttry {\n\t\t\t\treturn fn(div);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t} finally {\n\t\t\t\t// release memory in IE\n\t\t\t\tdiv = null;\n\t\t\t}\n\t\t}\n\n\t\tfunction Sizzle(selector, context, results, seed) {\n\t\t\tvar match, elem, m, nodeType,\n\t\t\t// QSA vars\n\t\t\ti, groups, old, nid, newContext, newSelector;\n\n\t\t\tif ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\n\t\t\tcontext = context || document;\n\t\t\tresults = results || [];\n\n\t\t\tif (!selector || typeof selector !== \"string\") {\n\t\t\t\treturn results;\n\t\t\t}\n\n\t\t\tif ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tif (!documentIsXML && !seed) {\n\n\t\t\t\t// Shortcuts\n\t\t\t\tif (match = rquickExpr.exec(selector)) {\n\t\t\t\t\t// Speed-up: Sizzle(\"#ID\")\n\t\t\t\t\tif (m = match[1]) {\n\t\t\t\t\t\tif (nodeType === 9) {\n\t\t\t\t\t\t\telem = context.getElementById(m);\n\t\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\t\t\t\t// Handle the case where IE, Opera, and Webkit return items\n\t\t\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\t\t\tif (elem.id === m) {\n\t\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Context is not a document\n\t\t\t\t\t\t\tif (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Speed-up: Sizzle(\"TAG\")\n\t\t\t\t\t} else if (match[2]) {\n\t\t\t\t\t\tpush.apply(results, slice.call(context.getElementsByTagName(selector), 0));\n\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t// Speed-up: Sizzle(\".CLASS\")\n\t\t\t\t\t} else if ((m = match[3]) && support.getByClassName && context.getElementsByClassName) {\n\t\t\t\t\t\tpush.apply(results, slice.call(context.getElementsByClassName(m), 0));\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// QSA path\n\t\t\t\tif (support.qsa && !rbuggyQSA.test(selector)) {\n\t\t\t\t\told = true;\n\t\t\t\t\tnid = expando;\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = nodeType === 9 && selector;\n\n\t\t\t\t\t// qSA works strangely on Element-rooted queries\n\t\t\t\t\t// We can work around this by specifying an extra ID on the root\n\t\t\t\t\t// and working up from there (Thanks to Andrew Dupont for the technique)\n\t\t\t\t\t// IE 8 doesn't work on object elements\n\t\t\t\t\tif (nodeType === 1 && context.nodeName.toLowerCase() !== \"object\") {\n\t\t\t\t\t\tgroups = tokenize(selector);\n\n\t\t\t\t\t\tif (old = context.getAttribute(\"id\")) {\n\t\t\t\t\t\t\tnid = old.replace(rescape, \"\\\\$&\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute(\"id\", nid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnid = \"[id='\" + nid + \"'] \";\n\n\t\t\t\t\t\ti = groups.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tgroups[i] = nid + toSelector(groups[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewContext = rsibling.test(selector) && context.parentNode || context;\n\t\t\t\t\t\tnewSelector = groups.join(\",\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newSelector) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpush.apply(results, slice.call(newContext.querySelectorAll(newSelector), 0));\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t} catch (qsaError) {} finally {\n\t\t\t\t\t\t\tif (!old) {\n\t\t\t\t\t\t\t\tcontext.removeAttribute(\"id\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// All others\n\t\t\treturn select(selector.replace(rtrim, \"$1\"), context, results, seed);\n\t\t}\n\n\t\t/**\n   * Detect xml\n   * @param {Element|Object} elem An element or a document\n   */\n\t\tisXML = Sizzle.isXML = function (elem) {\n\t\t\t// documentElement is verified for cases where it doesn't yet exist\n\t\t\t// (such as loading iframes in IE - #4833)\n\t\t\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\t\t\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n\t\t};\n\n\t\t/**\n   * Sets document-related variables once based on the current document\n   * @param {Element|Object} [doc] An element or document object to use to set the document\n   * @returns {Object} Returns the current document\n   */\n\t\tsetDocument = Sizzle.setDocument = function (node) {\n\t\t\tvar doc = node ? node.ownerDocument || node : preferredDoc;\n\n\t\t\t// If no document and documentElement is available, return\n\t\t\tif (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n\t\t\t\treturn document;\n\t\t\t}\n\n\t\t\t// Set our document\n\t\t\tdocument = doc;\n\t\t\tdocElem = doc.documentElement;\n\n\t\t\t// Support tests\n\t\t\tdocumentIsXML = isXML(doc);\n\n\t\t\t// Check if getElementsByTagName(\"*\") returns only elements\n\t\t\tsupport.tagNameNoComments = assert(function (div) {\n\t\t\t\tdiv.appendChild(doc.createComment(\"\"));\n\t\t\t\treturn !div.getElementsByTagName(\"*\").length;\n\t\t\t});\n\n\t\t\t// Check if attributes should be retrieved by attribute nodes\n\t\t\tsupport.attributes = assert(function (div) {\n\t\t\t\tdiv.innerHTML = \"<select></select>\";\n\t\t\t\tvar type = _typeof(div.lastChild.getAttribute(\"multiple\"));\n\t\t\t\t// IE8 returns a string for some attributes even when not present\n\t\t\t\treturn type !== \"boolean\" && type !== \"string\";\n\t\t\t});\n\n\t\t\t// Check if getElementsByClassName can be trusted\n\t\t\tsupport.getByClassName = assert(function (div) {\n\t\t\t\t// Opera can't find a second classname (in 9.6)\n\t\t\t\tdiv.innerHTML = \"<div class='hidden e'></div><div class='hidden'></div>\";\n\t\t\t\tif (!div.getElementsByClassName || !div.getElementsByClassName(\"e\").length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Safari 3.2 caches class attributes and doesn't catch changes\n\t\t\t\tdiv.lastChild.className = \"e\";\n\t\t\t\treturn div.getElementsByClassName(\"e\").length === 2;\n\t\t\t});\n\n\t\t\t// Check if getElementById returns elements by name\n\t\t\t// Check if getElementsByName privileges form controls or returns elements by ID\n\t\t\tsupport.getByName = assert(function (div) {\n\t\t\t\t// Inject content\n\t\t\t\tdiv.id = expando + 0;\n\t\t\t\tdiv.innerHTML = \"<a name='\" + expando + \"'></a><div name='\" + expando + \"'></div>\";\n\t\t\t\tdocElem.insertBefore(div, docElem.firstChild);\n\n\t\t\t\t// Test\n\t\t\t\tvar pass = doc.getElementsByName &&\n\t\t\t\t// buggy browsers will return fewer than the correct 2\n\t\t\t\tdoc.getElementsByName(expando).length === 2 +\n\t\t\t\t// buggy browsers will return more than the correct 0\n\t\t\t\tdoc.getElementsByName(expando + 0).length;\n\t\t\t\tsupport.getIdNotName = !doc.getElementById(expando);\n\n\t\t\t\t// Cleanup\n\t\t\t\tdocElem.removeChild(div);\n\n\t\t\t\treturn pass;\n\t\t\t});\n\n\t\t\t// IE6/7 return modified attributes\n\t\t\tExpr.attrHandle = assert(function (div) {\n\t\t\t\tdiv.innerHTML = \"<a href='#'></a>\";\n\t\t\t\treturn div.firstChild && _typeof(div.firstChild.getAttribute) !== strundefined && div.firstChild.getAttribute(\"href\") === \"#\";\n\t\t\t}) ? {} : {\n\t\t\t\t\"href\": function href(elem) {\n\t\t\t\t\treturn elem.getAttribute(\"href\", 2);\n\t\t\t\t},\n\t\t\t\t\"type\": function type(elem) {\n\t\t\t\t\treturn elem.getAttribute(\"type\");\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// ID find and filter\n\t\t\tif (support.getIdNotName) {\n\t\t\t\tExpr.find[\"ID\"] = function (id, context) {\n\t\t\t\t\tif (_typeof(context.getElementById) !== strundefined && !documentIsXML) {\n\t\t\t\t\t\tvar m = context.getElementById(id);\n\t\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\t\treturn m && m.parentNode ? [m] : [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tExpr.find[\"ID\"] = function (id, context) {\n\t\t\t\t\tif (_typeof(context.getElementById) !== strundefined && !documentIsXML) {\n\t\t\t\t\t\tvar m = context.getElementById(id);\n\n\t\t\t\t\t\treturn m ? m.id === id || _typeof(m.getAttributeNode) !== strundefined && m.getAttributeNode(\"id\").value === id ? [m] : undefined : [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar node = _typeof(elem.getAttributeNode) !== strundefined && elem.getAttributeNode(\"id\");\n\t\t\t\t\t\treturn node && node.value === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Tag\n\t\t\tExpr.find[\"TAG\"] = support.tagNameNoComments ? function (tag, context) {\n\t\t\t\tif (_typeof(context.getElementsByTagName) !== strundefined) {\n\t\t\t\t\treturn context.getElementsByTagName(tag);\n\t\t\t\t}\n\t\t\t} : function (tag, context) {\n\t\t\t\tvar elem,\n\t\t\t\t    tmp = [],\n\t\t\t\t    i = 0,\n\t\t\t\t    results = context.getElementsByTagName(tag);\n\n\t\t\t\t// Filter out possible comments\n\t\t\t\tif (tag === \"*\") {\n\t\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\ttmp.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tmp;\n\t\t\t\t}\n\t\t\t\treturn results;\n\t\t\t};\n\n\t\t\t// Name\n\t\t\tExpr.find[\"NAME\"] = support.getByName && function (tag, context) {\n\t\t\t\tif (_typeof(context.getElementsByName) !== strundefined) {\n\t\t\t\t\treturn context.getElementsByName(name);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Class\n\t\t\tExpr.find[\"CLASS\"] = support.getByClassName && function (className, context) {\n\t\t\t\tif (_typeof(context.getElementsByClassName) !== strundefined && !documentIsXML) {\n\t\t\t\t\treturn context.getElementsByClassName(className);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// QSA and matchesSelector support\n\n\t\t\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\t\t\trbuggyMatches = [];\n\n\t\t\t// qSa(:focus) reports false when true (Chrome 21),\n\t\t\t// no need to also add to buggyMatches since matches checks buggyQSA\n\t\t\t// A support test would require too much code (would include document ready)\n\t\t\trbuggyQSA = [\":focus\"];\n\n\t\t\tif (support.qsa = isNative(doc.querySelectorAll)) {\n\t\t\t\t// Build QSA regex\n\t\t\t\t// Regex strategy adopted from Diego Perini\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Select is set to empty string on purpose\n\t\t\t\t\t// This is to test IE's treatment of not explictly\n\t\t\t\t\t// setting a boolean content attribute,\n\t\t\t\t\t// since its presence should be enough\n\t\t\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\t\t\tdiv.innerHTML = \"<select><option selected=''></option></select>\";\n\n\t\t\t\t\t// IE8 - Some boolean attributes are not treated correctly\n\t\t\t\t\tif (!div.querySelectorAll(\"[selected]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!div.querySelectorAll(\":checked\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tassert(function (div) {\n\n\t\t\t\t\t// Opera 10-12/IE8 - ^= $= *= and empty values\n\t\t\t\t\t// Should not select anything\n\t\t\t\t\tdiv.innerHTML = \"<input type='hidden' i=''/>\";\n\t\t\t\t\tif (div.querySelectorAll(\"[i^='']\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:\\\"\\\"|'')\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!div.querySelectorAll(\":enabled\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\":enabled\", \":disabled\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\t\t\trbuggyQSA.push(\",.*:\");\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (support.matchesSelector = isNative(matches = docElem.matchesSelector || docElem.mozMatchesSelector || docElem.webkitMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n\n\t\t\t\tassert(function (div) {\n\t\t\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t\t\t// on a disconnected node (IE 9)\n\t\t\t\t\tsupport.disconnectedMatch = matches.call(div, \"div\");\n\n\t\t\t\t\t// This should fail with an exception\n\t\t\t\t\t// Gecko does not error, returns false instead\n\t\t\t\t\tmatches.call(div, \"[s!='']:x\");\n\t\t\t\t\trbuggyMatches.push(\"!=\", pseudos);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\trbuggyQSA = new RegExp(rbuggyQSA.join(\"|\"));\n\t\t\trbuggyMatches = new RegExp(rbuggyMatches.join(\"|\"));\n\n\t\t\t// Element contains another\n\t\t\t// Purposefully does not implement inclusive descendent\n\t\t\t// As in, an element does not contain itself\n\t\t\tcontains = isNative(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {\n\t\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\t    bup = b && b.parentNode;\n\t\t\t\treturn a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n\t\t\t} : function (a, b) {\n\t\t\t\tif (b) {\n\t\t\t\t\twhile (b = b.parentNode) {\n\t\t\t\t\t\tif (b === a) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\t// Document order sorting\n\t\t\tsortOrder = docElem.compareDocumentPosition ? function (a, b) {\n\t\t\t\tvar compare;\n\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tif (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b)) {\n\t\t\t\t\tif (compare & 1 || a.parentNode && a.parentNode.nodeType === 11) {\n\t\t\t\t\t\tif (a === doc || contains(preferredDoc, a)) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (b === doc || contains(preferredDoc, b)) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn compare & 4 ? -1 : 1;\n\t\t\t\t}\n\n\t\t\t\treturn a.compareDocumentPosition ? -1 : 1;\n\t\t\t} : function (a, b) {\n\t\t\t\tvar cur,\n\t\t\t\t    i = 0,\n\t\t\t\t    aup = a.parentNode,\n\t\t\t\t    bup = b.parentNode,\n\t\t\t\t    ap = [a],\n\t\t\t\t    bp = [b];\n\n\t\t\t\t// Exit early if the nodes are identical\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\n\t\t\t\t\t// Parentless nodes are either documents or disconnected\n\t\t\t\t} else if (!aup || !bup) {\n\t\t\t\t\treturn a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : 0;\n\n\t\t\t\t\t// If the nodes are siblings, we can do a quick check\n\t\t\t\t} else if (aup === bup) {\n\t\t\t\t\treturn siblingCheck(a, b);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\t\t\tcur = a;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tap.unshift(cur);\n\t\t\t\t}\n\t\t\t\tcur = b;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tbp.unshift(cur);\n\t\t\t\t}\n\n\t\t\t\t// Walk down the tree looking for a discrepancy\n\t\t\t\twhile (ap[i] === bp[i]) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\t\t\t\treturn i ?\n\t\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\t\tsiblingCheck(ap[i], bp[i]) :\n\n\t\t\t\t// Otherwise nodes in our document sort first\n\t\t\t\tap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n\t\t\t};\n\n\t\t\t// Always assume the presence of duplicates if sort doesn't\n\t\t\t// pass them to our comparison function (as in Google Chrome).\n\t\t\thasDuplicate = false;\n\t\t\t[0, 0].sort(sortOrder);\n\t\t\tsupport.detectDuplicates = hasDuplicate;\n\n\t\t\treturn document;\n\t\t};\n\n\t\tSizzle.matches = function (expr, elements) {\n\t\t\treturn Sizzle(expr, null, null, elements);\n\t\t};\n\n\t\tSizzle.matchesSelector = function (elem, expr) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\t// Make sure that attribute selectors are quoted\n\t\t\texpr = expr.replace(rattributeQuotes, \"='$1']\");\n\n\t\t\t// rbuggyQSA always contains :focus, so no need for an existence check\n\t\t\tif (support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr)) {\n\t\t\t\ttry {\n\t\t\t\t\tvar ret = matches.call(elem, expr);\n\n\t\t\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\t\t\tif (ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn Sizzle(expr, document, null, [elem]).length > 0;\n\t\t};\n\n\t\tSizzle.contains = function (context, elem) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((context.ownerDocument || context) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\t\t\treturn contains(context, elem);\n\t\t};\n\n\t\tSizzle.attr = function (elem, name) {\n\t\t\tvar val;\n\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\tif (!documentIsXML) {\n\t\t\t\tname = name.toLowerCase();\n\t\t\t}\n\t\t\tif (val = Expr.attrHandle[name]) {\n\t\t\t\treturn val(elem);\n\t\t\t}\n\t\t\tif (documentIsXML || support.attributes) {\n\t\t\t\treturn elem.getAttribute(name);\n\t\t\t}\n\t\t\treturn ((val = elem.getAttributeNode(name)) || elem.getAttribute(name)) && elem[name] === true ? name : val && val.specified ? val.value : null;\n\t\t};\n\n\t\tSizzle.error = function (msg) {\n\t\t\tthrow new Error(\"Syntax error, unrecognized expression: \" + msg);\n\t\t};\n\n\t\t// Document sorting and removing duplicates\n\t\tSizzle.uniqueSort = function (results) {\n\t\t\tvar elem,\n\t\t\t    duplicates = [],\n\t\t\t    i = 1,\n\t\t\t    j = 0;\n\n\t\t\t// Unless we *know* we can detect duplicates, assume their presence\n\t\t\thasDuplicate = !support.detectDuplicates;\n\t\t\tresults.sort(sortOrder);\n\n\t\t\tif (hasDuplicate) {\n\t\t\t\tfor (; elem = results[i]; i++) {\n\t\t\t\t\tif (elem === results[i - 1]) {\n\t\t\t\t\t\tj = duplicates.push(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (j--) {\n\t\t\t\t\tresults.splice(duplicates[j], 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn results;\n\t\t};\n\n\t\tfunction siblingCheck(a, b) {\n\t\t\tvar cur = b && a,\n\t\t\t    diff = cur && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);\n\n\t\t\t// Use IE sourceIndex if available on both nodes\n\t\t\tif (diff) {\n\t\t\t\treturn diff;\n\t\t\t}\n\n\t\t\t// Check if b follows a\n\t\t\tif (cur) {\n\t\t\t\twhile (cur = cur.nextSibling) {\n\t\t\t\t\tif (cur === b) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a ? 1 : -1;\n\t\t}\n\n\t\t// Returns a function to use in pseudos for input types\n\t\tfunction createInputPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn name === \"input\" && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t// Returns a function to use in pseudos for buttons\n\t\tfunction createButtonPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t// Returns a function to use in pseudos for positionals\n\t\tfunction createPositionalPseudo(fn) {\n\t\t\treturn markFunction(function (argument) {\n\t\t\t\targument = +argument;\n\t\t\t\treturn markFunction(function (seed, matches) {\n\t\t\t\t\tvar j,\n\t\t\t\t\t    matchIndexes = fn([], seed.length, argument),\n\t\t\t\t\t    i = matchIndexes.length;\n\n\t\t\t\t\t// Match elements found at the specified indexes\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (seed[j = matchIndexes[i]]) {\n\t\t\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n   * Utility function for retrieving the text value of an array of DOM nodes\n   * @param {Array|Element} elem\n   */\n\t\tgetText = Sizzle.getText = function (elem) {\n\t\t\tvar node,\n\t\t\t    ret = \"\",\n\t\t\t    i = 0,\n\t\t\t    nodeType = elem.nodeType;\n\n\t\t\tif (!nodeType) {\n\t\t\t\t// If no nodeType, this is expected to be an array\n\t\t\t\tfor (; node = elem[i]; i++) {\n\t\t\t\t\t// Do not traverse comment nodes\n\t\t\t\t\tret += getText(node);\n\t\t\t\t}\n\t\t\t} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n\t\t\t\t// Use textContent for elements\n\t\t\t\t// innerText usage removed for consistency of new lines (see #11153)\n\t\t\t\tif (typeof elem.textContent === \"string\") {\n\t\t\t\t\treturn elem.textContent;\n\t\t\t\t} else {\n\t\t\t\t\t// Traverse its children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tret += getText(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (nodeType === 3 || nodeType === 4) {\n\t\t\t\treturn elem.nodeValue;\n\t\t\t}\n\t\t\t// Do not include comment or processing instruction nodes\n\n\t\t\treturn ret;\n\t\t};\n\n\t\tExpr = Sizzle.selectors = {\n\n\t\t\t// Can be adjusted by the user\n\t\t\tcacheLength: 50,\n\n\t\t\tcreatePseudo: markFunction,\n\n\t\t\tmatch: matchExpr,\n\n\t\t\tfind: {},\n\n\t\t\trelative: {\n\t\t\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\t\t\" \": { dir: \"parentNode\" },\n\t\t\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\t\t\"~\": { dir: \"previousSibling\" }\n\t\t\t},\n\n\t\t\tpreFilter: {\n\t\t\t\t\"ATTR\": function ATTR(match) {\n\t\t\t\t\tmatch[1] = match[1].replace(runescape, funescape);\n\n\t\t\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\t\t\tmatch[3] = (match[4] || match[5] || \"\").replace(runescape, funescape);\n\n\t\t\t\t\tif (match[2] === \"~=\") {\n\t\t\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match.slice(0, 4);\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function CHILD(match) {\n\t\t\t\t\t/* matches from matchExpr[\"CHILD\"]\n     \t1 type (only|nth|...)\n     \t2 what (child|of-type)\n     \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n     \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n     \t5 sign of xn-component\n     \t6 x of xn-component\n     \t7 sign of y-component\n     \t8 y of y-component\n     */\n\t\t\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\t\t\tif (match[1].slice(0, 3) === \"nth\") {\n\t\t\t\t\t\t// nth-* requires argument\n\t\t\t\t\t\tif (!match[3]) {\n\t\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\t\t\tmatch[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n\t\t\t\t\t\tmatch[5] = +(match[7] + match[8] || match[3] === \"odd\");\n\n\t\t\t\t\t\t// other types prohibit arguments\n\t\t\t\t\t} else if (match[3]) {\n\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function PSEUDO(match) {\n\t\t\t\t\tvar excess,\n\t\t\t\t\t    unquoted = !match[5] && match[2];\n\n\t\t\t\t\tif (matchExpr[\"CHILD\"].test(match[0])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accept quoted arguments as-is\n\t\t\t\t\tif (match[4]) {\n\t\t\t\t\t\tmatch[2] = match[4];\n\n\t\t\t\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t\t\t} else if (unquoted && rpseudo.test(unquoted) && (\n\t\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t\texcess = tokenize(unquoted, true)) && (\n\t\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t\texcess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n\n\t\t\t\t\t\t// excess is a negative index\n\t\t\t\t\t\tmatch[0] = match[0].slice(0, excess);\n\t\t\t\t\t\tmatch[2] = unquoted.slice(0, excess);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\t\t\treturn match.slice(0, 3);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfilter: {\n\n\t\t\t\t\"TAG\": function TAG(nodeName) {\n\t\t\t\t\tif (nodeName === \"*\") {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tnodeName = nodeName.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CLASS\": function CLASS(className) {\n\t\t\t\t\tvar pattern = classCache[className + \" \"];\n\n\t\t\t\t\treturn pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n\t\t\t\t\t\treturn pattern.test(elem.className || _typeof(elem.getAttribute) !== strundefined && elem.getAttribute(\"class\") || \"\");\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t\"ATTR\": function ATTR(name, operator, check) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar result = Sizzle.attr(elem, name);\n\n\t\t\t\t\t\tif (result == null) {\n\t\t\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!operator) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult += \"\";\n\n\t\t\t\t\t\treturn operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function CHILD(type, what, argument, first, last) {\n\t\t\t\t\tvar simple = type.slice(0, 3) !== \"nth\",\n\t\t\t\t\t    forward = type.slice(-4) !== \"last\",\n\t\t\t\t\t    ofType = what === \"of-type\";\n\n\t\t\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\t\tfunction (elem) {\n\t\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t\t} : function (elem, context, xml) {\n\t\t\t\t\t\tvar cache,\n\t\t\t\t\t\t    outerCache,\n\t\t\t\t\t\t    node,\n\t\t\t\t\t\t    diff,\n\t\t\t\t\t\t    nodeIndex,\n\t\t\t\t\t\t    start,\n\t\t\t\t\t\t    dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\t    parent = elem.parentNode,\n\t\t\t\t\t\t    name = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\t    useCache = !xml && !ofType;\n\n\t\t\t\t\t\tif (parent) {\n\n\t\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\t\twhile (dir) {\n\t\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\t\twhile (node = node[dir]) {\n\t\t\t\t\t\t\t\t\t\tif (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstart = [forward ? parent.firstChild : parent.lastChild];\n\n\t\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\t\tif (forward && useCache) {\n\t\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\t\touterCache = parent[expando] || (parent[expando] = {});\n\t\t\t\t\t\t\t\tcache = outerCache[type] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\t\tdiff = cache[0] === dirruns && cache[2];\n\t\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[nodeIndex];\n\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\tdiff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\t\tif (node.nodeType === 1 && ++diff && node === elem) {\n\t\t\t\t\t\t\t\t\t\touterCache[type] = [dirruns, nodeIndex, diff];\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\t} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {\n\t\t\t\t\t\t\t\tdiff = cache[1];\n\n\t\t\t\t\t\t\t\t// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\tif ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif (useCache) {\n\t\t\t\t\t\t\t\t\t\t\t(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (node === elem) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\t\treturn diff === first || diff % first === 0 && diff / first >= 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function PSEUDO(pseudo, argument) {\n\t\t\t\t\t// pseudo-class names are case-insensitive\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\t\t\tvar args,\n\t\t\t\t\t    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo);\n\n\t\t\t\t\t// The user may use createPseudo to indicate that\n\t\t\t\t\t// arguments are needed to create the filter function\n\t\t\t\t\t// just as Sizzle does\n\t\t\t\t\tif (fn[expando]) {\n\t\t\t\t\t\treturn fn(argument);\n\t\t\t\t\t}\n\n\t\t\t\t\t// But maintain support for old signatures\n\t\t\t\t\tif (fn.length > 1) {\n\t\t\t\t\t\targs = [pseudo, pseudo, \"\", argument];\n\t\t\t\t\t\treturn Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n\t\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\t    matched = fn(seed, argument),\n\t\t\t\t\t\t\t    i = matched.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tidx = indexOf.call(seed, matched[i]);\n\t\t\t\t\t\t\t\tseed[idx] = !(matches[idx] = matched[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}) : function (elem) {\n\t\t\t\t\t\t\treturn fn(elem, 0, args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fn;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpseudos: {\n\t\t\t\t// Potentially complex pseudos\n\t\t\t\t\"not\": markFunction(function (selector) {\n\t\t\t\t\t// Trim the selector passed to compile\n\t\t\t\t\t// to avoid treating leading and trailing\n\t\t\t\t\t// spaces as combinators\n\t\t\t\t\tvar input = [],\n\t\t\t\t\t    results = [],\n\t\t\t\t\t    matcher = compile(selector.replace(rtrim, \"$1\"));\n\n\t\t\t\t\treturn matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n\t\t\t\t\t\tvar elem,\n\t\t\t\t\t\t    unmatched = matcher(seed, null, xml, []),\n\t\t\t\t\t\t    i = seed.length;\n\n\t\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}) : function (elem, context, xml) {\n\t\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\t\tmatcher(input, null, xml, results);\n\t\t\t\t\t\treturn !results.pop();\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"has\": markFunction(function (selector) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn Sizzle(selector, elem).length > 0;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"contains\": markFunction(function (text) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// \"Whether an element is represented by a :lang() selector\n\t\t\t\t// is based solely on the element's language value\n\t\t\t\t// being equal to the identifier C,\n\t\t\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t\t\t// The identifier C does not have to be a valid language name.\"\n\t\t\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\t\t\"lang\": markFunction(function (lang) {\n\t\t\t\t\t// lang value must be a valid identifider\n\t\t\t\t\tif (!ridentifier.test(lang || \"\")) {\n\t\t\t\t\t\tSizzle.error(\"unsupported lang: \" + lang);\n\t\t\t\t\t}\n\t\t\t\t\tlang = lang.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar elemLang;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (elemLang = documentIsXML ? elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\") : elem.lang) {\n\n\t\t\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while ((elem = elem.parentNode) && elem.nodeType === 1);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// Miscellaneous\n\t\t\t\t\"target\": function target(elem) {\n\t\t\t\t\tvar hash = window.location && window.location.hash;\n\t\t\t\t\treturn hash && hash.slice(1) === elem.id;\n\t\t\t\t},\n\n\t\t\t\t\"root\": function root(elem) {\n\t\t\t\t\treturn elem === docElem;\n\t\t\t\t},\n\n\t\t\t\t\"focus\": function focus(elem) {\n\t\t\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t\t\t},\n\n\t\t\t\t// Boolean properties\n\t\t\t\t\"enabled\": function enabled(elem) {\n\t\t\t\t\treturn elem.disabled === false;\n\t\t\t\t},\n\n\t\t\t\t\"disabled\": function disabled(elem) {\n\t\t\t\t\treturn elem.disabled === true;\n\t\t\t\t},\n\n\t\t\t\t\"checked\": function checked(elem) {\n\t\t\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n\t\t\t\t},\n\n\t\t\t\t\"selected\": function selected(elem) {\n\t\t\t\t\t// Accessing this property makes selected-by-default\n\t\t\t\t\t// options in Safari work properly\n\t\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem.selected === true;\n\t\t\t\t},\n\n\t\t\t\t// Contents\n\t\t\t\t\"empty\": function empty(elem) {\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t\t\t// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),\n\t\t\t\t\t//   not comment, processing instructions, or others\n\t\t\t\t\t// Thanks to Diego Perini for the nodeName shortcut\n\t\t\t\t\t//   Greater than \"@\" means alpha characters (specifically not starting with \"#\" or \"?\")\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tif (elem.nodeName > \"@\" || elem.nodeType === 3 || elem.nodeType === 4) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t\"parent\": function parent(elem) {\n\t\t\t\t\treturn !Expr.pseudos[\"empty\"](elem);\n\t\t\t\t},\n\n\t\t\t\t// Element/input types\n\t\t\t\t\"header\": function header(elem) {\n\t\t\t\t\treturn rheader.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"input\": function input(elem) {\n\t\t\t\t\treturn rinputs.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"button\": function button(elem) {\n\t\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t\t\t},\n\n\t\t\t\t\"text\": function text(elem) {\n\t\t\t\t\tvar attr;\n\t\t\t\t\t// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)\n\t\t\t\t\t// use getAttribute instead to test this case\n\t\t\t\t\treturn elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && ((attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === elem.type);\n\t\t\t\t},\n\n\t\t\t\t// Position-in-collection\n\t\t\t\t\"first\": createPositionalPseudo(function () {\n\t\t\t\t\treturn [0];\n\t\t\t\t}),\n\n\t\t\t\t\"last\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\treturn [length - 1];\n\t\t\t\t}),\n\n\t\t\t\t\"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\treturn [argument < 0 ? argument + length : argument];\n\t\t\t\t}),\n\n\t\t\t\t\"even\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"odd\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 1;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; --i >= 0;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; ++i < length;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\n\t\t// Add button/input type pseudos\n\t\tfor (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\n\t\t\tExpr.pseudos[i] = createInputPseudo(i);\n\t\t}\n\t\tfor (i in { submit: true, reset: true }) {\n\t\t\tExpr.pseudos[i] = createButtonPseudo(i);\n\t\t}\n\n\t\tfunction tokenize(selector, parseOnly) {\n\t\t\tvar matched,\n\t\t\t    match,\n\t\t\t    tokens,\n\t\t\t    type,\n\t\t\t    soFar,\n\t\t\t    groups,\n\t\t\t    preFilters,\n\t\t\t    cached = tokenCache[selector + \" \"];\n\n\t\t\tif (cached) {\n\t\t\t\treturn parseOnly ? 0 : cached.slice(0);\n\t\t\t}\n\n\t\t\tsoFar = selector;\n\t\t\tgroups = [];\n\t\t\tpreFilters = Expr.preFilter;\n\n\t\t\twhile (soFar) {\n\n\t\t\t\t// Comma and first run\n\t\t\t\tif (!matched || (match = rcomma.exec(soFar))) {\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\t\t\tsoFar = soFar.slice(match[0].length) || soFar;\n\t\t\t\t\t}\n\t\t\t\t\tgroups.push(tokens = []);\n\t\t\t\t}\n\n\t\t\t\tmatched = false;\n\n\t\t\t\t// Combinators\n\t\t\t\tif (match = rcombinators.exec(soFar)) {\n\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t// Cast descendant combinators to space\n\t\t\t\t\t\ttype: match[0].replace(rtrim, \" \")\n\t\t\t\t\t});\n\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t}\n\n\t\t\t\t// Filters\n\t\t\t\tfor (type in Expr.filter) {\n\t\t\t\t\tif ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n\t\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tmatches: match\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!matched) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the length of the invalid excess\n\t\t\t// if we're just parsing\n\t\t\t// Otherwise, throw an error or return tokens\n\t\t\treturn parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache(selector, groups).slice(0);\n\t\t}\n\n\t\tfunction toSelector(tokens) {\n\t\t\tvar i = 0,\n\t\t\t    len = tokens.length,\n\t\t\t    selector = \"\";\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tselector += tokens[i].value;\n\t\t\t}\n\t\t\treturn selector;\n\t\t}\n\n\t\tfunction addCombinator(matcher, combinator, base) {\n\t\t\tvar dir = combinator.dir,\n\t\t\t    checkNonElements = base && dir === \"parentNode\",\n\t\t\t    doneName = done++;\n\n\t\t\treturn combinator.first ?\n\t\t\t// Check against closest ancestor/preceding element\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\treturn matcher(elem, context, xml);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} :\n\n\t\t\t// Check against all ancestor/preceding elements\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\tvar data,\n\t\t\t\t    cache,\n\t\t\t\t    outerCache,\n\t\t\t\t    dirkey = dirruns + \" \" + doneName;\n\n\t\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n\t\t\t\tif (xml) {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\touterCache = elem[expando] || (elem[expando] = {});\n\t\t\t\t\t\t\tif ((cache = outerCache[dir]) && cache[0] === dirkey) {\n\t\t\t\t\t\t\t\tif ((data = cache[1]) === true || data === cachedruns) {\n\t\t\t\t\t\t\t\t\treturn data === true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcache = outerCache[dir] = [dirkey];\n\t\t\t\t\t\t\t\tcache[1] = matcher(elem, context, xml) || cachedruns;\n\t\t\t\t\t\t\t\tif (cache[1] === true) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction elementMatcher(matchers) {\n\t\t\treturn matchers.length > 1 ? function (elem, context, xml) {\n\t\t\t\tvar i = matchers.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (!matchers[i](elem, context, xml)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} : matchers[0];\n\t\t}\n\n\t\tfunction condense(unmatched, map, filter, context, xml) {\n\t\t\tvar elem,\n\t\t\t    newUnmatched = [],\n\t\t\t    i = 0,\n\t\t\t    len = unmatched.length,\n\t\t\t    mapped = map != null;\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\tif (!filter || filter(elem, context, xml)) {\n\t\t\t\t\t\tnewUnmatched.push(elem);\n\t\t\t\t\t\tif (mapped) {\n\t\t\t\t\t\t\tmap.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newUnmatched;\n\t\t}\n\n\t\tfunction setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n\t\t\tif (postFilter && !postFilter[expando]) {\n\t\t\t\tpostFilter = setMatcher(postFilter);\n\t\t\t}\n\t\t\tif (postFinder && !postFinder[expando]) {\n\t\t\t\tpostFinder = setMatcher(postFinder, postSelector);\n\t\t\t}\n\t\t\treturn markFunction(function (seed, results, context, xml) {\n\t\t\t\tvar temp,\n\t\t\t\t    i,\n\t\t\t\t    elem,\n\t\t\t\t    preMap = [],\n\t\t\t\t    postMap = [],\n\t\t\t\t    preexisting = results.length,\n\n\n\t\t\t\t// Get initial elements from seed or context\n\t\t\t\telems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n\n\n\t\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\t\tmatcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n\t\t\t\t    matcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || (seed ? preFilter : preexisting || postFilter) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults : matcherIn;\n\n\t\t\t\t// Find primary matches\n\t\t\t\tif (matcher) {\n\t\t\t\t\tmatcher(matcherIn, matcherOut, context, xml);\n\t\t\t\t}\n\n\t\t\t\t// Apply postFilter\n\t\t\t\tif (postFilter) {\n\t\t\t\t\ttemp = condense(matcherOut, postMap);\n\t\t\t\t\tpostFilter(temp, [], context, xml);\n\n\t\t\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\t\t\ti = temp.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (elem = temp[i]) {\n\t\t\t\t\t\t\tmatcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (seed) {\n\t\t\t\t\tif (postFinder || preFilter) {\n\t\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (elem = matcherOut[i]) {\n\t\t\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\t\t\ttemp.push(matcherIn[i] = elem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpostFinder(null, matcherOut = [], temp, xml);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {\n\n\t\t\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add elements to results, through postFinder if defined\n\t\t\t\t} else {\n\t\t\t\t\tmatcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\tpostFinder(null, results, matcherOut, xml);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpush.apply(results, matcherOut);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction matcherFromTokens(tokens) {\n\t\t\tvar checkContext,\n\t\t\t    matcher,\n\t\t\t    j,\n\t\t\t    len = tokens.length,\n\t\t\t    leadingRelative = Expr.relative[tokens[0].type],\n\t\t\t    implicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\t\t    i = leadingRelative ? 1 : 0,\n\n\n\t\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\t\tmatchContext = addCombinator(function (elem) {\n\t\t\t\treturn elem === checkContext;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchAnyContext = addCombinator(function (elem) {\n\t\t\t\treturn indexOf.call(checkContext, elem) > -1;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchers = [function (elem, context, xml) {\n\t\t\t\treturn !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n\t\t\t}];\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (matcher = Expr.relative[tokens[i].type]) {\n\t\t\t\t\tmatchers = [addCombinator(elementMatcher(matchers), matcher)];\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n\t\t\t\t\t// Return special upon seeing a positional matcher\n\t\t\t\t\tif (matcher[expando]) {\n\t\t\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\t\t\tj = ++i;\n\t\t\t\t\t\tfor (; j < len; j++) {\n\t\t\t\t\t\t\tif (Expr.relative[tokens[j].type]) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1)).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n\t\t\t\t\t}\n\t\t\t\t\tmatchers.push(matcher);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn elementMatcher(matchers);\n\t\t}\n\n\t\tfunction matcherFromGroupMatchers(elementMatchers, setMatchers) {\n\t\t\t// A counter to specify which element is currently being matched\n\t\t\tvar matcherCachedRuns = 0,\n\t\t\t    bySet = setMatchers.length > 0,\n\t\t\t    byElement = elementMatchers.length > 0,\n\t\t\t    superMatcher = function superMatcher(seed, context, xml, results, expandContext) {\n\t\t\t\tvar elem,\n\t\t\t\t    j,\n\t\t\t\t    matcher,\n\t\t\t\t    setMatched = [],\n\t\t\t\t    matchedCount = 0,\n\t\t\t\t    i = \"0\",\n\t\t\t\t    unmatched = seed && [],\n\t\t\t\t    outermost = expandContext != null,\n\t\t\t\t    contextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"](\"*\", expandContext && context.parentNode || context),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1;\n\n\t\t\t\tif (outermost) {\n\t\t\t\t\toutermostContext = context !== document && context;\n\t\t\t\t\tcachedruns = matcherCachedRuns;\n\t\t\t\t}\n\n\t\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t\t// Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\n\t\t\t\tfor (; (elem = elems[i]) != null; i++) {\n\t\t\t\t\tif (byElement && elem) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (matcher = elementMatchers[j++]) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (outermost) {\n\t\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t\t\tcachedruns = ++matcherCachedRuns;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\t\tif (bySet) {\n\t\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\t\tif (elem = !matcher && elem) {\n\t\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t\tunmatched.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply set filters to unmatched elements\n\t\t\t\tmatchedCount += i;\n\t\t\t\tif (bySet && i !== matchedCount) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (matcher = setMatchers[j++]) {\n\t\t\t\t\t\tmatcher(unmatched, setMatched, context, xml);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\t\tif (matchedCount > 0) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (!(unmatched[i] || setMatched[i])) {\n\t\t\t\t\t\t\t\t\tsetMatched[i] = pop.call(results);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\t\tsetMatched = condense(setMatched);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add matches to results\n\t\t\t\t\tpush.apply(results, setMatched);\n\n\t\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\t\tif (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n\n\t\t\t\t\t\tSizzle.uniqueSort(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override manipulation of globals by nested matchers\n\t\t\t\tif (outermost) {\n\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\toutermostContext = contextBackup;\n\t\t\t\t}\n\n\t\t\t\treturn unmatched;\n\t\t\t};\n\n\t\t\treturn bySet ? markFunction(superMatcher) : superMatcher;\n\t\t}\n\n\t\tcompile = Sizzle.compile = function (selector, group /* Internal Use Only */) {\n\t\t\tvar i,\n\t\t\t    setMatchers = [],\n\t\t\t    elementMatchers = [],\n\t\t\t    cached = compilerCache[selector + \" \"];\n\n\t\t\tif (!cached) {\n\t\t\t\t// Generate a function of recursive functions that can be used to check each element\n\t\t\t\tif (!group) {\n\t\t\t\t\tgroup = tokenize(selector);\n\t\t\t\t}\n\t\t\t\ti = group.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcached = matcherFromTokens(group[i]);\n\t\t\t\t\tif (cached[expando]) {\n\t\t\t\t\t\tsetMatchers.push(cached);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telementMatchers.push(cached);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Cache the compiled function\n\t\t\t\tcached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n\t\t\t}\n\t\t\treturn cached;\n\t\t};\n\n\t\tfunction multipleContexts(selector, contexts, results) {\n\t\t\tvar i = 0,\n\t\t\t    len = contexts.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tSizzle(selector, contexts[i], results);\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\n\t\tfunction select(selector, context, results, seed) {\n\t\t\tvar i,\n\t\t\t    tokens,\n\t\t\t    token,\n\t\t\t    type,\n\t\t\t    find,\n\t\t\t    match = tokenize(selector);\n\n\t\t\tif (!seed) {\n\t\t\t\t// Try to minimize operations if there is only one group\n\t\t\t\tif (match.length === 1) {\n\n\t\t\t\t\t// Take a shortcut and set the context if the root selector is an ID\n\t\t\t\t\ttokens = match[0] = match[0].slice(0);\n\t\t\t\t\tif (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && !documentIsXML && Expr.relative[tokens[1].type]) {\n\n\t\t\t\t\t\tcontext = Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context)[0];\n\t\t\t\t\t\tif (!context) {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tselector = selector.slice(tokens.shift().value.length);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fetch a seed set for right-to-left matching\n\t\t\t\t\ti = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\ttoken = tokens[i];\n\n\t\t\t\t\t\t// Abort if we hit a combinator\n\t\t\t\t\t\tif (Expr.relative[type = token.type]) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (find = Expr.find[type]) {\n\t\t\t\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\t\t\t\tif (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {\n\n\t\t\t\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\t\t\t\ttokens.splice(i, 1);\n\t\t\t\t\t\t\t\tselector = seed.length && toSelector(tokens);\n\t\t\t\t\t\t\t\tif (!selector) {\n\t\t\t\t\t\t\t\t\tpush.apply(results, slice.call(seed, 0));\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compile and execute a filtering function\n\t\t\t// Provide `match` to avoid retokenization if we modified the selector above\n\t\t\tcompile(selector, match)(seed, context, documentIsXML, results, rsibling.test(selector));\n\t\t\treturn results;\n\t\t}\n\n\t\t// Deprecated\n\t\tExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n\t\t// Easy API for creating new setFilters\n\t\tfunction setFilters() {}\n\t\tExpr.filters = setFilters.prototype = Expr.pseudos;\n\t\tExpr.setFilters = new setFilters();\n\n\t\t// Initialize with the default document\n\t\tsetDocument();\n\n\t\t// Override sizzle attribute retrieval\n\t\tSizzle.attr = jQuery.attr;\n\t\tjQuery.find = Sizzle;\n\t\tjQuery.expr = Sizzle.selectors;\n\t\tjQuery.expr[\":\"] = jQuery.expr.pseudos;\n\t\tjQuery.unique = Sizzle.uniqueSort;\n\t\tjQuery.text = Sizzle.getText;\n\t\tjQuery.isXMLDoc = Sizzle.isXML;\n\t\tjQuery.contains = Sizzle.contains;\n\t})(window);\n\tvar runtil = /Until$/,\n\t    rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\t    isSimple = /^.[^:#\\[\\.,]*$/,\n\t    rneedsContext = jQuery.expr.match.needsContext,\n\n\t// methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\n\tjQuery.fn.extend({\n\t\tfind: function find(selector) {\n\t\t\tvar i,\n\t\t\t    ret,\n\t\t\t    self,\n\t\t\t    len = this.length;\n\n\t\t\tif (typeof selector !== \"string\") {\n\t\t\t\tself = this;\n\t\t\t\treturn this.pushStack(jQuery(selector).filter(function () {\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\tif (jQuery.contains(self[i], this)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tret = [];\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tjQuery.find(selector, this[i], ret);\n\t\t\t}\n\n\t\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\t\tret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);\n\t\t\tret.selector = (this.selector ? this.selector + \" \" : \"\") + selector;\n\t\t\treturn ret;\n\t\t},\n\n\t\thas: function has(target) {\n\t\t\tvar i,\n\t\t\t    targets = jQuery(target, this),\n\t\t\t    len = targets.length;\n\n\t\t\treturn this.filter(function () {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tif (jQuery.contains(this, targets[i])) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tnot: function not(selector) {\n\t\t\treturn this.pushStack(winnow(this, selector, false));\n\t\t},\n\n\t\tfilter: function filter(selector) {\n\t\t\treturn this.pushStack(winnow(this, selector, true));\n\t\t},\n\n\t\tis: function is(selector) {\n\t\t\treturn !!selector && (typeof selector === \"string\" ?\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\trneedsContext.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0);\n\t\t},\n\n\t\tclosest: function closest(selectors, context) {\n\t\t\tvar cur,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    ret = [],\n\t\t\t    pos = rneedsContext.test(selectors) || typeof selectors !== \"string\" ? jQuery(selectors, context || this.context) : 0;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\tcur = this[i];\n\n\t\t\t\twhile (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {\n\t\t\t\t\tif (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {\n\t\t\t\t\t\tret.push(cur);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcur = cur.parentNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);\n\t\t},\n\n\t\t// Determine the position of an element within\n\t\t// the matched set of elements\n\t\tindex: function index(elem) {\n\n\t\t\t// No argument, return index in parent\n\t\t\tif (!elem) {\n\t\t\t\treturn this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n\t\t\t}\n\n\t\t\t// index in selector\n\t\t\tif (typeof elem === \"string\") {\n\t\t\t\treturn jQuery.inArray(this[0], jQuery(elem));\n\t\t\t}\n\n\t\t\t// Locate the position of the desired element\n\t\t\treturn jQuery.inArray(\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[0] : elem, this);\n\t\t},\n\n\t\tadd: function add(selector, context) {\n\t\t\tvar set = typeof selector === \"string\" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector),\n\t\t\t    all = jQuery.merge(this.get(), set);\n\n\t\t\treturn this.pushStack(jQuery.unique(all));\n\t\t},\n\n\t\taddBack: function addBack(selector) {\n\t\t\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n\t\t}\n\t});\n\n\tjQuery.fn.andSelf = jQuery.fn.addBack;\n\n\tfunction sibling(cur, dir) {\n\t\tdo {\n\t\t\tcur = cur[dir];\n\t\t} while (cur && cur.nodeType !== 1);\n\n\t\treturn cur;\n\t}\n\n\tjQuery.each({\n\t\tparent: function parent(elem) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t\t},\n\t\tparents: function parents(elem) {\n\t\t\treturn jQuery.dir(elem, \"parentNode\");\n\t\t},\n\t\tparentsUntil: function parentsUntil(elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"parentNode\", until);\n\t\t},\n\t\tnext: function next(elem) {\n\t\t\treturn sibling(elem, \"nextSibling\");\n\t\t},\n\t\tprev: function prev(elem) {\n\t\t\treturn sibling(elem, \"previousSibling\");\n\t\t},\n\t\tnextAll: function nextAll(elem) {\n\t\t\treturn jQuery.dir(elem, \"nextSibling\");\n\t\t},\n\t\tprevAll: function prevAll(elem) {\n\t\t\treturn jQuery.dir(elem, \"previousSibling\");\n\t\t},\n\t\tnextUntil: function nextUntil(elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"nextSibling\", until);\n\t\t},\n\t\tprevUntil: function prevUntil(elem, i, until) {\n\t\t\treturn jQuery.dir(elem, \"previousSibling\", until);\n\t\t},\n\t\tsiblings: function siblings(elem) {\n\t\t\treturn jQuery.sibling((elem.parentNode || {}).firstChild, elem);\n\t\t},\n\t\tchildren: function children(elem) {\n\t\t\treturn jQuery.sibling(elem.firstChild);\n\t\t},\n\t\tcontents: function contents(elem) {\n\t\t\treturn jQuery.nodeName(elem, \"iframe\") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);\n\t\t}\n\t}, function (name, fn) {\n\t\tjQuery.fn[name] = function (until, selector) {\n\t\t\tvar ret = jQuery.map(this, fn, until);\n\n\t\t\tif (!runtil.test(name)) {\n\t\t\t\tselector = until;\n\t\t\t}\n\n\t\t\tif (selector && typeof selector === \"string\") {\n\t\t\t\tret = jQuery.filter(selector, ret);\n\t\t\t}\n\n\t\t\tret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;\n\n\t\t\tif (this.length > 1 && rparentsprev.test(name)) {\n\t\t\t\tret = ret.reverse();\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\n\tjQuery.extend({\n\t\tfilter: function filter(expr, elems, not) {\n\t\t\tif (not) {\n\t\t\t\texpr = \":not(\" + expr + \")\";\n\t\t\t}\n\n\t\t\treturn elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems);\n\t\t},\n\n\t\tdir: function dir(elem, _dir, until) {\n\t\t\tvar matched = [],\n\t\t\t    cur = elem[_dir];\n\n\t\t\twhile (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {\n\t\t\t\tif (cur.nodeType === 1) {\n\t\t\t\t\tmatched.push(cur);\n\t\t\t\t}\n\t\t\t\tcur = cur[_dir];\n\t\t\t}\n\t\t\treturn matched;\n\t\t},\n\n\t\tsibling: function sibling(n, elem) {\n\t\t\tvar r = [];\n\n\t\t\tfor (; n; n = n.nextSibling) {\n\t\t\t\tif (n.nodeType === 1 && n !== elem) {\n\t\t\t\t\tr.push(n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn r;\n\t\t}\n\t});\n\n\t// Implement the identical functionality for filter and not\n\tfunction winnow(elements, qualifier, keep) {\n\n\t\t// Can't pass null or undefined to indexOf in Firefox 4\n\t\t// Set to 0 to skip string check\n\t\tqualifier = qualifier || 0;\n\n\t\tif (jQuery.isFunction(qualifier)) {\n\t\t\treturn jQuery.grep(elements, function (elem, i) {\n\t\t\t\tvar retVal = !!qualifier.call(elem, i, elem);\n\t\t\t\treturn retVal === keep;\n\t\t\t});\n\t\t} else if (qualifier.nodeType) {\n\t\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\t\treturn elem === qualifier === keep;\n\t\t\t});\n\t\t} else if (typeof qualifier === \"string\") {\n\t\t\tvar filtered = jQuery.grep(elements, function (elem) {\n\t\t\t\treturn elem.nodeType === 1;\n\t\t\t});\n\n\t\t\tif (isSimple.test(qualifier)) {\n\t\t\t\treturn jQuery.filter(qualifier, filtered, !keep);\n\t\t\t} else {\n\t\t\t\tqualifier = jQuery.filter(qualifier, filtered);\n\t\t\t}\n\t\t}\n\n\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\treturn jQuery.inArray(elem, qualifier) >= 0 === keep;\n\t\t});\n\t}\n\tfunction createSafeFragment(document) {\n\t\tvar list = nodeNames.split(\"|\"),\n\t\t    safeFrag = document.createDocumentFragment();\n\n\t\tif (safeFrag.createElement) {\n\t\t\twhile (list.length) {\n\t\t\t\tsafeFrag.createElement(list.pop());\n\t\t\t}\n\t\t}\n\t\treturn safeFrag;\n\t}\n\n\tvar nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" + \"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n\t    rinlinejQuery = / jQuery\\d+=\"(?:null|\\d+)\"/g,\n\t    rnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),\n\t    rleadingWhitespace = /^\\s+/,\n\t    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n\t    rtagName = /<([\\w:]+)/,\n\t    rtbody = /<tbody/i,\n\t    rhtml = /<|&#?\\w+;/,\n\t    rnoInnerhtml = /<(?:script|style|link)/i,\n\t    manipulation_rcheckableType = /^(?:checkbox|radio)$/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\t    rscriptType = /^$|\\/(?:java|ecma)script/i,\n\t    rscriptTypeMasked = /^true\\/(.*)/,\n\t    rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n\n\n\t// We have to close these tags to support XHTML (#13200)\n\twrapMap = {\n\t\toption: [1, \"<select multiple='multiple'>\", \"</select>\"],\n\t\tlegend: [1, \"<fieldset>\", \"</fieldset>\"],\n\t\tarea: [1, \"<map>\", \"</map>\"],\n\t\tparam: [1, \"<object>\", \"</object>\"],\n\t\tthead: [1, \"<table>\", \"</table>\"],\n\t\ttr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n\t\tcol: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n\t\ttd: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n\n\t\t// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,\n\t\t// unless wrapped in a div with non-breaking characters in front of it.\n\t\t_default: jQuery.support.htmlSerialize ? [0, \"\", \"\"] : [1, \"X<div>\", \"</div>\"]\n\t},\n\t    safeFragment = createSafeFragment(document),\n\t    fragmentDiv = safeFragment.appendChild(document.createElement(\"div\"));\n\n\twrapMap.optgroup = wrapMap.option;\n\twrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n\twrapMap.th = wrapMap.td;\n\n\tjQuery.fn.extend({\n\t\ttext: function text(value) {\n\t\t\treturn jQuery.access(this, function (value) {\n\t\t\t\treturn value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\twrapAll: function wrapAll(html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapAll(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this[0]) {\n\t\t\t\t// The elements to wrap the target around\n\t\t\t\tvar wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n\t\t\t\tif (this[0].parentNode) {\n\t\t\t\t\twrap.insertBefore(this[0]);\n\t\t\t\t}\n\n\t\t\t\twrap.map(function () {\n\t\t\t\t\tvar elem = this;\n\n\t\t\t\t\twhile (elem.firstChild && elem.firstChild.nodeType === 1) {\n\t\t\t\t\t\telem = elem.firstChild;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem;\n\t\t\t\t}).append(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\twrapInner: function wrapInner(html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapInner(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar self = jQuery(this),\n\t\t\t\t    contents = self.contents();\n\n\t\t\t\tif (contents.length) {\n\t\t\t\t\tcontents.wrapAll(html);\n\t\t\t\t} else {\n\t\t\t\t\tself.append(html);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\twrap: function wrap(html) {\n\t\t\tvar isFunction = jQuery.isFunction(html);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tjQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n\t\t\t});\n\t\t},\n\n\t\tunwrap: function unwrap() {\n\t\t\treturn this.parent().each(function () {\n\t\t\t\tif (!jQuery.nodeName(this, \"body\")) {\n\t\t\t\t\tjQuery(this).replaceWith(this.childNodes);\n\t\t\t\t}\n\t\t\t}).end();\n\t\t},\n\n\t\tappend: function append() {\n\t\t\treturn this.domManip(arguments, true, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tthis.appendChild(elem);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tprepend: function prepend() {\n\t\t\treturn this.domManip(arguments, true, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tthis.insertBefore(elem, this.firstChild);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tbefore: function before() {\n\t\t\treturn this.domManip(arguments, false, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tafter: function after() {\n\t\t\treturn this.domManip(arguments, false, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this.nextSibling);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// keepData is for internal use only--do not document\n\t\tremove: function remove(selector, keepData) {\n\t\t\tvar elem,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = this[i]) != null; i++) {\n\t\t\t\tif (!selector || jQuery.filter(selector, [elem]).length > 0) {\n\t\t\t\t\tif (!keepData && elem.nodeType === 1) {\n\t\t\t\t\t\tjQuery.cleanData(getAll(elem));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\t\tif (keepData && jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\t\t\t\tsetGlobalEval(getAll(elem, \"script\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telem.parentNode.removeChild(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tempty: function empty() {\n\t\t\tvar elem,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = this[i]) != null; i++) {\n\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t}\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\twhile (elem.firstChild) {\n\t\t\t\t\telem.removeChild(elem.firstChild);\n\t\t\t\t}\n\n\t\t\t\t// If this is a select, ensure that it displays empty (#12336)\n\t\t\t\t// Support: IE<9\n\t\t\t\tif (elem.options && jQuery.nodeName(elem, \"select\")) {\n\t\t\t\t\telem.options.length = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tclone: function clone(dataAndEvents, deepDataAndEvents) {\n\t\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\t\treturn this.map(function () {\n\t\t\t\treturn jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n\t\t\t});\n\t\t},\n\n\t\thtml: function html(value) {\n\t\t\treturn jQuery.access(this, function (value) {\n\t\t\t\tvar elem = this[0] || {},\n\t\t\t\t    i = 0,\n\t\t\t\t    l = this.length;\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, \"\") : undefined;\n\t\t\t\t}\n\n\t\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\t\tif (typeof value === \"string\" && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n\n\t\t\t\t\tvalue = value.replace(rxhtmlTag, \"<$1></$2>\");\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\t\telem = this[i] || {};\n\t\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telem = 0;\n\n\t\t\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\tif (elem) {\n\t\t\t\t\tthis.empty().append(value);\n\t\t\t\t}\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\treplaceWith: function replaceWith(value) {\n\t\t\tvar isFunc = jQuery.isFunction(value);\n\n\t\t\t// Make sure that the elements are removed from the DOM before they are inserted\n\t\t\t// this can help fix replacing a parent with child elements\n\t\t\tif (!isFunc && typeof value !== \"string\") {\n\t\t\t\tvalue = jQuery(value).not(this).detach();\n\t\t\t}\n\n\t\t\treturn this.domManip([value], true, function (elem) {\n\t\t\t\tvar next = this.nextSibling,\n\t\t\t\t    parent = this.parentNode;\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tjQuery(this).remove();\n\t\t\t\t\tparent.insertBefore(elem, next);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tdetach: function detach(selector) {\n\t\t\treturn this.remove(selector, true);\n\t\t},\n\n\t\tdomManip: function domManip(args, table, callback) {\n\n\t\t\t// Flatten any nested arrays\n\t\t\targs = core_concat.apply([], args);\n\n\t\t\tvar first,\n\t\t\t    node,\n\t\t\t    hasScripts,\n\t\t\t    scripts,\n\t\t\t    doc,\n\t\t\t    fragment,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    set = this,\n\t\t\t    iNoClone = l - 1,\n\t\t\t    value = args[0],\n\t\t\t    isFunction = jQuery.isFunction(value);\n\n\t\t\t// We can't cloneNode fragments that contain checked, in WebKit\n\t\t\tif (isFunction || !(l <= 1 || typeof value !== \"string\" || jQuery.support.checkClone || !rchecked.test(value))) {\n\t\t\t\treturn this.each(function (index) {\n\t\t\t\t\tvar self = set.eq(index);\n\t\t\t\t\tif (isFunction) {\n\t\t\t\t\t\targs[0] = value.call(this, index, table ? self.html() : undefined);\n\t\t\t\t\t}\n\t\t\t\t\tself.domManip(args, table, callback);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (l) {\n\t\t\t\tfragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);\n\t\t\t\tfirst = fragment.firstChild;\n\n\t\t\t\tif (fragment.childNodes.length === 1) {\n\t\t\t\t\tfragment = first;\n\t\t\t\t}\n\n\t\t\t\tif (first) {\n\t\t\t\t\ttable = table && jQuery.nodeName(first, \"tr\");\n\t\t\t\t\tscripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n\t\t\t\t\thasScripts = scripts.length;\n\n\t\t\t\t\t// Use the original fragment for the last item instead of the first because it can end up\n\t\t\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\tnode = fragment;\n\n\t\t\t\t\t\tif (i !== iNoClone) {\n\t\t\t\t\t\t\tnode = jQuery.clone(node, true, true);\n\n\t\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\t\t\tif (hasScripts) {\n\t\t\t\t\t\t\t\tjQuery.merge(scripts, getAll(node, \"script\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcallback.call(table && jQuery.nodeName(this[i], \"table\") ? findOrAppend(this[i], \"tbody\") : this[i], node, i);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hasScripts) {\n\t\t\t\t\t\tdoc = scripts[scripts.length - 1].ownerDocument;\n\n\t\t\t\t\t\t// Reenable scripts\n\t\t\t\t\t\tjQuery.map(scripts, restoreScript);\n\n\t\t\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\t\t\tfor (i = 0; i < hasScripts; i++) {\n\t\t\t\t\t\t\tnode = scripts[i];\n\t\t\t\t\t\t\tif (rscriptType.test(node.type || \"\") && !jQuery._data(node, \"globalEval\") && jQuery.contains(doc, node)) {\n\n\t\t\t\t\t\t\t\tif (node.src) {\n\t\t\t\t\t\t\t\t\t// Hope ajax is available...\n\t\t\t\t\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t\t\t\t\t\turl: node.src,\n\t\t\t\t\t\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\t\t\t\t\t\tdataType: \"script\",\n\t\t\t\t\t\t\t\t\t\tasync: false,\n\t\t\t\t\t\t\t\t\t\tglobal: false,\n\t\t\t\t\t\t\t\t\t\t\"throws\": true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.globalEval((node.text || node.textContent || node.innerHTML || \"\").replace(rcleanScript, \"\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix #11809: Avoid leaking memory\n\t\t\t\t\tfragment = first = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction findOrAppend(elem, tag) {\n\t\treturn elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));\n\t}\n\n\t// Replace/restore the type attribute of script elements for safe DOM manipulation\n\tfunction disableScript(elem) {\n\t\tvar attr = elem.getAttributeNode(\"type\");\n\t\telem.type = (attr && attr.specified) + \"/\" + elem.type;\n\t\treturn elem;\n\t}\n\tfunction restoreScript(elem) {\n\t\tvar match = rscriptTypeMasked.exec(elem.type);\n\t\tif (match) {\n\t\t\telem.type = match[1];\n\t\t} else {\n\t\t\telem.removeAttribute(\"type\");\n\t\t}\n\t\treturn elem;\n\t}\n\n\t// Mark scripts as having already been evaluated\n\tfunction setGlobalEval(elems, refElements) {\n\t\tvar elem,\n\t\t    i = 0;\n\t\tfor (; (elem = elems[i]) != null; i++) {\n\t\t\tjQuery._data(elem, \"globalEval\", !refElements || jQuery._data(refElements[i], \"globalEval\"));\n\t\t}\n\t}\n\n\tfunction cloneCopyEvent(src, dest) {\n\n\t\tif (dest.nodeType !== 1 || !jQuery.hasData(src)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar type,\n\t\t    i,\n\t\t    l,\n\t\t    oldData = jQuery._data(src),\n\t\t    curData = jQuery._data(dest, oldData),\n\t\t    events = oldData.events;\n\n\t\tif (events) {\n\t\t\tdelete curData.handle;\n\t\t\tcurData.events = {};\n\n\t\t\tfor (type in events) {\n\t\t\t\tfor (i = 0, l = events[type].length; i < l; i++) {\n\t\t\t\t\tjQuery.event.add(dest, type, events[type][i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// make the cloned public data object a copy from the original\n\t\tif (curData.data) {\n\t\t\tcurData.data = jQuery.extend({}, curData.data);\n\t\t}\n\t}\n\n\tfunction fixCloneNodeIssues(src, dest) {\n\t\tvar nodeName, e, data;\n\n\t\t// We do not need to do anything for non-Elements\n\t\tif (dest.nodeType !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tnodeName = dest.nodeName.toLowerCase();\n\n\t\t// IE6-8 copies events bound via attachEvent when using cloneNode.\n\t\tif (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {\n\t\t\tdata = jQuery._data(dest);\n\n\t\t\tfor (e in data.events) {\n\t\t\t\tjQuery.removeEvent(dest, e, data.handle);\n\t\t\t}\n\n\t\t\t// Event data gets referenced instead of copied if the expando gets copied too\n\t\t\tdest.removeAttribute(jQuery.expando);\n\t\t}\n\n\t\t// IE blanks contents when cloning scripts, and tries to evaluate newly-set text\n\t\tif (nodeName === \"script\" && dest.text !== src.text) {\n\t\t\tdisableScript(dest).text = src.text;\n\t\t\trestoreScript(dest);\n\n\t\t\t// IE6-10 improperly clones children of object elements using classid.\n\t\t\t// IE10 throws NoModificationAllowedError if parent is null, #12132.\n\t\t} else if (nodeName === \"object\") {\n\t\t\tif (dest.parentNode) {\n\t\t\t\tdest.outerHTML = src.outerHTML;\n\t\t\t}\n\n\t\t\t// This path appears unavoidable for IE9. When cloning an object\n\t\t\t// element in IE9, the outerHTML strategy above is not sufficient.\n\t\t\t// If the src has innerHTML and the destination does not,\n\t\t\t// copy the src.innerHTML into the dest.innerHTML. #10324\n\t\t\tif (jQuery.support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {\n\t\t\t\tdest.innerHTML = src.innerHTML;\n\t\t\t}\n\t\t} else if (nodeName === \"input\" && manipulation_rcheckableType.test(src.type)) {\n\t\t\t// IE6-8 fails to persist the checked state of a cloned checkbox\n\t\t\t// or radio button. Worse, IE6-7 fail to give the cloned element\n\t\t\t// a checked appearance if the defaultChecked value isn't also set\n\n\t\t\tdest.defaultChecked = dest.checked = src.checked;\n\n\t\t\t// IE6-7 get confused and end up setting the value of a cloned\n\t\t\t// checkbox/radio button to an empty string instead of \"on\"\n\t\t\tif (dest.value !== src.value) {\n\t\t\t\tdest.value = src.value;\n\t\t\t}\n\n\t\t\t// IE6-8 fails to return the selected option to the default selected\n\t\t\t// state when cloning options\n\t\t} else if (nodeName === \"option\") {\n\t\t\tdest.defaultSelected = dest.selected = src.defaultSelected;\n\n\t\t\t// IE6-8 fails to set the defaultValue to the correct value when\n\t\t\t// cloning other types of input fields\n\t\t} else if (nodeName === \"input\" || nodeName === \"textarea\") {\n\t\t\tdest.defaultValue = src.defaultValue;\n\t\t}\n\t}\n\n\tjQuery.each({\n\t\tappendTo: \"append\",\n\t\tprependTo: \"prepend\",\n\t\tinsertBefore: \"before\",\n\t\tinsertAfter: \"after\",\n\t\treplaceAll: \"replaceWith\"\n\t}, function (name, original) {\n\t\tjQuery.fn[name] = function (selector) {\n\t\t\tvar elems,\n\t\t\t    i = 0,\n\t\t\t    ret = [],\n\t\t\t    insert = jQuery(selector),\n\t\t\t    last = insert.length - 1;\n\n\t\t\tfor (; i <= last; i++) {\n\t\t\t\telems = i === last ? this : this.clone(true);\n\t\t\t\tjQuery(insert[i])[original](elems);\n\n\t\t\t\t// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()\n\t\t\t\tcore_push.apply(ret, elems.get());\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\n\tfunction getAll(context, tag) {\n\t\tvar elems,\n\t\t    elem,\n\t\t    i = 0,\n\t\t    found = _typeof(context.getElementsByTagName) !== core_strundefined ? context.getElementsByTagName(tag || \"*\") : _typeof(context.querySelectorAll) !== core_strundefined ? context.querySelectorAll(tag || \"*\") : undefined;\n\n\t\tif (!found) {\n\t\t\tfor (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {\n\t\t\t\tif (!tag || jQuery.nodeName(elem, tag)) {\n\t\t\t\t\tfound.push(elem);\n\t\t\t\t} else {\n\t\t\t\t\tjQuery.merge(found, getAll(elem, tag));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;\n\t}\n\n\t// Used in buildFragment, fixes the defaultChecked property\n\tfunction fixDefaultChecked(elem) {\n\t\tif (manipulation_rcheckableType.test(elem.type)) {\n\t\t\telem.defaultChecked = elem.checked;\n\t\t}\n\t}\n\n\tjQuery.extend({\n\t\tclone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n\t\t\tvar destElements,\n\t\t\t    node,\n\t\t\t    clone,\n\t\t\t    i,\n\t\t\t    srcElements,\n\t\t\t    inPage = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\tif (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test(\"<\" + elem.nodeName + \">\")) {\n\t\t\t\tclone = elem.cloneNode(true);\n\n\t\t\t\t// IE<=8 does not properly clone detached, unknown element nodes\n\t\t\t} else {\n\t\t\t\tfragmentDiv.innerHTML = elem.outerHTML;\n\t\t\t\tfragmentDiv.removeChild(clone = fragmentDiv.firstChild);\n\t\t\t}\n\n\t\t\tif ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n\n\t\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\t\tdestElements = getAll(clone);\n\t\t\t\tsrcElements = getAll(elem);\n\n\t\t\t\t// Fix all IE cloning issues\n\t\t\t\tfor (i = 0; (node = srcElements[i]) != null; ++i) {\n\t\t\t\t\t// Ensure that the destination node is not null; Fixes #9587\n\t\t\t\t\tif (destElements[i]) {\n\t\t\t\t\t\tfixCloneNodeIssues(node, destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Copy the events from the original to the clone\n\t\t\tif (dataAndEvents) {\n\t\t\t\tif (deepDataAndEvents) {\n\t\t\t\t\tsrcElements = srcElements || getAll(elem);\n\t\t\t\t\tdestElements = destElements || getAll(clone);\n\n\t\t\t\t\tfor (i = 0; (node = srcElements[i]) != null; i++) {\n\t\t\t\t\t\tcloneCopyEvent(node, destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcloneCopyEvent(elem, clone);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Preserve script evaluation history\n\t\t\tdestElements = getAll(clone, \"script\");\n\t\t\tif (destElements.length > 0) {\n\t\t\t\tsetGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n\t\t\t}\n\n\t\t\tdestElements = srcElements = node = null;\n\n\t\t\t// Return the cloned set\n\t\t\treturn clone;\n\t\t},\n\n\t\tbuildFragment: function buildFragment(elems, context, scripts, selection) {\n\t\t\tvar j,\n\t\t\t    elem,\n\t\t\t    contains,\n\t\t\t    tmp,\n\t\t\t    tag,\n\t\t\t    tbody,\n\t\t\t    wrap,\n\t\t\t    l = elems.length,\n\n\n\t\t\t// Ensure a safe fragment\n\t\t\tsafe = createSafeFragment(context),\n\t\t\t    nodes = [],\n\t\t\t    i = 0;\n\n\t\t\tfor (; i < l; i++) {\n\t\t\t\telem = elems[i];\n\n\t\t\t\tif (elem || elem === 0) {\n\n\t\t\t\t\t// Add nodes directly\n\t\t\t\t\tif (jQuery.type(elem) === \"object\") {\n\t\t\t\t\t\tjQuery.merge(nodes, elem.nodeType ? [elem] : elem);\n\n\t\t\t\t\t\t// Convert non-html into a text node\n\t\t\t\t\t} else if (!rhtml.test(elem)) {\n\t\t\t\t\t\tnodes.push(context.createTextNode(elem));\n\n\t\t\t\t\t\t// Convert html into DOM nodes\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttmp = tmp || safe.appendChild(context.createElement(\"div\"));\n\n\t\t\t\t\t\t// Deserialize a standard representation\n\t\t\t\t\t\ttag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n\t\t\t\t\t\twrap = wrapMap[tag] || wrapMap._default;\n\n\t\t\t\t\t\ttmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, \"<$1></$2>\") + wrap[2];\n\n\t\t\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\t\t\tj = wrap[0];\n\t\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Manually add leading whitespace removed by IE\n\t\t\t\t\t\tif (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {\n\t\t\t\t\t\t\tnodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remove IE's autoinserted <tbody> from table fragments\n\t\t\t\t\t\tif (!jQuery.support.tbody) {\n\n\t\t\t\t\t\t\t// String was a <table>, *may* have spurious <tbody>\n\t\t\t\t\t\t\telem = tag === \"table\" && !rtbody.test(elem) ? tmp.firstChild :\n\n\t\t\t\t\t\t\t// String was a bare <thead> or <tfoot>\n\t\t\t\t\t\t\twrap[1] === \"<table>\" && !rtbody.test(elem) ? tmp : 0;\n\n\t\t\t\t\t\t\tj = elem && elem.childNodes.length;\n\t\t\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\t\t\tif (jQuery.nodeName(tbody = elem.childNodes[j], \"tbody\") && !tbody.childNodes.length) {\n\t\t\t\t\t\t\t\t\telem.removeChild(tbody);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjQuery.merge(nodes, tmp.childNodes);\n\n\t\t\t\t\t\t// Fix #12392 for WebKit and IE > 9\n\t\t\t\t\t\ttmp.textContent = \"\";\n\n\t\t\t\t\t\t// Fix #12392 for oldIE\n\t\t\t\t\t\twhile (tmp.firstChild) {\n\t\t\t\t\t\t\ttmp.removeChild(tmp.firstChild);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remember the top-level container for proper cleanup\n\t\t\t\t\t\ttmp = safe.lastChild;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fix #11356: Clear elements from fragment\n\t\t\tif (tmp) {\n\t\t\t\tsafe.removeChild(tmp);\n\t\t\t}\n\n\t\t\t// Reset defaultChecked for any radios and checkboxes\n\t\t\t// about to be appended to the DOM in IE 6/7 (#8060)\n\t\t\tif (!jQuery.support.appendChecked) {\n\t\t\t\tjQuery.grep(getAll(nodes, \"input\"), fixDefaultChecked);\n\t\t\t}\n\n\t\t\ti = 0;\n\t\t\twhile (elem = nodes[i++]) {\n\n\t\t\t\t// #4087 - If origin and destination elements are the same, and this is\n\t\t\t\t// that element, do not do anything\n\t\t\t\tif (selection && jQuery.inArray(elem, selection) !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcontains = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t\t// Append to fragment\n\t\t\t\ttmp = getAll(safe.appendChild(elem), \"script\");\n\n\t\t\t\t// Preserve script evaluation history\n\t\t\t\tif (contains) {\n\t\t\t\t\tsetGlobalEval(tmp);\n\t\t\t\t}\n\n\t\t\t\t// Capture executables\n\t\t\t\tif (scripts) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (elem = tmp[j++]) {\n\t\t\t\t\t\tif (rscriptType.test(elem.type || \"\")) {\n\t\t\t\t\t\t\tscripts.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp = null;\n\n\t\t\treturn safe;\n\t\t},\n\n\t\tcleanData: function cleanData(elems, /* internal */acceptData) {\n\t\t\tvar elem,\n\t\t\t    type,\n\t\t\t    id,\n\t\t\t    data,\n\t\t\t    i = 0,\n\t\t\t    internalKey = jQuery.expando,\n\t\t\t    cache = jQuery.cache,\n\t\t\t    deleteExpando = jQuery.support.deleteExpando,\n\t\t\t    special = jQuery.event.special;\n\n\t\t\tfor (; (elem = elems[i]) != null; i++) {\n\n\t\t\t\tif (acceptData || jQuery.acceptData(elem)) {\n\n\t\t\t\t\tid = elem[internalKey];\n\t\t\t\t\tdata = id && cache[id];\n\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tif (data.events) {\n\t\t\t\t\t\t\tfor (type in data.events) {\n\t\t\t\t\t\t\t\tif (special[type]) {\n\t\t\t\t\t\t\t\t\tjQuery.event.remove(elem, type);\n\n\t\t\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.removeEvent(elem, type, data.handle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remove cache only if it was not already removed by jQuery.event.remove\n\t\t\t\t\t\tif (cache[id]) {\n\n\t\t\t\t\t\t\tdelete cache[id];\n\n\t\t\t\t\t\t\t// IE does not allow us to delete expando properties from nodes,\n\t\t\t\t\t\t\t// nor does it have a removeAttribute function on Document nodes;\n\t\t\t\t\t\t\t// we must handle all of these cases\n\t\t\t\t\t\t\tif (deleteExpando) {\n\t\t\t\t\t\t\t\tdelete elem[internalKey];\n\t\t\t\t\t\t\t} else if (_typeof(elem.removeAttribute) !== core_strundefined) {\n\t\t\t\t\t\t\t\telem.removeAttribute(internalKey);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\telem[internalKey] = null;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcore_deletedIds.push(id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tvar iframe,\n\t    getStyles,\n\t    curCSS,\n\t    ralpha = /alpha\\([^)]*\\)/i,\n\t    ropacity = /opacity\\s*=\\s*([^)]*)/,\n\t    rposition = /^(top|right|bottom|left)$/,\n\n\t// swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n\t// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\t    rmargin = /^margin/,\n\t    rnumsplit = new RegExp(\"^(\" + core_pnum + \")(.*)$\", \"i\"),\n\t    rnumnonpx = new RegExp(\"^(\" + core_pnum + \")(?!px)[a-z%]+$\", \"i\"),\n\t    rrelNum = new RegExp(\"^([+-])=(\" + core_pnum + \")\", \"i\"),\n\t    elemdisplay = { BODY: \"block\" },\n\t    cssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\t    cssNormalTransform = {\n\t\tletterSpacing: 0,\n\t\tfontWeight: 400\n\t},\n\t    cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n\t    cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n\n\t// return a css property mapped to a potentially vendor prefixed property\n\tfunction vendorPropName(style, name) {\n\n\t\t// shortcut for names that are not vendor prefixed\n\t\tif (name in style) {\n\t\t\treturn name;\n\t\t}\n\n\t\t// check for vendor prefixed names\n\t\tvar capName = name.charAt(0).toUpperCase() + name.slice(1),\n\t\t    origName = name,\n\t\t    i = cssPrefixes.length;\n\n\t\twhile (i--) {\n\t\t\tname = cssPrefixes[i] + capName;\n\t\t\tif (name in style) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\treturn origName;\n\t}\n\n\tfunction isHidden(elem, el) {\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css(elem, \"display\") === \"none\" || !jQuery.contains(elem.ownerDocument, elem);\n\t}\n\n\tfunction showHide(elements, show) {\n\t\tvar display,\n\t\t    elem,\n\t\t    hidden,\n\t\t    values = [],\n\t\t    index = 0,\n\t\t    length = elements.length;\n\n\t\tfor (; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvalues[index] = jQuery._data(elem, \"olddisplay\");\n\t\t\tdisplay = elem.style.display;\n\t\t\tif (show) {\n\t\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t\t// being hidden by cascaded rules or not\n\t\t\t\tif (!values[index] && display === \"none\") {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\n\t\t\t\t// Set elements which have been overridden with display: none\n\t\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t\t// for such an element\n\t\t\t\tif (elem.style.display === \"\" && isHidden(elem)) {\n\t\t\t\t\tvalues[index] = jQuery._data(elem, \"olddisplay\", css_defaultDisplay(elem.nodeName));\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (!values[index]) {\n\t\t\t\t\thidden = isHidden(elem);\n\n\t\t\t\t\tif (display && display !== \"none\" || !hidden) {\n\t\t\t\t\t\tjQuery._data(elem, \"olddisplay\", hidden ? display : jQuery.css(elem, \"display\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the display of most of the elements in a second loop\n\t\t// to avoid the constant reflow\n\t\tfor (index = 0; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!show || elem.style.display === \"none\" || elem.style.display === \"\") {\n\t\t\t\telem.style.display = show ? values[index] || \"\" : \"none\";\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\tjQuery.fn.extend({\n\t\tcss: function css(name, value) {\n\t\t\treturn jQuery.access(this, function (elem, name, value) {\n\t\t\t\tvar len,\n\t\t\t\t    styles,\n\t\t\t\t    map = {},\n\t\t\t\t    i = 0;\n\n\t\t\t\tif (jQuery.isArray(name)) {\n\t\t\t\t\tstyles = getStyles(elem);\n\t\t\t\t\tlen = name.length;\n\n\t\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t\tmap[name[i]] = jQuery.css(elem, name[i], false, styles);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn map;\n\t\t\t\t}\n\n\t\t\t\treturn value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n\t\t\t}, name, value, arguments.length > 1);\n\t\t},\n\t\tshow: function show() {\n\t\t\treturn showHide(this, true);\n\t\t},\n\t\thide: function hide() {\n\t\t\treturn showHide(this);\n\t\t},\n\t\ttoggle: function toggle(state) {\n\t\t\tvar bool = typeof state === \"boolean\";\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (bool ? state : isHidden(this)) {\n\t\t\t\t\tjQuery(this).show();\n\t\t\t\t} else {\n\t\t\t\t\tjQuery(this).hide();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\t// Add in style property hooks for overriding the default\n\t\t// behavior of getting and setting a style property\n\t\tcssHooks: {\n\t\t\topacity: {\n\t\t\t\tget: function get(elem, computed) {\n\t\t\t\t\tif (computed) {\n\t\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\t\tvar ret = curCSS(elem, \"opacity\");\n\t\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Exclude the following css properties to add px\n\t\tcssNumber: {\n\t\t\t\"columnCount\": true,\n\t\t\t\"fillOpacity\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"lineHeight\": true,\n\t\t\t\"opacity\": true,\n\t\t\t\"orphans\": true,\n\t\t\t\"widows\": true,\n\t\t\t\"zIndex\": true,\n\t\t\t\"zoom\": true\n\t\t},\n\n\t\t// Add in properties whose names you wish to fix before\n\t\t// setting or getting the value\n\t\tcssProps: {\n\t\t\t// normalize float css property\n\t\t\t\"float\": jQuery.support.cssFloat ? \"cssFloat\" : \"styleFloat\"\n\t\t},\n\n\t\t// Get and set the style property on a DOM Node\n\t\tstyle: function style(elem, name, value, extra) {\n\t\t\t// Don't set styles on text and comment nodes\n\t\t\tif (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tvar ret,\n\t\t\t    type,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name),\n\t\t\t    style = elem.style;\n\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));\n\n\t\t\t// gets hook for the prefixed version\n\t\t\t// followed by the unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// Check if we're setting a value\n\t\t\tif (value !== undefined) {\n\t\t\t\ttype = typeof value === \"undefined\" ? \"undefined\" : _typeof(value);\n\n\t\t\t\t// convert relative number strings (+= or -=) to relative numbers. #7345\n\t\t\t\tif (type === \"string\" && (ret = rrelNum.exec(value))) {\n\t\t\t\t\tvalue = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));\n\t\t\t\t\t// Fixes bug #9237\n\t\t\t\t\ttype = \"number\";\n\t\t\t\t}\n\n\t\t\t\t// Make sure that NaN and null values aren't set. See: #7116\n\t\t\t\tif (value == null || type === \"number\" && isNaN(value)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If a number was passed in, add 'px' to the (except for certain CSS properties)\n\t\t\t\tif (type === \"number\" && !jQuery.cssNumber[origName]) {\n\t\t\t\t\tvalue += \"px\";\n\t\t\t\t}\n\n\t\t\t\t// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,\n\t\t\t\t// but it would mean to define eight (for every problematic property) identical functions\n\t\t\t\tif (!jQuery.support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n\t\t\t\t\tstyle[name] = \"inherit\";\n\t\t\t\t}\n\n\t\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n\n\t\t\t\t\t// Wrapped to prevent IE from throwing errors when 'invalid' values are provided\n\t\t\t\t\t// Fixes bug #5509\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstyle[name] = value;\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise just get the value from the style object\n\t\t\t\treturn style[name];\n\t\t\t}\n\t\t},\n\n\t\tcss: function css(elem, name, extra, styles) {\n\t\t\tvar num,\n\t\t\t    val,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name);\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));\n\n\t\t\t// gets hook for the prefixed version\n\t\t\t// followed by the unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// If a hook was provided get the computed value from there\n\t\t\tif (hooks && \"get\" in hooks) {\n\t\t\t\tval = hooks.get(elem, true, extra);\n\t\t\t}\n\n\t\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\t\tif (val === undefined) {\n\t\t\t\tval = curCSS(elem, name, styles);\n\t\t\t}\n\n\t\t\t//convert \"normal\" to computed value\n\t\t\tif (val === \"normal\" && name in cssNormalTransform) {\n\t\t\t\tval = cssNormalTransform[name];\n\t\t\t}\n\n\t\t\t// Return, converting to number if forced or a qualifier was provided and val looks numeric\n\t\t\tif (extra === \"\" || extra) {\n\t\t\t\tnum = parseFloat(val);\n\t\t\t\treturn extra === true || jQuery.isNumeric(num) ? num || 0 : val;\n\t\t\t}\n\t\t\treturn val;\n\t\t},\n\n\t\t// A method for quickly swapping in/out CSS properties to get correct calculations\n\t\tswap: function swap(elem, options, callback, args) {\n\t\t\tvar ret,\n\t\t\t    name,\n\t\t\t    old = {};\n\n\t\t\t// Remember the old values, and insert the new ones\n\t\t\tfor (name in options) {\n\t\t\t\told[name] = elem.style[name];\n\t\t\t\telem.style[name] = options[name];\n\t\t\t}\n\n\t\t\tret = callback.apply(elem, args || []);\n\n\t\t\t// Revert the old values\n\t\t\tfor (name in options) {\n\t\t\t\telem.style[name] = old[name];\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\t});\n\n\t// NOTE: we've included the \"window\" in window.getComputedStyle\n\t// because jsdom on node.js will break without it.\n\tif (window.getComputedStyle) {\n\t\tgetStyles = function getStyles(elem) {\n\t\t\treturn window.getComputedStyle(elem, null);\n\t\t};\n\n\t\tcurCSS = function curCSS(elem, name, _computed) {\n\t\t\tvar width,\n\t\t\t    minWidth,\n\t\t\t    maxWidth,\n\t\t\t    computed = _computed || getStyles(elem),\n\n\n\t\t\t// getPropertyValue is only needed for .css('filter') in IE9, see #12537\n\t\t\tret = computed ? computed.getPropertyValue(name) || computed[name] : undefined,\n\t\t\t    style = elem.style;\n\n\t\t\tif (computed) {\n\n\t\t\t\tif (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\t\tret = jQuery.style(elem, name);\n\t\t\t\t}\n\n\t\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t\t\t// Chrome < 17 and Safari 5.0 uses \"computed value\" instead of \"used value\" for margin-right\n\t\t\t\t// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n\t\t\t\t// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n\t\t\t\tif (rnumnonpx.test(ret) && rmargin.test(name)) {\n\n\t\t\t\t\t// Remember the original values\n\t\t\t\t\twidth = style.width;\n\t\t\t\t\tminWidth = style.minWidth;\n\t\t\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\t\t\tret = computed.width;\n\n\t\t\t\t\t// Revert the changed values\n\t\t\t\t\tstyle.width = width;\n\t\t\t\t\tstyle.minWidth = minWidth;\n\t\t\t\t\tstyle.maxWidth = maxWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t};\n\t} else if (document.documentElement.currentStyle) {\n\t\tgetStyles = function getStyles(elem) {\n\t\t\treturn elem.currentStyle;\n\t\t};\n\n\t\tcurCSS = function curCSS(elem, name, _computed) {\n\t\t\tvar left,\n\t\t\t    rs,\n\t\t\t    rsLeft,\n\t\t\t    computed = _computed || getStyles(elem),\n\t\t\t    ret = computed ? computed[name] : undefined,\n\t\t\t    style = elem.style;\n\n\t\t\t// Avoid setting ret to empty string here\n\t\t\t// so we don't default to auto\n\t\t\tif (ret == null && style && style[name]) {\n\t\t\t\tret = style[name];\n\t\t\t}\n\n\t\t\t// From the awesome hack by Dean Edwards\n\t\t\t// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n\n\t\t\t// If we're not dealing with a regular pixel number\n\t\t\t// but a number that has a weird ending, we need to convert it to pixels\n\t\t\t// but not position css attributes, as those are proportional to the parent element instead\n\t\t\t// and we can't measure the parent instead because it might trigger a \"stacking dolls\" problem\n\t\t\tif (rnumnonpx.test(ret) && !rposition.test(name)) {\n\n\t\t\t\t// Remember the original values\n\t\t\t\tleft = style.left;\n\t\t\t\trs = elem.runtimeStyle;\n\t\t\t\trsLeft = rs && rs.left;\n\n\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\tif (rsLeft) {\n\t\t\t\t\trs.left = elem.currentStyle.left;\n\t\t\t\t}\n\t\t\t\tstyle.left = name === \"fontSize\" ? \"1em\" : ret;\n\t\t\t\tret = style.pixelLeft + \"px\";\n\n\t\t\t\t// Revert the changed values\n\t\t\t\tstyle.left = left;\n\t\t\t\tif (rsLeft) {\n\t\t\t\t\trs.left = rsLeft;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret === \"\" ? \"auto\" : ret;\n\t\t};\n\t}\n\n\tfunction setPositiveNumber(elem, value, subtract) {\n\t\tvar matches = rnumsplit.exec(value);\n\t\treturn matches ?\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max(0, matches[1] - (subtract || 0)) + (matches[2] || \"px\") : value;\n\t}\n\n\tfunction augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n\t\tvar i = extra === (isBorderBox ? \"border\" : \"content\") ?\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\t\t    val = 0;\n\n\t\tfor (; i < 4; i += 2) {\n\t\t\t// both box models exclude margin, so add it if we want it\n\t\t\tif (extra === \"margin\") {\n\t\t\t\tval += jQuery.css(elem, extra + cssExpand[i], true, styles);\n\t\t\t}\n\n\t\t\tif (isBorderBox) {\n\t\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\t\tif (extra === \"content\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\t\t\t\t}\n\n\t\t\t\t// at this point, extra isn't border nor margin, so remove border\n\t\t\t\tif (extra !== \"margin\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// at this point, extra isn't content, so add padding\n\t\t\t\tval += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\n\t\t\t\t// at this point, extra isn't content nor padding, so add border\n\t\t\t\tif (extra !== \"padding\") {\n\t\t\t\t\tval += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tfunction getWidthOrHeight(elem, name, extra) {\n\n\t\t// Start with offset property, which is equivalent to the border-box value\n\t\tvar valueIsBorderBox = true,\n\t\t    val = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\t    styles = getStyles(elem),\n\t\t    isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\";\n\n\t\t// some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\t\tif (val <= 0 || val == null) {\n\t\t\t// Fall back to computed then uncomputed css if necessary\n\t\t\tval = curCSS(elem, name, styles);\n\t\t\tif (val < 0 || val == null) {\n\t\t\t\tval = elem.style[name];\n\t\t\t}\n\n\t\t\t// Computed unit is not pixels. Stop here and return.\n\t\t\tif (rnumnonpx.test(val)) {\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\t// we need the check for style in case a browser which returns unreliable values\n\t\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\t\tvalueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);\n\n\t\t\t// Normalize \"\", auto, and prepare for extra\n\t\t\tval = parseFloat(val) || 0;\n\t\t}\n\n\t\t// use the active box-sizing model to add/subtract irrelevant styles\n\t\treturn val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\n\t}\n\n\t// Try to determine the default display value of an element\n\tfunction css_defaultDisplay(nodeName) {\n\t\tvar doc = document,\n\t\t    display = elemdisplay[nodeName];\n\n\t\tif (!display) {\n\t\t\tdisplay = actualDisplay(nodeName, doc);\n\n\t\t\t// If the simple way fails, read from inside an iframe\n\t\t\tif (display === \"none\" || !display) {\n\t\t\t\t// Use the already-created iframe if possible\n\t\t\t\tiframe = (iframe || jQuery(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\", \"display:block !important\")).appendTo(doc.documentElement);\n\n\t\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\t\tdoc = (iframe[0].contentWindow || iframe[0].contentDocument).document;\n\t\t\t\tdoc.write(\"<!doctype html><html><body>\");\n\t\t\t\tdoc.close();\n\n\t\t\t\tdisplay = actualDisplay(nodeName, doc);\n\t\t\t\tiframe.detach();\n\t\t\t}\n\n\t\t\t// Store the correct default display\n\t\t\telemdisplay[nodeName] = display;\n\t\t}\n\n\t\treturn display;\n\t}\n\n\t// Called ONLY from within css_defaultDisplay\n\tfunction actualDisplay(name, doc) {\n\t\tvar elem = jQuery(doc.createElement(name)).appendTo(doc.body),\n\t\t    display = jQuery.css(elem[0], \"display\");\n\t\telem.remove();\n\t\treturn display;\n\t}\n\n\tjQuery.each([\"height\", \"width\"], function (i, name) {\n\t\tjQuery.cssHooks[name] = {\n\t\t\tget: function get(elem, computed, extra) {\n\t\t\t\tif (computed) {\n\t\t\t\t\t// certain elements can have dimension info if we invisibly show them\n\t\t\t\t\t// however, it must have a current display style that would benefit from this\n\t\t\t\t\treturn elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, \"display\")) ? jQuery.swap(elem, cssShow, function () {\n\t\t\t\t\t\treturn getWidthOrHeight(elem, name, extra);\n\t\t\t\t\t}) : getWidthOrHeight(elem, name, extra);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset: function set(elem, value, extra) {\n\t\t\t\tvar styles = extra && getStyles(elem);\n\t\t\t\treturn setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles) : 0);\n\t\t\t}\n\t\t};\n\t});\n\n\tif (!jQuery.support.opacity) {\n\t\tjQuery.cssHooks.opacity = {\n\t\t\tget: function get(elem, computed) {\n\t\t\t\t// IE uses filters for opacity\n\t\t\t\treturn ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || \"\") ? 0.01 * parseFloat(RegExp.$1) + \"\" : computed ? \"1\" : \"\";\n\t\t\t},\n\n\t\t\tset: function set(elem, value) {\n\t\t\t\tvar style = elem.style,\n\t\t\t\t    currentStyle = elem.currentStyle,\n\t\t\t\t    opacity = jQuery.isNumeric(value) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",\n\t\t\t\t    filter = currentStyle && currentStyle.filter || style.filter || \"\";\n\n\t\t\t\t// IE has trouble with opacity if it does not have layout\n\t\t\t\t// Force it by setting the zoom level\n\t\t\t\tstyle.zoom = 1;\n\n\t\t\t\t// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652\n\t\t\t\t// if value === \"\", then remove inline opacity #12685\n\t\t\t\tif ((value >= 1 || value === \"\") && jQuery.trim(filter.replace(ralpha, \"\")) === \"\" && style.removeAttribute) {\n\n\t\t\t\t\t// Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText\n\t\t\t\t\t// if \"filter:\" is present at all, clearType is disabled, we want to avoid this\n\t\t\t\t\t// style.removeAttribute is IE Only, but so apparently is this code path...\n\t\t\t\t\tstyle.removeAttribute(\"filter\");\n\n\t\t\t\t\t// if there is no filter style applied in a css rule or unset inline opacity, we are done\n\t\t\t\t\tif (value === \"\" || currentStyle && !currentStyle.filter) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// otherwise, set new filter values\n\t\t\t\tstyle.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + \" \" + opacity;\n\t\t\t}\n\t\t};\n\t}\n\n\t// These hooks cannot be added until DOM ready because the support test\n\t// for it is not run until after DOM ready\n\tjQuery(function () {\n\t\tif (!jQuery.support.reliableMarginRight) {\n\t\t\tjQuery.cssHooks.marginRight = {\n\t\t\t\tget: function get(elem, computed) {\n\t\t\t\t\tif (computed) {\n\t\t\t\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t\t\t\t// Work around by temporarily setting element display to inline-block\n\t\t\t\t\t\treturn jQuery.swap(elem, { \"display\": \"inline-block\" }, curCSS, [elem, \"marginRight\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n\t\t// getComputedStyle returns percent when specified for top/left/bottom/right\n\t\t// rather than make the css module depend on the offset module, we just check for it here\n\t\tif (!jQuery.support.pixelPosition && jQuery.fn.position) {\n\t\t\tjQuery.each([\"top\", \"left\"], function (i, prop) {\n\t\t\t\tjQuery.cssHooks[prop] = {\n\t\t\t\t\tget: function get(elem, computed) {\n\t\t\t\t\t\tif (computed) {\n\t\t\t\t\t\t\tcomputed = curCSS(elem, prop);\n\t\t\t\t\t\t\t// if curCSS returns percentage, fallback to offset\n\t\t\t\t\t\t\treturn rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t});\n\n\tif (jQuery.expr && jQuery.expr.filters) {\n\t\tjQuery.expr.filters.hidden = function (elem) {\n\t\t\t// Support: Opera <= 12.12\n\t\t\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\t\t\treturn elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !jQuery.support.reliableHiddenOffsets && (elem.style && elem.style.display || jQuery.css(elem, \"display\")) === \"none\";\n\t\t};\n\n\t\tjQuery.expr.filters.visible = function (elem) {\n\t\t\treturn !jQuery.expr.filters.hidden(elem);\n\t\t};\n\t}\n\n\t// These hooks are used by animate to expand properties\n\tjQuery.each({\n\t\tmargin: \"\",\n\t\tpadding: \"\",\n\t\tborder: \"Width\"\n\t}, function (prefix, suffix) {\n\t\tjQuery.cssHooks[prefix + suffix] = {\n\t\t\texpand: function expand(value) {\n\t\t\t\tvar i = 0,\n\t\t\t\t    expanded = {},\n\n\n\t\t\t\t// assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n\t\t\t\tfor (; i < 4; i++) {\n\t\t\t\t\texpanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n\t\t\t\t}\n\n\t\t\t\treturn expanded;\n\t\t\t}\n\t\t};\n\n\t\tif (!rmargin.test(prefix)) {\n\t\t\tjQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n\t\t}\n\t});\n\tvar r20 = /%20/g,\n\t    rbracket = /\\[\\]$/,\n\t    rCRLF = /\\r?\\n/g,\n\t    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\t    rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n\tjQuery.fn.extend({\n\t\tserialize: function serialize() {\n\t\t\treturn jQuery.param(this.serializeArray());\n\t\t},\n\t\tserializeArray: function serializeArray() {\n\t\t\treturn this.map(function () {\n\t\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\t\tvar elements = jQuery.prop(this, \"elements\");\n\t\t\t\treturn elements ? jQuery.makeArray(elements) : this;\n\t\t\t}).filter(function () {\n\t\t\t\tvar type = this.type;\n\t\t\t\t// Use .is(\":disabled\") so that fieldset[disabled] works\n\t\t\t\treturn this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));\n\t\t\t}).map(function (i, elem) {\n\t\t\t\tvar val = jQuery(this).val();\n\n\t\t\t\treturn val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t\t}) : { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t}).get();\n\t\t}\n\t});\n\n\t//Serialize an array of form elements or a set of\n\t//key/values into a query string\n\tjQuery.param = function (a, traditional) {\n\t\tvar prefix,\n\t\t    s = [],\n\t\t    add = function add(key, value) {\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction(value) ? value() : value == null ? \"\" : value;\n\t\t\ts[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n\t\t};\n\n\t\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\t\tif (traditional === undefined) {\n\t\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t\t}\n\n\t\t// If an array was passed in, assume that it is an array of form elements.\n\t\tif (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n\t\t\t// Serialize the form elements\n\t\t\tjQuery.each(a, function () {\n\t\t\t\tadd(this.name, this.value);\n\t\t\t});\n\t\t} else {\n\t\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t\t// did it), otherwise encode params recursively.\n\t\t\tfor (prefix in a) {\n\t\t\t\tbuildParams(prefix, a[prefix], traditional, add);\n\t\t\t}\n\t\t}\n\n\t\t// Return the resulting serialization\n\t\treturn s.join(\"&\").replace(r20, \"+\");\n\t};\n\n\tfunction buildParams(prefix, obj, traditional, add) {\n\t\tvar name;\n\n\t\tif (jQuery.isArray(obj)) {\n\t\t\t// Serialize array item.\n\t\t\tjQuery.each(obj, function (i, v) {\n\t\t\t\tif (traditional || rbracket.test(prefix)) {\n\t\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\t\tadd(prefix, v);\n\t\t\t\t} else {\n\t\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\t\tbuildParams(prefix + \"[\" + ((typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) === \"object\" ? i : \"\") + \"]\", v, traditional, add);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!traditional && jQuery.type(obj) === \"object\") {\n\t\t\t// Serialize object item.\n\t\t\tfor (name in obj) {\n\t\t\t\tbuildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n\t\t\t}\n\t\t} else {\n\t\t\t// Serialize scalar item.\n\t\t\tadd(prefix, obj);\n\t\t}\n\t}\n\tjQuery.each((\"blur focus focusin focusout load resize scroll unload click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function (i, name) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[name] = function (data, fn) {\n\t\t\treturn arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n\t\t};\n\t});\n\n\tjQuery.fn.hover = function (fnOver, fnOut) {\n\t\treturn this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n\t};\n\tvar\n\t// Document location\n\tajaxLocParts,\n\t    ajaxLocation,\n\t    ajax_nonce = jQuery.now(),\n\t    ajax_rquery = /\\?/,\n\t    rhash = /#.*$/,\n\t    rts = /([?&])_=[^&]*/,\n\t    rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg,\n\t    // IE leaves an \\r character at EOL\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\t    rnoContent = /^(?:GET|HEAD)$/,\n\t    rprotocol = /^\\/\\//,\n\t    rurl = /^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n\n\t// Keep a copy of the old load method\n\t_load = jQuery.fn.load,\n\n\n\t/* Prefilters\n  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n  * 2) These are called:\n  *    - BEFORE asking for a transport\n  *    - AFTER param serialization (s.data is a string if s.processData is true)\n  * 3) key is the dataType\n  * 4) the catchall symbol \"*\" can be used\n  * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n  */\n\tprefilters = {},\n\n\n\t/* Transports bindings\n  * 1) key is the dataType\n  * 2) the catchall symbol \"*\" can be used\n  * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n  */\n\ttransports = {},\n\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat(\"*\");\n\n\t// #8138, IE may throw an exception when accessing\n\t// a field from window.location if document.domain has been set\n\ttry {\n\t\tajaxLocation = location.href;\n\t} catch (e) {\n\t\t// Use the href attribute of an A element\n\t\t// since IE will modify it given document.location\n\t\tajaxLocation = document.createElement(\"a\");\n\t\tajaxLocation.href = \"\";\n\t\tajaxLocation = ajaxLocation.href;\n\t}\n\n\t// Segment location into parts\n\tajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];\n\n\t// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\tfunction addToPrefiltersOrTransports(structure) {\n\n\t\t// dataTypeExpression is optional and defaults to \"*\"\n\t\treturn function (dataTypeExpression, func) {\n\n\t\t\tif (typeof dataTypeExpression !== \"string\") {\n\t\t\t\tfunc = dataTypeExpression;\n\t\t\t\tdataTypeExpression = \"*\";\n\t\t\t}\n\n\t\t\tvar dataType,\n\t\t\t    i = 0,\n\t\t\t    dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];\n\n\t\t\tif (jQuery.isFunction(func)) {\n\t\t\t\t// For each dataType in the dataTypeExpression\n\t\t\t\twhile (dataType = dataTypes[i++]) {\n\t\t\t\t\t// Prepend if requested\n\t\t\t\t\tif (dataType[0] === \"+\") {\n\t\t\t\t\t\tdataType = dataType.slice(1) || \"*\";\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).unshift(func);\n\n\t\t\t\t\t\t// Otherwise append\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).push(func);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// Base inspection function for prefilters and transports\n\tfunction inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n\n\t\tvar inspected = {},\n\t\t    seekingTransport = structure === transports;\n\n\t\tfunction inspect(dataType) {\n\t\t\tvar selected;\n\t\t\tinspected[dataType] = true;\n\t\t\tjQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n\t\t\t\tvar dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\t\t\t\tif (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n\t\t\t\t\toptions.dataTypes.unshift(dataTypeOrTransport);\n\t\t\t\t\tinspect(dataTypeOrTransport);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (seekingTransport) {\n\t\t\t\t\treturn !(selected = dataTypeOrTransport);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn selected;\n\t\t}\n\n\t\treturn inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n\t}\n\n\t// A special extend for ajax options\n\t// that takes \"flat\" options (not to be deep extended)\n\t// Fixes #9887\n\tfunction ajaxExtend(target, src) {\n\t\tvar deep,\n\t\t    key,\n\t\t    flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\t\tfor (key in src) {\n\t\t\tif (src[key] !== undefined) {\n\t\t\t\t(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n\t\t\t}\n\t\t}\n\t\tif (deep) {\n\t\t\tjQuery.extend(true, target, deep);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tjQuery.fn.load = function (url, params, callback) {\n\t\tif (typeof url !== \"string\" && _load) {\n\t\t\treturn _load.apply(this, arguments);\n\t\t}\n\n\t\tvar selector,\n\t\t    response,\n\t\t    type,\n\t\t    self = this,\n\t\t    off = url.indexOf(\" \");\n\n\t\tif (off >= 0) {\n\t\t\tselector = url.slice(off, url.length);\n\t\t\turl = url.slice(0, off);\n\t\t}\n\n\t\t// If it's a function\n\t\tif (jQuery.isFunction(params)) {\n\n\t\t\t// We assume that it's the callback\n\t\t\tcallback = params;\n\t\t\tparams = undefined;\n\n\t\t\t// Otherwise, build a param string\n\t\t} else if (params && (typeof params === \"undefined\" ? \"undefined\" : _typeof(params)) === \"object\") {\n\t\t\ttype = \"POST\";\n\t\t}\n\n\t\t// If we have elements to modify, make the request\n\t\tif (self.length > 0) {\n\t\t\tjQuery.ajax({\n\t\t\t\turl: url,\n\n\t\t\t\t// if \"type\" variable is undefined, then \"GET\" method will be used\n\t\t\t\ttype: type,\n\t\t\t\tdataType: \"html\",\n\t\t\t\tdata: params\n\t\t\t}).done(function (responseText) {\n\n\t\t\t\t// Save response for use in complete callback\n\t\t\t\tresponse = arguments;\n\n\t\t\t\tself.html(selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText);\n\t\t\t}).complete(callback && function (jqXHR, status) {\n\t\t\t\tself.each(callback, response || [jqXHR.responseText, status, jqXHR]);\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t// Attach a bunch of functions for handling common AJAX events\n\tjQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n\t\tjQuery.fn[type] = function (fn) {\n\t\t\treturn this.on(type, fn);\n\t\t};\n\t});\n\n\tjQuery.each([\"get\", \"post\"], function (i, method) {\n\t\tjQuery[method] = function (url, data, callback, type) {\n\t\t\t// shift arguments if data argument was omitted\n\t\t\tif (jQuery.isFunction(data)) {\n\t\t\t\ttype = type || callback;\n\t\t\t\tcallback = data;\n\t\t\t\tdata = undefined;\n\t\t\t}\n\n\t\t\treturn jQuery.ajax({\n\t\t\t\turl: url,\n\t\t\t\ttype: method,\n\t\t\t\tdataType: type,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: callback\n\t\t\t});\n\t\t};\n\t});\n\n\tjQuery.extend({\n\n\t\t// Counter for holding the number of active queries\n\t\tactive: 0,\n\n\t\t// Last-Modified header cache for next request\n\t\tlastModified: {},\n\t\tetag: {},\n\n\t\tajaxSettings: {\n\t\t\turl: ajaxLocation,\n\t\t\ttype: \"GET\",\n\t\t\tisLocal: rlocalProtocol.test(ajaxLocParts[1]),\n\t\t\tglobal: true,\n\t\t\tprocessData: true,\n\t\t\tasync: true,\n\t\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t\t/*\n   timeout: 0,\n   data: null,\n   dataType: null,\n   username: null,\n   password: null,\n   cache: null,\n   throws: false,\n   traditional: false,\n   headers: {},\n   */\n\n\t\t\taccepts: {\n\t\t\t\t\"*\": allTypes,\n\t\t\t\ttext: \"text/plain\",\n\t\t\t\thtml: \"text/html\",\n\t\t\t\txml: \"application/xml, text/xml\",\n\t\t\t\tjson: \"application/json, text/javascript\"\n\t\t\t},\n\n\t\t\tcontents: {\n\t\t\t\txml: /xml/,\n\t\t\t\thtml: /html/,\n\t\t\t\tjson: /json/\n\t\t\t},\n\n\t\t\tresponseFields: {\n\t\t\t\txml: \"responseXML\",\n\t\t\t\ttext: \"responseText\"\n\t\t\t},\n\n\t\t\t// Data converters\n\t\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\t\tconverters: {\n\n\t\t\t\t// Convert anything to text\n\t\t\t\t\"* text\": window.String,\n\n\t\t\t\t// Text to html (true = no transformation)\n\t\t\t\t\"text html\": true,\n\n\t\t\t\t// Evaluate text as a json expression\n\t\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t\t// Parse text as xml\n\t\t\t\t\"text xml\": jQuery.parseXML\n\t\t\t},\n\n\t\t\t// For options that shouldn't be deep extended:\n\t\t\t// you can add your own custom options here if\n\t\t\t// and when you create one that shouldn't be\n\t\t\t// deep extended (see ajaxExtend)\n\t\t\tflatOptions: {\n\t\t\t\turl: true,\n\t\t\t\tcontext: true\n\t\t\t}\n\t\t},\n\n\t\t// Creates a full fledged settings object into target\n\t\t// with both ajaxSettings and settings fields.\n\t\t// If target is omitted, writes into ajaxSettings.\n\t\tajaxSetup: function ajaxSetup(target, settings) {\n\t\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend(jQuery.ajaxSettings, target);\n\t\t},\n\n\t\tajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n\t\tajaxTransport: addToPrefiltersOrTransports(transports),\n\n\t\t// Main method\n\t\tajax: function ajax(url, options) {\n\n\t\t\t// If url is an object, simulate pre-1.5 signature\n\t\t\tif ((typeof url === \"undefined\" ? \"undefined\" : _typeof(url)) === \"object\") {\n\t\t\t\toptions = url;\n\t\t\t\turl = undefined;\n\t\t\t}\n\n\t\t\t// Force options to be an object\n\t\t\toptions = options || {};\n\n\t\t\tvar // Cross-domain detection vars\n\t\t\tparts,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers as string\n\t\t\tresponseHeadersString,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\t\t\t    transport,\n\n\t\t\t// Response headers\n\t\t\tresponseHeaders,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup({}, options),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\t    completeDeferred = jQuery.Callbacks(\"once memory\"),\n\n\t\t\t// Status-dependent callbacks\n\t\t\t_statusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\t    requestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function getResponseHeader(key) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif (state === 2) {\n\t\t\t\t\t\tif (!responseHeaders) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile (match = rheaders.exec(responseHeadersString)) {\n\t\t\t\t\t\t\t\tresponseHeaders[match[1].toLowerCase()] = match[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[key.toLowerCase()];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function getAllResponseHeaders() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function setRequestHeader(name, value) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\tname = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\n\t\t\t\t\t\trequestHeaders[name] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function overrideMimeType(type) {\n\t\t\t\t\tif (!state) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function statusCode(map) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif (map) {\n\t\t\t\t\t\tif (state < 2) {\n\t\t\t\t\t\t\tfor (code in map) {\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\t_statusCode[code] = [_statusCode[code], map[code]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always(map[jqXHR.status]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function abort(statusText) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif (transport) {\n\t\t\t\t\t\ttransport.abort(finalText);\n\t\t\t\t\t}\n\t\t\t\t\tdone(0, finalText);\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Attach deferreds\n\t\t\tdeferred.promise(jqXHR).complete = completeDeferred.add;\n\t\t\tjqXHR.success = jqXHR.done;\n\t\t\tjqXHR.error = jqXHR.fail;\n\n\t\t\t// Remove hash character (#7531: and string promotion)\n\t\t\t// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\n\t\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t\t// We also use the url parameter if available\n\t\t\ts.url = ((url || s.url || ajaxLocation) + \"\").replace(rhash, \"\").replace(rprotocol, ajaxLocParts[1] + \"//\");\n\n\t\t\t// Alias method option to type as per ticket #12004\n\t\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t\t// Extract dataTypes list\n\t\t\ts.dataTypes = jQuery.trim(s.dataType || \"*\").toLowerCase().match(core_rnotwhite) || [\"\"];\n\n\t\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch\n\t\t\tif (s.crossDomain == null) {\n\t\t\t\tparts = rurl.exec(s.url.toLowerCase());\n\t\t\t\ts.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === \"http:\" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? 80 : 443))));\n\t\t\t}\n\n\t\t\t// Convert data if not already a string\n\t\t\tif (s.data && s.processData && typeof s.data !== \"string\") {\n\t\t\t\ts.data = jQuery.param(s.data, s.traditional);\n\t\t\t}\n\n\t\t\t// Apply prefilters\n\t\t\tinspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n\t\t\t// If request was aborted inside a prefilter, stop there\n\t\t\tif (state === 2) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// We can fire global events as of now if asked to\n\t\t\tfireGlobals = s.global;\n\n\t\t\t// Watch for a new set of requests\n\t\t\tif (fireGlobals && jQuery.active++ === 0) {\n\t\t\t\tjQuery.event.trigger(\"ajaxStart\");\n\t\t\t}\n\n\t\t\t// Uppercase the type\n\t\t\ts.type = s.type.toUpperCase();\n\n\t\t\t// Determine if request has content\n\t\t\ts.hasContent = !rnoContent.test(s.type);\n\n\t\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t\t// and/or If-None-Match header later on\n\t\t\tcacheURL = s.url;\n\n\t\t\t// More options handling for requests with no content\n\t\t\tif (!s.hasContent) {\n\n\t\t\t\t// If data is available, append data to url\n\t\t\t\tif (s.data) {\n\t\t\t\t\tcacheURL = s.url += (ajax_rquery.test(cacheURL) ? \"&\" : \"?\") + s.data;\n\t\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\t\tdelete s.data;\n\t\t\t\t}\n\n\t\t\t\t// Add anti-cache in url if needed\n\t\t\t\tif (s.cache === false) {\n\t\t\t\t\ts.url = rts.test(cacheURL) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace(rts, \"$1_=\" + ajax_nonce++) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + (ajax_rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + ajax_nonce++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\tif (s.ifModified) {\n\t\t\t\tif (jQuery.lastModified[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n\t\t\t\t}\n\t\t\t\tif (jQuery.etag[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the correct header, if data is being sent\n\t\t\tif (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n\t\t\t\tjqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n\t\t\t}\n\n\t\t\t// Set the Accepts header for the server, depending on the dataType\n\t\t\tjqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]);\n\n\t\t\t// Check for headers option\n\t\t\tfor (i in s.headers) {\n\t\t\t\tjqXHR.setRequestHeader(i, s.headers[i]);\n\t\t\t}\n\n\t\t\t// Allow custom headers/mimetypes and early abort\n\t\t\tif (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\n\t\t\t\t// Abort if not done already and return\n\t\t\t\treturn jqXHR.abort();\n\t\t\t}\n\n\t\t\t// aborting is no longer a cancellation\n\t\t\tstrAbort = \"abort\";\n\n\t\t\t// Install callbacks on deferreds\n\t\t\tfor (i in { success: 1, error: 1, complete: 1 }) {\n\t\t\t\tjqXHR[i](s[i]);\n\t\t\t}\n\n\t\t\t// Get transport\n\t\t\ttransport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n\t\t\t// If no transport, we auto-abort\n\t\t\tif (!transport) {\n\t\t\t\tdone(-1, \"No Transport\");\n\t\t\t} else {\n\t\t\t\tjqXHR.readyState = 1;\n\n\t\t\t\t// Send global event\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n\t\t\t\t}\n\t\t\t\t// Timeout\n\t\t\t\tif (s.async && s.timeout > 0) {\n\t\t\t\t\ttimeoutTimer = setTimeout(function () {\n\t\t\t\t\t\tjqXHR.abort(\"timeout\");\n\t\t\t\t\t}, s.timeout);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tstate = 1;\n\t\t\t\t\ttransport.send(requestHeaders, done);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Propagate exception as error if not done\n\t\t\t\t\tif (state < 2) {\n\t\t\t\t\t\tdone(-1, e);\n\t\t\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Callback for when everything is done\n\t\t\tfunction done(status, nativeStatusText, responses, headers) {\n\t\t\t\tvar isSuccess,\n\t\t\t\t    success,\n\t\t\t\t    error,\n\t\t\t\t    response,\n\t\t\t\t    modified,\n\t\t\t\t    statusText = nativeStatusText;\n\n\t\t\t\t// Called once\n\t\t\t\tif (state === 2) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// State is \"done\" now\n\t\t\t\tstate = 2;\n\n\t\t\t\t// Clear timeout if it exists\n\t\t\t\tif (timeoutTimer) {\n\t\t\t\t\tclearTimeout(timeoutTimer);\n\t\t\t\t}\n\n\t\t\t\t// Dereference transport for early garbage collection\n\t\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\t\ttransport = undefined;\n\n\t\t\t\t// Cache response headers\n\t\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t\t// Set readyState\n\t\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t\t// Get response data\n\t\t\t\tif (responses) {\n\t\t\t\t\tresponse = ajaxHandleResponses(s, jqXHR, responses);\n\t\t\t\t}\n\n\t\t\t\t// If successful, handle type chaining\n\t\t\t\tif (status >= 200 && status < 300 || status === 304) {\n\n\t\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\t\tif (s.ifModified) {\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.lastModified[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.etag[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if no content\n\t\t\t\t\tif (status === 204) {\n\t\t\t\t\t\tisSuccess = true;\n\t\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t\t\t// if not modified\n\t\t\t\t\t} else if (status === 304) {\n\t\t\t\t\t\tisSuccess = true;\n\t\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t\t\t// If we have data, let's convert it\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisSuccess = ajaxConvert(s, response);\n\t\t\t\t\t\tstatusText = isSuccess.state;\n\t\t\t\t\t\tsuccess = isSuccess.data;\n\t\t\t\t\t\terror = isSuccess.error;\n\t\t\t\t\t\tisSuccess = !error;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// We extract error from statusText\n\t\t\t\t\t// then normalize statusText and status for non-aborts\n\t\t\t\t\terror = statusText;\n\t\t\t\t\tif (status || !statusText) {\n\t\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\t\tif (status < 0) {\n\t\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set data for the fake xhr object\n\t\t\t\tjqXHR.status = status;\n\t\t\t\tjqXHR.statusText = (nativeStatusText || statusText) + \"\";\n\n\t\t\t\t// Success/Error\n\t\t\t\tif (isSuccess) {\n\t\t\t\t\tdeferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n\t\t\t\t}\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tjqXHR.statusCode(_statusCode);\n\t\t\t\t_statusCode = undefined;\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n\t\t\t\t}\n\n\t\t\t\t// Complete\n\t\t\t\tcompleteDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\n\t\t\t\t\t// Handle the global AJAX counter\n\t\t\t\t\tif (! --jQuery.active) {\n\t\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jqXHR;\n\t\t},\n\n\t\tgetScript: function getScript(url, callback) {\n\t\t\treturn jQuery.get(url, undefined, callback, \"script\");\n\t\t},\n\n\t\tgetJSON: function getJSON(url, data, callback) {\n\t\t\treturn jQuery.get(url, data, callback, \"json\");\n\t\t}\n\t});\n\n\t/* Handles responses to an ajax request:\n  * - sets all responseXXX fields accordingly\n  * - finds the right dataType (mediates between content-type and expected dataType)\n  * - returns the corresponding response\n  */\n\tfunction ajaxHandleResponses(s, jqXHR, responses) {\n\t\tvar firstDataType,\n\t\t    ct,\n\t\t    finalDataType,\n\t\t    type,\n\t\t    contents = s.contents,\n\t\t    dataTypes = s.dataTypes,\n\t\t    responseFields = s.responseFields;\n\n\t\t// Fill responseXXX fields\n\t\tfor (type in responseFields) {\n\t\t\tif (type in responses) {\n\t\t\t\tjqXHR[responseFields[type]] = responses[type];\n\t\t\t}\n\t\t}\n\n\t\t// Remove auto dataType and get content-type in the process\n\t\twhile (dataTypes[0] === \"*\") {\n\t\t\tdataTypes.shift();\n\t\t\tif (ct === undefined) {\n\t\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n\t\t\t}\n\t\t}\n\n\t\t// Check if we're dealing with a known content-type\n\t\tif (ct) {\n\t\t\tfor (type in contents) {\n\t\t\t\tif (contents[type] && contents[type].test(ct)) {\n\t\t\t\t\tdataTypes.unshift(type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check to see if we have a response for the expected dataType\n\t\tif (dataTypes[0] in responses) {\n\t\t\tfinalDataType = dataTypes[0];\n\t\t} else {\n\t\t\t// Try convertible dataTypes\n\t\t\tfor (type in responses) {\n\t\t\t\tif (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n\t\t\t\t\tfinalDataType = type;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!firstDataType) {\n\t\t\t\t\tfirstDataType = type;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Or just use first one\n\t\t\tfinalDataType = finalDataType || firstDataType;\n\t\t}\n\n\t\t// If we found a dataType\n\t\t// We add the dataType to the list if needed\n\t\t// and return the corresponding response\n\t\tif (finalDataType) {\n\t\t\tif (finalDataType !== dataTypes[0]) {\n\t\t\t\tdataTypes.unshift(finalDataType);\n\t\t\t}\n\t\t\treturn responses[finalDataType];\n\t\t}\n\t}\n\n\t// Chain conversions given the request and the original response\n\tfunction ajaxConvert(s, response) {\n\t\tvar conv2,\n\t\t    current,\n\t\t    conv,\n\t\t    tmp,\n\t\t    converters = {},\n\t\t    i = 0,\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice(),\n\t\t    prev = dataTypes[0];\n\n\t\t// Apply the dataFilter if provided\n\t\tif (s.dataFilter) {\n\t\t\tresponse = s.dataFilter(response, s.dataType);\n\t\t}\n\n\t\t// Create converters map with lowercased keys\n\t\tif (dataTypes[1]) {\n\t\t\tfor (conv in s.converters) {\n\t\t\t\tconverters[conv.toLowerCase()] = s.converters[conv];\n\t\t\t}\n\t\t}\n\n\t\t// Convert to each sequential dataType, tolerating list modification\n\t\tfor (; current = dataTypes[++i];) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif (current !== \"*\") {\n\n\t\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t\tif (prev !== \"*\" && prev !== current) {\n\n\t\t\t\t\t// Seek a direct converter\n\t\t\t\t\tconv = converters[prev + \" \" + current] || converters[\"* \" + current];\n\n\t\t\t\t\t// If none found, seek a pair\n\t\t\t\t\tif (!conv) {\n\t\t\t\t\t\tfor (conv2 in converters) {\n\n\t\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\t\ttmp = conv2.split(\" \");\n\t\t\t\t\t\t\tif (tmp[1] === current) {\n\n\t\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\t\tconv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\t\t\t\t\t\t\t\tif (conv) {\n\t\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\t\tif (conv === true) {\n\t\t\t\t\t\t\t\t\t\tconv = converters[conv2];\n\n\t\t\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t\t} else if (converters[conv2] !== true) {\n\t\t\t\t\t\t\t\t\t\tcurrent = tmp[0];\n\t\t\t\t\t\t\t\t\t\tdataTypes.splice(i--, 0, current);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\t\tif (conv !== true) {\n\n\t\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\t\tif (conv && s[\"throws\"]) {\n\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update prev for next iteration\n\t\t\t\tprev = current;\n\t\t\t}\n\t\t}\n\n\t\treturn { state: \"success\", data: response };\n\t}\n\t// Install script dataType\n\tjQuery.ajaxSetup({\n\t\taccepts: {\n\t\t\tscript: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n\t\t},\n\t\tcontents: {\n\t\t\tscript: /(?:java|ecma)script/\n\t\t},\n\t\tconverters: {\n\t\t\t\"text script\": function textScript(text) {\n\t\t\t\tjQuery.globalEval(text);\n\t\t\t\treturn text;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Handle cache's special case and global\n\tjQuery.ajaxPrefilter(\"script\", function (s) {\n\t\tif (s.cache === undefined) {\n\t\t\ts.cache = false;\n\t\t}\n\t\tif (s.crossDomain) {\n\t\t\ts.type = \"GET\";\n\t\t\ts.global = false;\n\t\t}\n\t});\n\n\t// Bind script tag hack transport\n\tjQuery.ajaxTransport(\"script\", function (s) {\n\n\t\t// This transport only deals with cross domain requests\n\t\tif (s.crossDomain) {\n\n\t\t\tvar script,\n\t\t\t    head = document.head || jQuery(\"head\")[0] || document.documentElement;\n\n\t\t\treturn {\n\n\t\t\t\tsend: function send(_, callback) {\n\n\t\t\t\t\tscript = document.createElement(\"script\");\n\n\t\t\t\t\tscript.async = true;\n\n\t\t\t\t\tif (s.scriptCharset) {\n\t\t\t\t\t\tscript.charset = s.scriptCharset;\n\t\t\t\t\t}\n\n\t\t\t\t\tscript.src = s.url;\n\n\t\t\t\t\t// Attach handlers for all browsers\n\t\t\t\t\tscript.onload = script.onreadystatechange = function (_, isAbort) {\n\n\t\t\t\t\t\tif (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n\n\t\t\t\t\t\t\t// Handle memory leak in IE\n\t\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;\n\n\t\t\t\t\t\t\t// Remove the script\n\t\t\t\t\t\t\tif (script.parentNode) {\n\t\t\t\t\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Dereference the script\n\t\t\t\t\t\t\tscript = null;\n\n\t\t\t\t\t\t\t// Callback if not abort\n\t\t\t\t\t\t\tif (!isAbort) {\n\t\t\t\t\t\t\t\tcallback(200, \"success\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n\t\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\t\thead.insertBefore(script, head.firstChild);\n\t\t\t\t},\n\n\t\t\t\tabort: function abort() {\n\t\t\t\t\tif (script) {\n\t\t\t\t\t\tscript.onload(undefined, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\tvar oldCallbacks = [],\n\t    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n\t// Default jsonp settings\n\tjQuery.ajaxSetup({\n\t\tjsonp: \"callback\",\n\t\tjsonpCallback: function jsonpCallback() {\n\t\t\tvar callback = oldCallbacks.pop() || jQuery.expando + \"_\" + ajax_nonce++;\n\t\t\tthis[callback] = true;\n\t\t\treturn callback;\n\t\t}\n\t});\n\n\t// Detect, normalize options and install callbacks for jsonp requests\n\tjQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n\n\t\tvar callbackName,\n\t\t    overwritten,\n\t\t    responseContainer,\n\t\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(s.data) && \"data\");\n\n\t\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\t\tif (jsonProp || s.dataTypes[0] === \"jsonp\") {\n\n\t\t\t// Get callback name, remembering preexisting value associated with it\n\t\t\tcallbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n\t\t\t// Insert callback into url or form data\n\t\t\tif (jsonProp) {\n\t\t\t\ts[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n\t\t\t} else if (s.jsonp !== false) {\n\t\t\t\ts.url += (ajax_rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n\t\t\t}\n\n\t\t\t// Use data converter to retrieve json after script execution\n\t\t\ts.converters[\"script json\"] = function () {\n\t\t\t\tif (!responseContainer) {\n\t\t\t\t\tjQuery.error(callbackName + \" was not called\");\n\t\t\t\t}\n\t\t\t\treturn responseContainer[0];\n\t\t\t};\n\n\t\t\t// force json dataType\n\t\t\ts.dataTypes[0] = \"json\";\n\n\t\t\t// Install callback\n\t\t\toverwritten = window[callbackName];\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tresponseContainer = arguments;\n\t\t\t};\n\n\t\t\t// Clean-up function (fires after converters)\n\t\t\tjqXHR.always(function () {\n\t\t\t\t// Restore preexisting value\n\t\t\t\twindow[callbackName] = overwritten;\n\n\t\t\t\t// Save back as free\n\t\t\t\tif (s[callbackName]) {\n\t\t\t\t\t// make sure that re-using the options doesn't screw things around\n\t\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t\t// save the callback name for future use\n\t\t\t\t\toldCallbacks.push(callbackName);\n\t\t\t\t}\n\n\t\t\t\t// Call if it was a function and we have a response\n\t\t\t\tif (responseContainer && jQuery.isFunction(overwritten)) {\n\t\t\t\t\toverwritten(responseContainer[0]);\n\t\t\t\t}\n\n\t\t\t\tresponseContainer = overwritten = undefined;\n\t\t\t});\n\n\t\t\t// Delegate to script\n\t\t\treturn \"script\";\n\t\t}\n\t});\n\tvar xhrCallbacks,\n\t    xhrSupported,\n\t    xhrId = 0,\n\n\t// #5280: Internet Explorer will keep connections alive if we don't abort on unload\n\txhrOnUnloadAbort = window.ActiveXObject && function () {\n\t\t// Abort all pending requests\n\t\tvar key;\n\t\tfor (key in xhrCallbacks) {\n\t\t\txhrCallbacks[key](undefined, true);\n\t\t}\n\t};\n\n\t// Functions to create xhrs\n\tfunction createStandardXHR() {\n\t\ttry {\n\t\t\treturn new window.XMLHttpRequest();\n\t\t} catch (e) {}\n\t}\n\n\tfunction createActiveXHR() {\n\t\ttry {\n\t\t\treturn new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n\t\t} catch (e) {}\n\t}\n\n\t// Create the request object\n\t// (This is still attached to ajaxSettings for backward compatibility)\n\tjQuery.ajaxSettings.xhr = window.ActiveXObject ?\n\t/* Microsoft failed to properly\n  * implement the XMLHttpRequest in IE7 (can't request local files),\n  * so we use the ActiveXObject when it is available\n  * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n  * we need a fallback.\n  */\n\tfunction () {\n\t\treturn !this.isLocal && createStandardXHR() || createActiveXHR();\n\t} :\n\t// For all other browsers, use the standard XMLHttpRequest object\n\tcreateStandardXHR;\n\n\t// Determine support properties\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\tjQuery.support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n\txhrSupported = jQuery.support.ajax = !!xhrSupported;\n\n\t// Create transport if the browser can provide an xhr\n\tif (xhrSupported) {\n\n\t\tjQuery.ajaxTransport(function (s) {\n\t\t\t// Cross domain only allowed if supported through XMLHttpRequest\n\t\t\tif (!s.crossDomain || jQuery.support.cors) {\n\n\t\t\t\tvar _callback;\n\n\t\t\t\treturn {\n\t\t\t\t\tsend: function send(headers, complete) {\n\n\t\t\t\t\t\t// Get a new xhr\n\t\t\t\t\t\tvar handle,\n\t\t\t\t\t\t    i,\n\t\t\t\t\t\t    xhr = s.xhr();\n\n\t\t\t\t\t\t// Open the socket\n\t\t\t\t\t\t// Passing null username, generates a login popup on Opera (#2865)\n\t\t\t\t\t\tif (s.username) {\n\t\t\t\t\t\t\txhr.open(s.type, s.url, s.async, s.username, s.password);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\txhr.open(s.type, s.url, s.async);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Apply custom fields if provided\n\t\t\t\t\t\tif (s.xhrFields) {\n\t\t\t\t\t\t\tfor (i in s.xhrFields) {\n\t\t\t\t\t\t\t\txhr[i] = s.xhrFields[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Override mime type if needed\n\t\t\t\t\t\tif (s.mimeType && xhr.overrideMimeType) {\n\t\t\t\t\t\t\txhr.overrideMimeType(s.mimeType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// X-Requested-With header\n\t\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\t\t\tif (!s.crossDomain && !headers[\"X-Requested-With\"]) {\n\t\t\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Need an extra try/catch for cross domain requests in Firefox 3\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfor (i in headers) {\n\t\t\t\t\t\t\t\txhr.setRequestHeader(i, headers[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (err) {}\n\n\t\t\t\t\t\t// Do send the request\n\t\t\t\t\t\t// This may raise an exception which is actually\n\t\t\t\t\t\t// handled in jQuery.ajax (so no try/catch here)\n\t\t\t\t\t\txhr.send(s.hasContent && s.data || null);\n\n\t\t\t\t\t\t// Listener\n\t\t\t\t\t\t_callback = function callback(_, isAbort) {\n\t\t\t\t\t\t\tvar status, responseHeaders, statusText, responses;\n\n\t\t\t\t\t\t\t// Firefox throws exceptions when accessing properties\n\t\t\t\t\t\t\t// of an xhr when a network error occurred\n\t\t\t\t\t\t\t// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)\n\t\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\t\t// Was never called and is aborted or complete\n\t\t\t\t\t\t\t\tif (_callback && (isAbort || xhr.readyState === 4)) {\n\n\t\t\t\t\t\t\t\t\t// Only called once\n\t\t\t\t\t\t\t\t\t_callback = undefined;\n\n\t\t\t\t\t\t\t\t\t// Do not keep as active anymore\n\t\t\t\t\t\t\t\t\tif (handle) {\n\t\t\t\t\t\t\t\t\t\txhr.onreadystatechange = jQuery.noop;\n\t\t\t\t\t\t\t\t\t\tif (xhrOnUnloadAbort) {\n\t\t\t\t\t\t\t\t\t\t\tdelete xhrCallbacks[handle];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// If it's an abort\n\t\t\t\t\t\t\t\t\tif (isAbort) {\n\t\t\t\t\t\t\t\t\t\t// Abort it manually if needed\n\t\t\t\t\t\t\t\t\t\tif (xhr.readyState !== 4) {\n\t\t\t\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tresponses = {};\n\t\t\t\t\t\t\t\t\t\tstatus = xhr.status;\n\t\t\t\t\t\t\t\t\t\tresponseHeaders = xhr.getAllResponseHeaders();\n\n\t\t\t\t\t\t\t\t\t\t// When requesting binary data, IE6-9 will throw an exception\n\t\t\t\t\t\t\t\t\t\t// on any attempt to access responseText (#11426)\n\t\t\t\t\t\t\t\t\t\tif (typeof xhr.responseText === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\tresponses.text = xhr.responseText;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Firefox throws an exception when accessing\n\t\t\t\t\t\t\t\t\t\t// statusText for faulty cross-domain requests\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tstatusText = xhr.statusText;\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t// We normalize with Webkit giving an empty statusText\n\t\t\t\t\t\t\t\t\t\t\tstatusText = \"\";\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Filter status for non standard behaviors\n\n\t\t\t\t\t\t\t\t\t\t// If the request is local and we have data: assume a success\n\t\t\t\t\t\t\t\t\t\t// (success with no data won't get notified, that's the best we\n\t\t\t\t\t\t\t\t\t\t// can do given current implementations)\n\t\t\t\t\t\t\t\t\t\tif (!status && s.isLocal && !s.crossDomain) {\n\t\t\t\t\t\t\t\t\t\t\tstatus = responses.text ? 200 : 404;\n\t\t\t\t\t\t\t\t\t\t\t// IE - #1450: sometimes returns 1223 when it should be 204\n\t\t\t\t\t\t\t\t\t\t} else if (status === 1223) {\n\t\t\t\t\t\t\t\t\t\t\tstatus = 204;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (firefoxAccessException) {\n\t\t\t\t\t\t\t\tif (!isAbort) {\n\t\t\t\t\t\t\t\t\tcomplete(-1, firefoxAccessException);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Call complete if needed\n\t\t\t\t\t\t\tif (responses) {\n\t\t\t\t\t\t\t\tcomplete(status, statusText, responses, responseHeaders);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!s.async) {\n\t\t\t\t\t\t\t// if we're in sync mode we fire the callback\n\t\t\t\t\t\t\t_callback();\n\t\t\t\t\t\t} else if (xhr.readyState === 4) {\n\t\t\t\t\t\t\t// (IE6 & IE7) if it's in cache and has been\n\t\t\t\t\t\t\t// retrieved directly we need to fire the callback\n\t\t\t\t\t\t\tsetTimeout(_callback);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thandle = ++xhrId;\n\t\t\t\t\t\t\tif (xhrOnUnloadAbort) {\n\t\t\t\t\t\t\t\t// Create the active xhrs callbacks list if needed\n\t\t\t\t\t\t\t\t// and attach the unload handler\n\t\t\t\t\t\t\t\tif (!xhrCallbacks) {\n\t\t\t\t\t\t\t\t\txhrCallbacks = {};\n\t\t\t\t\t\t\t\t\tjQuery(window).unload(xhrOnUnloadAbort);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Add to list of active xhrs callbacks\n\t\t\t\t\t\t\t\txhrCallbacks[handle] = _callback;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\txhr.onreadystatechange = _callback;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tabort: function abort() {\n\t\t\t\t\t\tif (_callback) {\n\t\t\t\t\t\t\t_callback(undefined, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\tvar fxNow,\n\t    timerId,\n\t    rfxtypes = /^(?:toggle|show|hide)$/,\n\t    rfxnum = new RegExp(\"^(?:([+-])=|)(\" + core_pnum + \")([a-z%]*)$\", \"i\"),\n\t    rrun = /queueHooks$/,\n\t    animationPrefilters = [defaultPrefilter],\n\t    tweeners = {\n\t\t\"*\": [function (prop, value) {\n\t\t\tvar end,\n\t\t\t    unit,\n\t\t\t    tween = this.createTween(prop, value),\n\t\t\t    parts = rfxnum.exec(value),\n\t\t\t    target = tween.cur(),\n\t\t\t    start = +target || 0,\n\t\t\t    scale = 1,\n\t\t\t    maxIterations = 20;\n\n\t\t\tif (parts) {\n\t\t\t\tend = +parts[2];\n\t\t\t\tunit = parts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n\n\t\t\t\t// We need to compute starting value\n\t\t\t\tif (unit !== \"px\" && start) {\n\t\t\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\t\t\t// Prefer the current property, because this process will be trivial if it uses the same units\n\t\t\t\t\t// Fallback to end or a simple constant\n\t\t\t\t\tstart = jQuery.css(tween.elem, prop, true) || end || 1;\n\n\t\t\t\t\tdo {\n\t\t\t\t\t\t// If previous iteration zeroed out, double until we get *something*\n\t\t\t\t\t\t// Use a string for doubling factor so we don't accidentally see scale as unchanged below\n\t\t\t\t\t\tscale = scale || \".5\";\n\n\t\t\t\t\t\t// Adjust and apply\n\t\t\t\t\t\tstart = start / scale;\n\t\t\t\t\t\tjQuery.style(tween.elem, prop, start + unit);\n\n\t\t\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t\t\t\t\t// And breaking the loop if scale is unchanged or perfect, or if we've just had enough\n\t\t\t\t\t} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);\n\t\t\t\t}\n\n\t\t\t\ttween.unit = unit;\n\t\t\t\ttween.start = start;\n\t\t\t\t// If a +=/-= token was provided, we're doing a relative animation\n\t\t\t\ttween.end = parts[1] ? start + (parts[1] + 1) * end : end;\n\t\t\t}\n\t\t\treturn tween;\n\t\t}]\n\t};\n\n\t// Animations created synchronously will run synchronously\n\tfunction createFxNow() {\n\t\tsetTimeout(function () {\n\t\t\tfxNow = undefined;\n\t\t});\n\t\treturn fxNow = jQuery.now();\n\t}\n\n\tfunction createTweens(animation, props) {\n\t\tjQuery.each(props, function (prop, value) {\n\t\t\tvar collection = (tweeners[prop] || []).concat(tweeners[\"*\"]),\n\t\t\t    index = 0,\n\t\t\t    length = collection.length;\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tif (collection[index].call(animation, prop, value)) {\n\n\t\t\t\t\t// we're done with this property\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction Animation(elem, properties, options) {\n\t\tvar result,\n\t\t    stopped,\n\t\t    index = 0,\n\t\t    length = animationPrefilters.length,\n\t\t    deferred = jQuery.Deferred().always(function () {\n\t\t\t// don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t}),\n\t\t    tick = function tick() {\n\t\t\tif (stopped) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n\n\t\t\t// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)\n\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t    percent = 1 - temp,\n\t\t\t    index = 0,\n\t\t\t    length = animation.tweens.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tanimation.tweens[index].run(percent);\n\t\t\t}\n\n\t\t\tdeferred.notifyWith(elem, [animation, percent, remaining]);\n\n\t\t\tif (percent < 1 && length) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith(elem, [animation]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t    animation = deferred.promise({\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend({}, properties),\n\t\t\topts: jQuery.extend(true, { specialEasing: {} }, options),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function createTween(prop, end) {\n\t\t\t\tvar tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n\t\t\t\tanimation.tweens.push(tween);\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function stop(gotoEnd) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t// if we are going to the end, we want to run all the tweens\n\t\t\t\t// otherwise we skip this part\n\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif (stopped) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor (; index < length; index++) {\n\t\t\t\t\tanimation.tweens[index].run(1);\n\t\t\t\t}\n\n\t\t\t\t// resolve when we played the last frame\n\t\t\t\t// otherwise, reject\n\t\t\t\tif (gotoEnd) {\n\t\t\t\t\tdeferred.resolveWith(elem, [animation, gotoEnd]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(elem, [animation, gotoEnd]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}),\n\t\t    props = animation.props;\n\n\t\tpropFilter(props, animation.opts.specialEasing);\n\n\t\tfor (; index < length; index++) {\n\t\t\tresult = animationPrefilters[index].call(animation, elem, props, animation.opts);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tcreateTweens(animation, props);\n\n\t\tif (jQuery.isFunction(animation.opts.start)) {\n\t\t\tanimation.opts.start.call(elem, animation);\n\t\t}\n\n\t\tjQuery.fx.timer(jQuery.extend(tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t}));\n\n\t\t// attach callbacks from options\n\t\treturn animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n\t}\n\n\tfunction propFilter(props, specialEasing) {\n\t\tvar value, name, index, easing, hooks;\n\n\t\t// camelCase, specialEasing and expand cssHook pass\n\t\tfor (index in props) {\n\t\t\tname = jQuery.camelCase(index);\n\t\t\teasing = specialEasing[name];\n\t\t\tvalue = props[index];\n\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\teasing = value[1];\n\t\t\t\tvalue = props[index] = value[0];\n\t\t\t}\n\n\t\t\tif (index !== name) {\n\t\t\t\tprops[name] = value;\n\t\t\t\tdelete props[index];\n\t\t\t}\n\n\t\t\thooks = jQuery.cssHooks[name];\n\t\t\tif (hooks && \"expand\" in hooks) {\n\t\t\t\tvalue = hooks.expand(value);\n\t\t\t\tdelete props[name];\n\n\t\t\t\t// not quite $.extend, this wont overwrite keys already present.\n\t\t\t\t// also - reusing 'index' from above because we have the correct \"name\"\n\t\t\t\tfor (index in value) {\n\t\t\t\t\tif (!(index in props)) {\n\t\t\t\t\t\tprops[index] = value[index];\n\t\t\t\t\t\tspecialEasing[index] = easing;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tspecialEasing[name] = easing;\n\t\t\t}\n\t\t}\n\t}\n\n\tjQuery.Animation = jQuery.extend(Animation, {\n\n\t\ttweener: function tweener(props, callback) {\n\t\t\tif (jQuery.isFunction(props)) {\n\t\t\t\tcallback = props;\n\t\t\t\tprops = [\"*\"];\n\t\t\t} else {\n\t\t\t\tprops = props.split(\" \");\n\t\t\t}\n\n\t\t\tvar prop,\n\t\t\t    index = 0,\n\t\t\t    length = props.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tprop = props[index];\n\t\t\t\ttweeners[prop] = tweeners[prop] || [];\n\t\t\t\ttweeners[prop].unshift(callback);\n\t\t\t}\n\t\t},\n\n\t\tprefilter: function prefilter(callback, prepend) {\n\t\t\tif (prepend) {\n\t\t\t\tanimationPrefilters.unshift(callback);\n\t\t\t} else {\n\t\t\t\tanimationPrefilters.push(callback);\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction defaultPrefilter(elem, props, opts) {\n\t\t/*jshint validthis:true */\n\t\tvar prop,\n\t\t    index,\n\t\t    length,\n\t\t    value,\n\t\t    dataShow,\n\t\t    toggle,\n\t\t    tween,\n\t\t    hooks,\n\t\t    oldfire,\n\t\t    anim = this,\n\t\t    style = elem.style,\n\t\t    orig = {},\n\t\t    handled = [],\n\t\t    hidden = elem.nodeType && isHidden(elem);\n\n\t\t// handle queue: false promises\n\t\tif (!opts.queue) {\n\t\t\thooks = jQuery._queueHooks(elem, \"fx\");\n\t\t\tif (hooks.unqueued == null) {\n\t\t\t\thooks.unqueued = 0;\n\t\t\t\toldfire = hooks.empty.fire;\n\t\t\t\thooks.empty.fire = function () {\n\t\t\t\t\tif (!hooks.unqueued) {\n\t\t\t\t\t\toldfire();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\thooks.unqueued++;\n\n\t\t\tanim.always(function () {\n\t\t\t\t// doing this makes sure that the complete handler will be called\n\t\t\t\t// before this completes\n\t\t\t\tanim.always(function () {\n\t\t\t\t\thooks.unqueued--;\n\t\t\t\t\tif (!jQuery.queue(elem, \"fx\").length) {\n\t\t\t\t\t\thooks.empty.fire();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// height/width overflow pass\n\t\tif (elem.nodeType === 1 && (\"height\" in props || \"width\" in props)) {\n\t\t\t// Make sure that nothing sneaks out\n\t\t\t// Record all 3 overflow attributes because IE does not\n\t\t\t// change the overflow attribute when overflowX and\n\t\t\t// overflowY are set to the same value\n\t\t\topts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n\t\t\t// Set display property to inline-block for height/width\n\t\t\t// animations on inline elements that are having width/height animated\n\t\t\tif (jQuery.css(elem, \"display\") === \"inline\" && jQuery.css(elem, \"float\") === \"none\") {\n\n\t\t\t\t// inline-level elements accept inline-block;\n\t\t\t\t// block-level elements need to be inline with layout\n\t\t\t\tif (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === \"inline\") {\n\t\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t\t} else {\n\t\t\t\t\tstyle.zoom = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (opts.overflow) {\n\t\t\tstyle.overflow = \"hidden\";\n\t\t\tif (!jQuery.support.shrinkWrapBlocks) {\n\t\t\t\tanim.always(function () {\n\t\t\t\t\tstyle.overflow = opts.overflow[0];\n\t\t\t\t\tstyle.overflowX = opts.overflow[1];\n\t\t\t\t\tstyle.overflowY = opts.overflow[2];\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// show/hide pass\n\t\tfor (index in props) {\n\t\t\tvalue = props[index];\n\t\t\tif (rfxtypes.exec(value)) {\n\t\t\t\tdelete props[index];\n\t\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\t\tif (value === (hidden ? \"hide\" : \"show\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\thandled.push(index);\n\t\t\t}\n\t\t}\n\n\t\tlength = handled.length;\n\t\tif (length) {\n\t\t\tdataShow = jQuery._data(elem, \"fxshow\") || jQuery._data(elem, \"fxshow\", {});\n\t\t\tif (\"hidden\" in dataShow) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\n\t\t\t// store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\t\tif (toggle) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\t\t\tif (hidden) {\n\t\t\t\tjQuery(elem).show();\n\t\t\t} else {\n\t\t\t\tanim.done(function () {\n\t\t\t\t\tjQuery(elem).hide();\n\t\t\t\t});\n\t\t\t}\n\t\t\tanim.done(function () {\n\t\t\t\tvar prop;\n\t\t\t\tjQuery._removeData(elem, \"fxshow\");\n\t\t\t\tfor (prop in orig) {\n\t\t\t\t\tjQuery.style(elem, prop, orig[prop]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t\tprop = handled[index];\n\t\t\t\ttween = anim.createTween(prop, hidden ? dataShow[prop] : 0);\n\t\t\t\torig[prop] = dataShow[prop] || jQuery.style(elem, prop);\n\n\t\t\t\tif (!(prop in dataShow)) {\n\t\t\t\t\tdataShow[prop] = tween.start;\n\t\t\t\t\tif (hidden) {\n\t\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction Tween(elem, options, prop, end, easing) {\n\t\treturn new Tween.prototype.init(elem, options, prop, end, easing);\n\t}\n\tjQuery.Tween = Tween;\n\n\tTween.prototype = {\n\t\tconstructor: Tween,\n\t\tinit: function init(elem, options, prop, end, easing, unit) {\n\t\t\tthis.elem = elem;\n\t\t\tthis.prop = prop;\n\t\t\tthis.easing = easing || \"swing\";\n\t\t\tthis.options = options;\n\t\t\tthis.start = this.now = this.cur();\n\t\t\tthis.end = end;\n\t\t\tthis.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n\t\t},\n\t\tcur: function cur() {\n\t\t\tvar hooks = Tween.propHooks[this.prop];\n\n\t\t\treturn hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n\t\t},\n\t\trun: function run(percent) {\n\t\t\tvar eased,\n\t\t\t    hooks = Tween.propHooks[this.prop];\n\n\t\t\tif (this.options.duration) {\n\t\t\t\tthis.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n\t\t\t} else {\n\t\t\t\tthis.pos = eased = percent;\n\t\t\t}\n\t\t\tthis.now = (this.end - this.start) * eased + this.start;\n\n\t\t\tif (this.options.step) {\n\t\t\t\tthis.options.step.call(this.elem, this.now, this);\n\t\t\t}\n\n\t\t\tif (hooks && hooks.set) {\n\t\t\t\thooks.set(this);\n\t\t\t} else {\n\t\t\t\tTween.propHooks._default.set(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tTween.prototype.init.prototype = Tween.prototype;\n\n\tTween.propHooks = {\n\t\t_default: {\n\t\t\tget: function get(tween) {\n\t\t\t\tvar result;\n\n\t\t\t\tif (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {\n\t\t\t\t\treturn tween.elem[tween.prop];\n\t\t\t\t}\n\n\t\t\t\t// passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t\t// attempt a parseFloat and fallback to a string if the parse fails\n\t\t\t\t// so, simple values such as \"10px\" are parsed to Float.\n\t\t\t\t// complex values such as \"rotate(1rad)\" are returned as is.\n\t\t\t\tresult = jQuery.css(tween.elem, tween.prop, \"\");\n\t\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t\t},\n\t\t\tset: function set(tween) {\n\t\t\t\t// use step hook for back compat - use cssHook if its there - use .style if its\n\t\t\t\t// available and use plain properties where available\n\t\t\t\tif (jQuery.fx.step[tween.prop]) {\n\t\t\t\t\tjQuery.fx.step[tween.prop](tween);\n\t\t\t\t} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n\t\t\t\t\tjQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n\t\t\t\t} else {\n\t\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Remove in 2.0 - this supports IE8's panic based approach\n\t// to setting things on disconnected nodes\n\n\tTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\t\tset: function set(tween) {\n\t\t\tif (tween.elem.nodeType && tween.elem.parentNode) {\n\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n\t\tvar cssFn = jQuery.fn[name];\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n\t\t};\n\t});\n\n\tjQuery.fn.extend({\n\t\tfadeTo: function fadeTo(speed, to, easing, callback) {\n\n\t\t\t// show any hidden elements after setting opacity to 0\n\t\t\treturn this.filter(isHidden).css(\"opacity\", 0).show()\n\n\t\t\t// animate to the value specified\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback);\n\t\t},\n\t\tanimate: function animate(prop, speed, easing, callback) {\n\t\t\tvar empty = jQuery.isEmptyObject(prop),\n\t\t\t    optall = jQuery.speed(speed, easing, callback),\n\t\t\t    doAnimation = function doAnimation() {\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation(this, jQuery.extend({}, prop), optall);\n\t\t\t\tdoAnimation.finish = function () {\n\t\t\t\t\tanim.stop(true);\n\t\t\t\t};\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif (empty || jQuery._data(this, \"finish\")) {\n\t\t\t\t\tanim.stop(true);\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\t\treturn empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n\t\t},\n\t\tstop: function stop(type, clearQueue, gotoEnd) {\n\t\t\tvar stopQueue = function stopQueue(hooks) {\n\t\t\t\tvar stop = hooks.stop;\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tstop(gotoEnd);\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tgotoEnd = clearQueue;\n\t\t\t\tclearQueue = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\tif (clearQueue && type !== false) {\n\t\t\t\tthis.queue(type || \"fx\", []);\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar dequeue = true,\n\t\t\t\t    index = type != null && type + \"queueHooks\",\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    data = jQuery._data(this);\n\n\t\t\t\tif (index) {\n\t\t\t\t\tif (data[index] && data[index].stop) {\n\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (index in data) {\n\t\t\t\t\t\tif (data[index] && data[index].stop && rrun.test(index)) {\n\t\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n\t\t\t\t\t\ttimers[index].anim.stop(gotoEnd);\n\t\t\t\t\t\tdequeue = false;\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// start the next in the queue if the last step wasn't forced\n\t\t\t\t// timers currently will call their complete callbacks, which will dequeue\n\t\t\t\t// but only if they were gotoEnd\n\t\t\t\tif (dequeue || !gotoEnd) {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfinish: function finish(type) {\n\t\t\tif (type !== false) {\n\t\t\t\ttype = type || \"fx\";\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tvar index,\n\t\t\t\t    data = jQuery._data(this),\n\t\t\t\t    queue = data[type + \"queue\"],\n\t\t\t\t    hooks = data[type + \"queueHooks\"],\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    length = queue ? queue.length : 0;\n\n\t\t\t\t// enable finishing flag on private data\n\t\t\t\tdata.finish = true;\n\n\t\t\t\t// empty the queue first\n\t\t\t\tjQuery.queue(this, type, []);\n\n\t\t\t\tif (hooks && hooks.cur && hooks.cur.finish) {\n\t\t\t\t\thooks.cur.finish.call(this);\n\t\t\t\t}\n\n\t\t\t\t// look for any active animations, and finish them\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && timers[index].queue === type) {\n\t\t\t\t\t\ttimers[index].anim.stop(true);\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// look for any animations in the old queue and finish them\n\t\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t\t\tif (queue[index] && queue[index].finish) {\n\t\t\t\t\t\tqueue[index].finish.call(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// turn off finishing flag\n\t\t\t\tdelete data.finish;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Generate parameters to create a standard animation\n\tfunction genFx(type, includeWidth) {\n\t\tvar which,\n\t\t    attrs = { height: type },\n\t\t    i = 0;\n\n\t\t// if we include width, step value is 1 to do all cssExpand values,\n\t\t// if we don't include width, step value is 2 to skip over Left and Right\n\t\tincludeWidth = includeWidth ? 1 : 0;\n\t\tfor (; i < 4; i += 2 - includeWidth) {\n\t\t\twhich = cssExpand[i];\n\t\t\tattrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n\t\t}\n\n\t\tif (includeWidth) {\n\t\t\tattrs.opacity = attrs.width = type;\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Generate shortcuts for custom animations\n\tjQuery.each({\n\t\tslideDown: genFx(\"show\"),\n\t\tslideUp: genFx(\"hide\"),\n\t\tslideToggle: genFx(\"toggle\"),\n\t\tfadeIn: { opacity: \"show\" },\n\t\tfadeOut: { opacity: \"hide\" },\n\t\tfadeToggle: { opacity: \"toggle\" }\n\t}, function (name, props) {\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn this.animate(props, speed, easing, callback);\n\t\t};\n\t});\n\n\tjQuery.speed = function (speed, easing, fn) {\n\t\tvar opt = speed && (typeof speed === \"undefined\" ? \"undefined\" : _typeof(speed)) === \"object\" ? jQuery.extend({}, speed) : {\n\t\t\tcomplete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n\t\t\tduration: speed,\n\t\t\teasing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n\t\t};\n\n\t\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;\n\n\t\t// normalize opt.queue - true/undefined/null -> \"fx\"\n\t\tif (opt.queue == null || opt.queue === true) {\n\t\t\topt.queue = \"fx\";\n\t\t}\n\n\t\t// Queueing\n\t\topt.old = opt.complete;\n\n\t\topt.complete = function () {\n\t\t\tif (jQuery.isFunction(opt.old)) {\n\t\t\t\topt.old.call(this);\n\t\t\t}\n\n\t\t\tif (opt.queue) {\n\t\t\t\tjQuery.dequeue(this, opt.queue);\n\t\t\t}\n\t\t};\n\n\t\treturn opt;\n\t};\n\n\tjQuery.easing = {\n\t\tlinear: function linear(p) {\n\t\t\treturn p;\n\t\t},\n\t\tswing: function swing(p) {\n\t\t\treturn 0.5 - Math.cos(p * Math.PI) / 2;\n\t\t}\n\t};\n\n\tjQuery.timers = [];\n\tjQuery.fx = Tween.prototype.init;\n\tjQuery.fx.tick = function () {\n\t\tvar timer,\n\t\t    timers = jQuery.timers,\n\t\t    i = 0;\n\n\t\tfxNow = jQuery.now();\n\n\t\tfor (; i < timers.length; i++) {\n\t\t\ttimer = timers[i];\n\t\t\t// Checks the timer has not already been removed\n\t\t\tif (!timer() && timers[i] === timer) {\n\t\t\t\ttimers.splice(i--, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (!timers.length) {\n\t\t\tjQuery.fx.stop();\n\t\t}\n\t\tfxNow = undefined;\n\t};\n\n\tjQuery.fx.timer = function (timer) {\n\t\tif (timer() && jQuery.timers.push(timer)) {\n\t\t\tjQuery.fx.start();\n\t\t}\n\t};\n\n\tjQuery.fx.interval = 13;\n\n\tjQuery.fx.start = function () {\n\t\tif (!timerId) {\n\t\t\ttimerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);\n\t\t}\n\t};\n\n\tjQuery.fx.stop = function () {\n\t\tclearInterval(timerId);\n\t\ttimerId = null;\n\t};\n\n\tjQuery.fx.speeds = {\n\t\tslow: 600,\n\t\tfast: 200,\n\t\t// Default speed\n\t\t_default: 400\n\t};\n\n\t// Back Compat <1.8 extension point\n\tjQuery.fx.step = {};\n\n\tif (jQuery.expr && jQuery.expr.filters) {\n\t\tjQuery.expr.filters.animated = function (elem) {\n\t\t\treturn jQuery.grep(jQuery.timers, function (fn) {\n\t\t\t\treturn elem === fn.elem;\n\t\t\t}).length;\n\t\t};\n\t}\n\tjQuery.fn.offset = function (options) {\n\t\tif (arguments.length) {\n\t\t\treturn options === undefined ? this : this.each(function (i) {\n\t\t\t\tjQuery.offset.setOffset(this, options, i);\n\t\t\t});\n\t\t}\n\n\t\tvar docElem,\n\t\t    win,\n\t\t    box = { top: 0, left: 0 },\n\t\t    elem = this[0],\n\t\t    doc = elem && elem.ownerDocument;\n\n\t\tif (!doc) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it's not a disconnected DOM node\n\t\tif (!jQuery.contains(docElem, elem)) {\n\t\t\treturn box;\n\t\t}\n\n\t\t// If we don't have gBCR, just use 0,0 rather than error\n\t\t// BlackBerry 5, iOS 3 (original iPhone)\n\t\tif (_typeof(elem.getBoundingClientRect) !== core_strundefined) {\n\t\t\tbox = elem.getBoundingClientRect();\n\t\t}\n\t\twin = getWindow(doc);\n\t\treturn {\n\t\t\ttop: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),\n\t\t\tleft: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)\n\t\t};\n\t};\n\n\tjQuery.offset = {\n\n\t\tsetOffset: function setOffset(elem, options, i) {\n\t\t\tvar position = jQuery.css(elem, \"position\");\n\n\t\t\t// set position first, in-case top/left are set even on static elem\n\t\t\tif (position === \"static\") {\n\t\t\t\telem.style.position = \"relative\";\n\t\t\t}\n\n\t\t\tvar curElem = jQuery(elem),\n\t\t\t    curOffset = curElem.offset(),\n\t\t\t    curCSSTop = jQuery.css(elem, \"top\"),\n\t\t\t    curCSSLeft = jQuery.css(elem, \"left\"),\n\t\t\t    calculatePosition = (position === \"absolute\" || position === \"fixed\") && jQuery.inArray(\"auto\", [curCSSTop, curCSSLeft]) > -1,\n\t\t\t    props = {},\n\t\t\t    curPosition = {},\n\t\t\t    curTop,\n\t\t\t    curLeft;\n\n\t\t\t// need to be able to calculate position if either top or left is auto and position is either absolute or fixed\n\t\t\tif (calculatePosition) {\n\t\t\t\tcurPosition = curElem.position();\n\t\t\t\tcurTop = curPosition.top;\n\t\t\t\tcurLeft = curPosition.left;\n\t\t\t} else {\n\t\t\t\tcurTop = parseFloat(curCSSTop) || 0;\n\t\t\t\tcurLeft = parseFloat(curCSSLeft) || 0;\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(options)) {\n\t\t\t\toptions = options.call(elem, i, curOffset);\n\t\t\t}\n\n\t\t\tif (options.top != null) {\n\t\t\t\tprops.top = options.top - curOffset.top + curTop;\n\t\t\t}\n\t\t\tif (options.left != null) {\n\t\t\t\tprops.left = options.left - curOffset.left + curLeft;\n\t\t\t}\n\n\t\t\tif (\"using\" in options) {\n\t\t\t\toptions.using.call(elem, props);\n\t\t\t} else {\n\t\t\t\tcurElem.css(props);\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.fn.extend({\n\n\t\tposition: function position() {\n\t\t\tif (!this[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar offsetParent,\n\t\t\t    offset,\n\t\t\t    parentOffset = { top: 0, left: 0 },\n\t\t\t    elem = this[0];\n\n\t\t\t// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n\t\t\tif (jQuery.css(elem, \"position\") === \"fixed\") {\n\t\t\t\t// we assume that getBoundingClientRect is available when computed position is fixed\n\t\t\t\toffset = elem.getBoundingClientRect();\n\t\t\t} else {\n\t\t\t\t// Get *real* offsetParent\n\t\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t\t// Get correct offsets\n\t\t\t\toffset = this.offset();\n\t\t\t\tif (!jQuery.nodeName(offsetParent[0], \"html\")) {\n\t\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t\t}\n\n\t\t\t\t// Add offsetParent borders\n\t\t\t\tparentOffset.top += jQuery.css(offsetParent[0], \"borderTopWidth\", true);\n\t\t\t\tparentOffset.left += jQuery.css(offsetParent[0], \"borderLeftWidth\", true);\n\t\t\t}\n\n\t\t\t// Subtract parent offsets and element margins\n\t\t\t// note: when an element has margin: auto the offsetLeft and marginLeft\n\t\t\t// are the same in Safari causing offset.left to incorrectly be 0\n\t\t\treturn {\n\t\t\t\ttop: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n\t\t\t\tleft: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n\t\t\t};\n\t\t},\n\n\t\toffsetParent: function offsetParent() {\n\t\t\treturn this.map(function () {\n\t\t\t\tvar offsetParent = this.offsetParent || document.documentElement;\n\t\t\t\twhile (offsetParent && !jQuery.nodeName(offsetParent, \"html\") && jQuery.css(offsetParent, \"position\") === \"static\") {\n\t\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t\t}\n\t\t\t\treturn offsetParent || document.documentElement;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Create scrollLeft and scrollTop methods\n\tjQuery.each({ scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function (method, prop) {\n\t\tvar top = /Y/.test(prop);\n\n\t\tjQuery.fn[method] = function (val) {\n\t\t\treturn jQuery.access(this, function (elem, method, val) {\n\t\t\t\tvar win = getWindow(elem);\n\n\t\t\t\tif (val === undefined) {\n\t\t\t\t\treturn win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];\n\t\t\t\t}\n\n\t\t\t\tif (win) {\n\t\t\t\t\twin.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());\n\t\t\t\t} else {\n\t\t\t\t\telem[method] = val;\n\t\t\t\t}\n\t\t\t}, method, val, arguments.length, null);\n\t\t};\n\t});\n\n\tfunction getWindow(elem) {\n\t\treturn jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;\n\t}\n\t// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\tjQuery.each({ Height: \"height\", Width: \"width\" }, function (name, type) {\n\t\tjQuery.each({ padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function (defaultExtra, funcName) {\n\t\t\t// margin is only for outerHeight, outerWidth\n\t\t\tjQuery.fn[funcName] = function (margin, value) {\n\t\t\t\tvar chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n\t\t\t\t    extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n\n\t\t\t\treturn jQuery.access(this, function (elem, type, value) {\n\t\t\t\t\tvar doc;\n\n\t\t\t\t\tif (jQuery.isWindow(elem)) {\n\t\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\t\treturn elem.document.documentElement[\"client\" + name];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get document width or height\n\t\t\t\t\tif (elem.nodeType === 9) {\n\t\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest\n\t\t\t\t\t\t// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.\n\t\t\t\t\t\treturn Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value === undefined ?\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css(elem, type, extra) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style(elem, type, value, extra);\n\t\t\t\t}, type, chainable ? margin : undefined, chainable, null);\n\t\t\t};\n\t\t});\n\t});\n\t// Limit scope pollution from any deprecated API\n\t// (function() {\n\n\t// })();\n\t// Expose jQuery to the global object\n\twindow.jQuery = window.$ = jQuery;\n\n\t// Expose jQuery as an AMD module, but only for AMD loaders that\n\t// understand the issues with loading multiple versions of jQuery\n\t// in a page that all might call define(). The loader will indicate\n\t// they have special allowances for multiple jQuery versions by\n\t// specifying define.amd.jQuery = true. Register as a named module,\n\t// since jQuery can be concatenated with other files that may use define,\n\t// but not use a proper concatenation script that understands anonymous\n\t// AMD modules. A named AMD is safest and most robust way to register.\n\t// Lowercase jquery is used because AMD module names are derived from\n\t// file names, and jQuery is normally delivered in a lowercase file name.\n\t// Do this after creating the global so that if an AMD module wants to call\n\t// noConflict to hide this version of jQuery, it will work.\n\tif (\"function\" === \"function\" && __webpack_require__(1) && __webpack_require__(1).jQuery) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn jQuery;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("var $imports = __webpack_require__(0);\nmodule.exports = function ($data) {\n    'use strict';\n    $data = $data || {};\n    var $$out = '', i = $data.i, jsondata = $data.jsondata, $escape = $imports.$escape, j = $data.j;\n    for (var i = 0; i < jsondata.length; i++) {\n        $$out += '\\r\\n<dl class=\"site';\n        $$out += $escape(i + 1);\n        $$out += ' clearfix\">\\r\\n\\t<dt><h5>';\n        $$out += $escape(jsondata[i].title);\n        $$out += '</h5></dt>\\r\\n\\t';\n        for (var j = 0; j < jsondata[i].content.length; j++) {\n            $$out += '\\r\\n\\t<dd>\\r\\n\\t\\t<a href=\"javascript:void(0)\">\\r\\n\\t\\t\\t';\n            $$out += $escape(jsondata[i].content[j]);\n            $$out += '\\r\\n\\t\\t</a>\\r\\n\\t</dd>\\r\\n\\t';\n        }\n        $$out += '\\r\\n</dl>\\r\\n';\n    }\n    return $$out;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9UZW1wbGF0ZS9zaXRlTmF2TW9kZWwuYXJ0P2U5ZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztTQUFDO0FBQUEsaUJBQTBDLHNCQUExQztBQUFBLGlCQUNlLGVBRGY7QUFBQSxpQkFDdUIsZUFEdkI7QUFBQSxpQkFFUywyQkFGVDtBQUFBLGlCQUVpQyxtQkFGakM7QUFBQSxhQUdDO0FBQUEscUJBQXFELHlDQUFyRDtBQUFBLHFCQUdFLGdDQUhGO0FBQUEscUJBRzhCLGdDQUg5QjtBQUFBLFNBSEQ7QUFBQTtBQUFBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyI8JSBmb3IodmFyIGk9MDsgaTxqc29uZGF0YS5sZW5ndGg7aSsrKXsgJT5cclxuPGRsIGNsYXNzPVwic2l0ZTwlPWkrMSU+IGNsZWFyZml4XCI+XHJcblx0PGR0PjxoNT48JT0ganNvbmRhdGFbaV0udGl0bGUgJT48L2g1PjwvZHQ+XHJcblx0PCUgZm9yKHZhciBqPTA7IGo8anNvbmRhdGFbaV0uY29udGVudC5sZW5ndGg7aisrKXsgJT5cclxuXHQ8ZGQ+XHJcblx0XHQ8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+XHJcblx0XHRcdDwlPSBqc29uZGF0YVtpXS5jb250ZW50W2pdJT5cclxuXHRcdDwvYT5cclxuXHQ8L2RkPlxyXG5cdDwlfSAlPlxyXG48L2RsPlxyXG48JSB9ICU+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vVGVtcGxhdGUvc2l0ZU5hdk1vZGVsLmFydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\n/*! art-template@runtime | https://github.com/aui/art-template */\n\nvar detectNode = __webpack_require__(10);\nvar runtime = Object.create(detectNode ? global : window);\nvar ESCAPE_REG = /[\"&'<>]/;\n\n/**\n * 编码模板输出的内容\n * @param  {any}        content\n * @return {string}\n */\nruntime.$escape = function (content) {\n    return xmlEscape(toString(content));\n};\n\n/**\n * 迭代器，支持数组与对象\n * @param {array|Object} data \n * @param {function}     callback \n */\nruntime.$each = function (data, callback) {\n    if (Array.isArray(data)) {\n        for (var i = 0, len = data.length; i < len; i++) {\n            callback(data[i], i);\n        }\n    } else {\n        for (var _i in data) {\n            callback(data[_i], _i);\n        }\n    }\n};\n\n// 将目标转成字符\nfunction toString(value) {\n    if (typeof value !== 'string') {\n        if (value === undefined || value === null) {\n            value = '';\n        } else if (typeof value === 'function') {\n            value = toString(value.call(value));\n        } else {\n            value = JSON.stringify(value);\n        }\n    }\n\n    return value;\n};\n\n// 编码 HTML 内容\nfunction xmlEscape(content) {\n    var html = '' + content;\n    var regexResult = ESCAPE_REG.exec(html);\n    if (!regexResult) {\n        return content;\n    }\n\n    var result = '';\n    var i = void 0,\n        lastIndex = void 0,\n        char = void 0;\n    for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {\n\n        switch (html.charCodeAt(i)) {\n            case 34:\n                char = '&#34;';\n                break;\n            case 38:\n                char = '&#38;';\n                break;\n            case 39:\n                char = '&#39;';\n                break;\n            case 60:\n                char = '&#60;';\n                break;\n            case 62:\n                char = '&#62;';\n                break;\n            default:\n                continue;\n        }\n\n        if (lastIndex !== i) {\n            result += html.substring(lastIndex, i);\n        }\n\n        lastIndex = i + 1;\n        result += char;\n    }\n\n    if (lastIndex !== i) {\n        return result + html.substring(lastIndex, i);\n    } else {\n        return result;\n    }\n};\n\nmodule.exports = runtime;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJ0LXRlbXBsYXRlL2xpYi9jb21waWxlL3J1bnRpbWUuanM/Y2VlNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOENBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLElBQUk7QUFDaEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxTQUFTO0FBQ25EO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGlCQUFpQjs7QUFFL0Q7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEseUIiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyohIGFydC10ZW1wbGF0ZUBydW50aW1lIHwgaHR0cHM6Ly9naXRodWIuY29tL2F1aS9hcnQtdGVtcGxhdGUgKi9cblxudmFyIGRldGVjdE5vZGUgPSByZXF1aXJlKCdkZXRlY3Qtbm9kZScpO1xudmFyIHJ1bnRpbWUgPSBPYmplY3QuY3JlYXRlKGRldGVjdE5vZGUgPyBnbG9iYWwgOiB3aW5kb3cpO1xudmFyIEVTQ0FQRV9SRUcgPSAvW1wiJic8Pl0vO1xuXG4vKipcbiAqIOe8lueggeaooeadv+i+k+WHuueahOWGheWuuVxuICogQHBhcmFtICB7YW55fSAgICAgICAgY29udGVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5ydW50aW1lLiRlc2NhcGUgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgIHJldHVybiB4bWxFc2NhcGUodG9TdHJpbmcoY29udGVudCkpO1xufTtcblxuLyoqXG4gKiDov63ku6PlmajvvIzmlK/mjIHmlbDnu4TkuI7lr7nosaFcbiAqIEBwYXJhbSB7YXJyYXl8T2JqZWN0fSBkYXRhIFxuICogQHBhcmFtIHtmdW5jdGlvbn0gICAgIGNhbGxiYWNrIFxuICovXG5ydW50aW1lLiRlYWNoID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGRhdGFbaV0sIGkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgX2kgaW4gZGF0YSkge1xuICAgICAgICAgICAgY2FsbGJhY2soZGF0YVtfaV0sIF9pKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIOWwhuebruagh+i9rOaIkOWtl+esplxuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9TdHJpbmcodmFsdWUuY2FsbCh2YWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG4vLyDnvJbnoIEgSFRNTCDlhoXlrrlcbmZ1bmN0aW9uIHhtbEVzY2FwZShjb250ZW50KSB7XG4gICAgdmFyIGh0bWwgPSAnJyArIGNvbnRlbnQ7XG4gICAgdmFyIHJlZ2V4UmVzdWx0ID0gRVNDQVBFX1JFRy5leGVjKGh0bWwpO1xuICAgIGlmICghcmVnZXhSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBpID0gdm9pZCAwLFxuICAgICAgICBsYXN0SW5kZXggPSB2b2lkIDAsXG4gICAgICAgIGNoYXIgPSB2b2lkIDA7XG4gICAgZm9yIChpID0gcmVnZXhSZXN1bHQuaW5kZXgsIGxhc3RJbmRleCA9IDA7IGkgPCBodG1sLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgc3dpdGNoIChodG1sLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgY2hhciA9ICcmIzM0Oyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgIGNoYXIgPSAnJiMzODsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICBjaGFyID0gJyYjMzk7JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjA6XG4gICAgICAgICAgICAgICAgY2hhciA9ICcmIzYwOyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDYyOlxuICAgICAgICAgICAgICAgIGNoYXIgPSAnJiM2MjsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXN0SW5kZXggIT09IGkpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBodG1sLnN1YnN0cmluZyhsYXN0SW5kZXgsIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdEluZGV4ID0gaSArIDE7XG4gICAgICAgIHJlc3VsdCArPSBjaGFyO1xuICAgIH1cblxuICAgIGlmIChsYXN0SW5kZXggIT09IGkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIGh0bWwuc3Vic3RyaW5nKGxhc3RJbmRleCwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXJ0LXRlbXBsYXRlL2xpYi9jb21waWxlL3J1bnRpbWUuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {module.exports = false;\n\n// Only Node.JS has a process variable that is of [[Class]] process\ntry {\n module.exports = Object.prototype.toString.call(global.process) === '[object process]' \n} catch(e) {}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV0ZWN0LW5vZGUvaW5kZXguanM/MzA0YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblxuLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xudHJ5IHtcbiBtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJyBcbn0gY2F0Y2goZSkge31cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2RldGVjdC1ub2RlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("var $imports = __webpack_require__(0);\nmodule.exports = function ($data) {\n    'use strict';\n    $data = $data || {};\n    var $$out = '', i = $data.i, jsondata = $data.jsondata, $escape = $imports.$escape, j = $data.j, k = $data.k, z = $data.z, n = $data.n, m = $data.m;\n    for (var i = 0; i < jsondata.length; i++) {\n        $$out += '\\r\\n\\t\\t<div class=\"pop-detail\" id=\"detail';\n        $$out += $escape(i);\n        $$out += '\" >\\r\\n\\t\\t\\t<div class=\"detail-left\">\\r\\n\\t\\t\\t\\t<div class=\"leftDetail-h\">\\r\\n\\t\\t\\t\\t\\t';\n        for (var j = 0; j < jsondata[i].specialChannel.length; j++) {\n            $$out += '\\r\\n\\t\\t\\t\\t\\t\\t<a href=\"javascript:void(0)\">';\n            $$out += $escape(jsondata[i].specialChannel[j]);\n            $$out += '</a>\\r\\n\\t\\t\\t\\t\\t';\n        }\n        $$out += '\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\"leftDetail-b\">\\r\\n\\t\\t\\t\\t\\t';\n        for (var k = 0; k < jsondata[i].content.length; k++) {\n            $$out += '\\r\\n\\t\\t\\t\\t\\t\\t<dl class=\"clearfix\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<dt><a href=\"javascript:void(0)\">';\n            $$out += $escape(jsondata[i].content[k].title);\n            $$out += ' > </a></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t';\n            for (var z = 0; z < jsondata[i].content[k].message.length; z++) {\n                $$out += '\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<dd><a href=\"javascript:void(0)\">';\n                $$out += $escape(jsondata[i].content[k].message[z]);\n                $$out += '</a></dd>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t';\n            }\n            $$out += '\\r\\n\\t\\t\\t\\t\\t\\t</dl>\\r\\n\\t\\t\\t\\t\\t';\n        }\n        $$out += '\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\"detail-right\">\\r\\n\\t\\t\\t\\t<div class=\"rigthDetail-t\">\\r\\n\\t\\t\\t\\t\\t';\n        for (var n = 0; n < jsondata[i].sImgs.length; n++) {\n            $$out += '\\r\\n\\t\\t\\t\\t\\t\\t<a href=\"javascript:void(0)\"><img src=\"';\n            $$out += $escape(jsondata[i].sImgs[n]);\n            $$out += '\"/></a>\\r\\n\\t\\t\\t\\t\\t';\n        }\n        $$out += '\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div class=\"rigthDetail-b\">\\r\\n\\t\\t\\t\\t\\t';\n        for (var m = 0; m < jsondata[i].bImgs.length; m++) {\n            $$out += '\\r\\n\\t\\t\\t\\t\\t\\t<a href=\"javascript:void(0)\"><img src=\"';\n            $$out += $escape(jsondata[i].bImgs[m]);\n            $$out += '\" /></a>\\r\\n\\t\\t\\t\\t\\t';\n        }\n        $$out += '\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n';\n    }\n    return $$out;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9UZW1wbGF0ZS9iYW5uZXJDaGFubmVsLmFydD8wOTIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7U0FBQztBQUFBLGlCQUEwQyw4QkFBMUM7QUFBQSxpQkFDb0MsV0FEcEM7QUFBQSxpQkFDMEMsV0FEMUM7QUFBQSxhQUlLO0FBQUEscUJBQTRELGdEQUE1RDtBQUFBLHFCQUM4Qix1Q0FEOUI7QUFBQSxxQkFDaUUscUJBRGpFO0FBQUEsU0FKTDtBQUFBO0FBQUEsYUFTSztBQUFBLHFCQUFxRCx5Q0FBckQ7QUFBQSxxQkFFbUMsc0NBRm5DO0FBQUEscUJBRXFFLG1DQUZyRTtBQUFBLGlCQUdHO0FBQUEseUJBQWdFLG9EQUFoRTtBQUFBLHlCQUNrQywyQ0FEbEM7QUFBQSx5QkFDeUUsZ0NBRHpFO0FBQUEsYUFISDtBQUFBO0FBQUEsU0FUTDtBQUFBO0FBQUEsYUFzQks7QUFBQSxxQkFBbUQsdUNBQW5EO0FBQUEscUJBQ3dDLDhCQUR4QztBQUFBLHFCQUNrRSx3QkFEbEU7QUFBQSxTQXRCTDtBQUFBO0FBQUEsYUEyQks7QUFBQSxxQkFBbUQsdUNBQW5EO0FBQUEscUJBQ3dDLDhCQUR4QztBQUFBLHFCQUNrRSx5QkFEbEU7QUFBQSxTQTNCTDtBQUFBO0FBQUEiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8JSBmb3IodmFyIGk9MDsgaTxqc29uZGF0YS5sZW5ndGg7aSsrKXsgJT5cclxuXHRcdDxkaXYgY2xhc3M9XCJwb3AtZGV0YWlsXCIgaWQ9XCJkZXRhaWw8JT1pJT5cIiA+XHJcblx0XHRcdDxkaXYgY2xhc3M9XCJkZXRhaWwtbGVmdFwiPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJsZWZ0RGV0YWlsLWhcIj5cclxuXHRcdFx0XHRcdDwlIGZvcih2YXIgaj0wOyBqPGpzb25kYXRhW2ldLnNwZWNpYWxDaGFubmVsLmxlbmd0aDtqKyspeyAlPlxyXG5cdFx0XHRcdFx0XHQ8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+PCU9IGpzb25kYXRhW2ldLnNwZWNpYWxDaGFubmVsW2pdJT48L2E+XHJcblx0XHRcdFx0XHQ8JSB9ICU+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImxlZnREZXRhaWwtYlwiPlxyXG5cdFx0XHRcdFx0PCUgZm9yKHZhciBrPTA7IGs8anNvbmRhdGFbaV0uY29udGVudC5sZW5ndGg7aysrKXsgJT5cclxuXHRcdFx0XHRcdFx0PGRsIGNsYXNzPVwiY2xlYXJmaXhcIj5cclxuXHRcdFx0XHRcdFx0XHQ8ZHQ+PGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiPjwlPSBqc29uZGF0YVtpXS5jb250ZW50W2tdLnRpdGxlJT4gPiA8L2E+PC9kdD5cclxuXHRcdFx0XHRcdFx0XHRcdDwlIGZvcih2YXIgej0wOyB6PGpzb25kYXRhW2ldLmNvbnRlbnRba10ubWVzc2FnZS5sZW5ndGg7eisrKXsgJT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PGRkPjxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIj48JT0ganNvbmRhdGFbaV0uY29udGVudFtrXS5tZXNzYWdlW3pdJT48L2E+PC9kZD5cclxuXHRcdFx0XHRcdFx0XHRcdDwlIH0gJT5cclxuXHRcdFx0XHRcdFx0PC9kbD5cclxuXHRcdFx0XHRcdDwlIH0gJT5cclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdDxkaXYgY2xhc3M9XCJkZXRhaWwtcmlnaHRcIj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwicmlndGhEZXRhaWwtdFwiPlxyXG5cdFx0XHRcdFx0PCUgZm9yKHZhciBuPTA7IG48anNvbmRhdGFbaV0uc0ltZ3MubGVuZ3RoO24rKyl7ICU+XHJcblx0XHRcdFx0XHRcdDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIj48aW1nIHNyYz1cIjwlPSBqc29uZGF0YVtpXS5zSW1nc1tuXSU+XCIvPjwvYT5cclxuXHRcdFx0XHRcdDwlIH0gJT5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwicmlndGhEZXRhaWwtYlwiPlxyXG5cdFx0XHRcdFx0PCUgZm9yKHZhciBtPTA7IG08anNvbmRhdGFbaV0uYkltZ3MubGVuZ3RoO20rKyl7ICU+XHJcblx0XHRcdFx0XHRcdDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIj48aW1nIHNyYz1cIjwlPSBqc29uZGF0YVtpXS5iSW1nc1ttXSU+XCIgLz48L2E+XHJcblx0XHRcdFx0XHQ8JSB9ICU+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0PC9kaXY+XHJcbjwlIH0gJT5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9UZW1wbGF0ZS9iYW5uZXJDaGFubmVsLmFydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("var $imports = __webpack_require__(0);\nmodule.exports = function ($data) {\n    'use strict';\n    $data = $data || {};\n    var $$out = '', i = $data.i, jsondata = $data.jsondata, $escape = $imports.$escape;\n    for (var i = 0; i < jsondata.length; i++) {\n        $$out += '\\r\\n<div class=\"swiper-slide\">\\r\\n\\t<a class=\"skItem\" href=\"#\">\\r\\n\\t\\t<img src=\"';\n        $$out += $escape(jsondata[i].img);\n        $$out += '\" />\\r\\n\\t\\t<p>\\r\\n\\t\\t\\t';\n        $$out += $escape(jsondata[i].title);\n        $$out += '\\r\\n\\t\\t</p>\\r\\n\\t\\t<div class=\"sk-price\">\\r\\n\\t\\t\\t<span class=\"sk-price-new sk-price-item\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i>\\uFFE5</i>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>';\n        $$out += $escape(jsondata[i].newPrice);\n        $$out += '</span>\\r\\n\\t\\t\\t</span>\\r\\n\\t\\t\\t<span class=\"sk-price-origin sk-price-item\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i>\\uFFE5</i>\\r\\n\\t\\t\\t\\t\\t\\t\\t<span>';\n        $$out += $escape(jsondata[i].originPrice);\n        $$out += '</span>\\r\\n\\t\\t\\t</span>\\r\\n\\t\\t</div>\\r\\n\\t</a>\\r\\n</div>\\r\\n';\n    }\n    return $$out;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9UZW1wbGF0ZS9zZWNLaWxsTW9kZWwuYXJ0P2RjMWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztTQUFDO0FBQUEsaUJBQTBDLDhCQUExQztBQUFBLGlCQUdZLHlCQUhaO0FBQUEsaUJBR2lDLHlCQUhqQztBQUFBLGlCQUtHLDJCQUxIO0FBQUEsaUJBSzJCLDJCQUwzQjtBQUFBLGlCQVVhLDhCQVZiO0FBQUEsaUJBVXdDLDhCQVZ4QztBQUFBLGlCQWNhLGlDQWRiO0FBQUEsaUJBYzBDLGlDQWQxQztBQUFBIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPCUgZm9yKHZhciBpPTA7IGk8anNvbmRhdGEubGVuZ3RoO2krKyl7ICU+XHJcbjxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGVcIj5cclxuXHQ8YSBjbGFzcz1cInNrSXRlbVwiIGhyZWY9XCIjXCI+XHJcblx0XHQ8aW1nIHNyYz1cIjwlPSBqc29uZGF0YVtpXS5pbWclPlwiIC8+XHJcblx0XHQ8cD5cclxuXHRcdFx0PCU9IGpzb25kYXRhW2ldLnRpdGxlICU+XHJcblx0XHQ8L3A+XHJcblx0XHQ8ZGl2IGNsYXNzPVwic2stcHJpY2VcIj5cclxuXHRcdFx0PHNwYW4gY2xhc3M9XCJzay1wcmljZS1uZXcgc2stcHJpY2UtaXRlbVwiPlxyXG5cdFx0XHRcdFx0XHRcdDxpPu+/pTwvaT5cclxuXHRcdFx0XHRcdFx0XHQ8c3Bhbj48JT0ganNvbmRhdGFbaV0ubmV3UHJpY2UgJT48L3NwYW4+XHJcblx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0PHNwYW4gY2xhc3M9XCJzay1wcmljZS1vcmlnaW4gc2stcHJpY2UtaXRlbVwiPlxyXG5cdFx0XHRcdFx0XHRcdDxpPu+/pTwvaT5cclxuXHRcdFx0XHRcdFx0XHQ8c3Bhbj48JT0ganNvbmRhdGFbaV0ub3JpZ2luUHJpY2UlPjwvc3Bhbj5cclxuXHRcdFx0PC9zcGFuPlxyXG5cdFx0PC9kaXY+XHJcblx0PC9hPlxyXG48L2Rpdj5cclxuPCUgfSAlPlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1RlbXBsYXRlL3NlY0tpbGxNb2RlbC5hcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n");

/***/ })
/******/ ]);